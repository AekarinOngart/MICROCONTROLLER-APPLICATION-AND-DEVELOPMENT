
Lab-06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004244  08004244  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800424c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  080042bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080042bc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001019d  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  0003023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027709  00000000  00000000  00033be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0f  00000000  00000000  0005b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f940b  00000000  00000000  0006be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016520b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  0016525c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080041cc 	.word	0x080041cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080041cc 	.word	0x080041cc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_GPIO_Init+0x2c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0x2c>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0x2c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b09d      	sub	sp, #116	; 0x74
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fb4a 	bl	8000cc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f883 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f7ff ffdf 	bl	80005f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000636:	f000 f9a9 	bl	800098c <MX_TIM1_Init>
  MX_TIM2_Init();
 800063a:	f000 f9fb 	bl	8000a34 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800063e:	f000 fa87 	bl	8000b50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000642:	4831      	ldr	r0, [pc, #196]	; (8000708 <main+0xe4>)
 8000644:	f001 ffbc 	bl	80025c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2	);
 8000648:	4830      	ldr	r0, [pc, #192]	; (800070c <main+0xe8>)
 800064a:	f001 ffb9 	bl	80025c0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (count - oldTime >= 1000){
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <main+0xec>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <main+0xf0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800065c:	d32c      	bcc.n	80006b8 <main+0x94>
		sec1++;
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <main+0xf4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <main+0xf4>)
 8000666:	6013      	str	r3, [r2, #0]
		if(sec1 == 10){
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <main+0xf4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b0a      	cmp	r3, #10
 800066e:	d107      	bne.n	8000680 <main+0x5c>
			sec2 ++;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <main+0xf8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a29      	ldr	r2, [pc, #164]	; (800071c <main+0xf8>)
 8000678:	6013      	str	r3, [r2, #0]
			sec1 = 0;
 800067a:	4b27      	ldr	r3, [pc, #156]	; (8000718 <main+0xf4>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
		}
		if (sec2 == 6){
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <main+0xf8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b06      	cmp	r3, #6
 8000686:	d107      	bne.n	8000698 <main+0x74>
			sec2 = 0;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <main+0xf8>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
			min1++;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <main+0xfc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <main+0xfc>)
 8000696:	6013      	str	r3, [r2, #0]
		}
		if(min1 == 10){
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <main+0xfc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b0a      	cmp	r3, #10
 800069e:	d107      	bne.n	80006b0 <main+0x8c>
			min2 ++;
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <main+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <main+0x100>)
 80006a8:	6013      	str	r3, [r2, #0]
			min1 = 0;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <main+0xfc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
		}
		oldTime = count;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <main+0xec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <main+0xf0>)
 80006b6:	6013      	str	r3, [r2, #0]
	  }


	  if (count2 - oldTime2 >= 400){
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <main+0x104>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <main+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006c6:	d3c2      	bcc.n	800064e <main+0x2a>
		  char hex_string[100];
		  sprintf(hex_string, "%d%d:%d%d \r",min2,min1,sec2,sec1);
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <main+0x100>)
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0xfc>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <main+0xf8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <main+0xf4>)
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	1d38      	adds	r0, r7, #4
 80006da:	9201      	str	r2, [sp, #4]
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	4623      	mov	r3, r4
 80006e0:	460a      	mov	r2, r1
 80006e2:	4913      	ldr	r1, [pc, #76]	; (8000730 <main+0x10c>)
 80006e4:	f003 f904 	bl	80038f0 <siprintf>
		  HAL_UART_Transmit(&huart3,(uint8_t *) hex_string,strlen(hex_string),100);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fda8 	bl	8000240 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <main+0x110>)
 80006fa:	f002 fc29 	bl	8002f50 <HAL_UART_Transmit>
		  count2 = oldTime2;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <main+0x108>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a09      	ldr	r2, [pc, #36]	; (8000728 <main+0x104>)
 8000704:	6013      	str	r3, [r2, #0]
	  if (count - oldTime >= 1000){
 8000706:	e7a2      	b.n	800064e <main+0x2a>
 8000708:	200000b0 	.word	0x200000b0
 800070c:	200000fc 	.word	0x200000fc
 8000710:	20000090 	.word	0x20000090
 8000714:	20000094 	.word	0x20000094
 8000718:	2000009c 	.word	0x2000009c
 800071c:	200000a4 	.word	0x200000a4
 8000720:	200000a0 	.word	0x200000a0
 8000724:	200000a8 	.word	0x200000a8
 8000728:	2000008c 	.word	0x2000008c
 800072c:	20000098 	.word	0x20000098
 8000730:	080041e4 	.word	0x080041e4
 8000734:	20000148 	.word	0x20000148

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 f8ca 	bl	80038e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a2a      	ldr	r2, [pc, #168]	; (800080c <SystemClock_Config+0xd4>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <SystemClock_Config+0xd4>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <SystemClock_Config+0xd8>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <SystemClock_Config+0xd8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a4:	23d8      	movs	r3, #216	; 0xd8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fded 	bl	8001398 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007c4:	f000 f826 	bl	8000814 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c8:	f000 fd96 	bl	80012f8 <HAL_PWREx_EnableOverDrive>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d2:	f000 f81f 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2107      	movs	r1, #7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f87d 	bl	80018f4 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000800:	f000 f808 	bl	8000814 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000856:	2005      	movs	r0, #5
 8000858:	f000 fb60 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 fa42 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80008c2:	f001 fef5 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a02      	ldr	r2, [pc, #8]	; (80008d8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000b0 	.word	0x200000b0
 80008d8:	20000090 	.word	0x20000090

080008dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <TIM2_IRQHandler+0x18>)
 80008e2:	f001 fee5 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count2++;
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <TIM2_IRQHandler+0x1c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a02      	ldr	r2, [pc, #8]	; (80008f8 <TIM2_IRQHandler+0x1c>)
 80008ee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000fc 	.word	0x200000fc
 80008f8:	2000008c 	.word	0x2000008c

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f002 ffae 	bl	800388c <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20080000 	.word	0x20080000
 800095c:	00000400 	.word	0x00000400
 8000960:	200000ac 	.word	0x200000ac
 8000964:	200001e8 	.word	0x200001e8

08000968 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009ac:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009b2:	22d7      	movs	r2, #215	; 0xd7
 80009b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009d8:	f001 fd9a 	bl	8002510 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009e2:	f7ff ff17 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MX_TIM1_Init+0xa0>)
 80009f4:	f001 ff7c 	bl	80028f0 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009fe:	f7ff ff09 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_TIM1_Init+0xa0>)
 8000a14:	f002 f9a2 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a1e:	f7ff fef9 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000b0 	.word	0x200000b0
 8000a30:	40010000 	.word	0x40010000

08000a34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a5c:	22d7      	movs	r2, #215	; 0xd7
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a68:	f240 128f 	movw	r2, #399	; 0x18f
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a7c:	f001 fd48 	bl	8002510 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a86:	f7ff fec5 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a98:	f001 ff2a 	bl	80028f0 <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aa2:	f7ff feb7 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM2_Init+0x98>)
 8000ab4:	f002 f952 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000abe:	f7ff fea9 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000fc 	.word	0x200000fc

08000ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <HAL_TIM_Base_MspInit+0x78>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d114      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2101      	movs	r1, #1
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 fa17 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b04:	2019      	movs	r0, #25
 8000b06:	f000 fa30 	bl	8000f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b0a:	e018      	b.n	8000b3e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2102      	movs	r1, #2
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 f9fd 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b38:	201c      	movs	r0, #28
 8000b3a:	f000 fa16 	bl	8000f6a <HAL_NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40023800 	.word	0x40023800

08000b50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MX_USART3_UART_Init+0x5c>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART3_UART_Init+0x58>)
 8000b94:	f002 f98e 	bl	8002eb4 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f7ff fe39 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000148 	.word	0x20000148
 8000bac:	40004800 	.word	0x40004800

08000bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0ae      	sub	sp, #184	; 0xb8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2290      	movs	r2, #144	; 0x90
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 fe85 	bl	80038e0 <memset>
  if(uartHandle->Instance==USART3)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <HAL_UART_MspInit+0xb4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d13c      	bne.n	8000c5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f866 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff fe0b 	bl	8000814 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c56:	f000 f9a3 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	37b8      	adds	r7, #184	; 0xb8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004800 	.word	0x40004800
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff fe65 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f002 fdfb 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fcbf 	bl	8000624 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb4:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 8000cb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cbc:	200001e4 	.word	0x200001e4

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>

08000cc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f000 f928 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f805 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd2:	f7ff fda5 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f943 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f90b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200001d0 	.word	0x200001d0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200001d0 	.word	0x200001d0

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	05fa0000 	.word	0x05fa0000

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff3e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff31 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e175      	b.n	80012ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8164 	bne.w	80012a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x56>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80be 	beq.w	80012a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <HAL_GPIO_Init+0x324>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_GPIO_Init+0x324>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001142:	4a61      	ldr	r2, [pc, #388]	; (80012c8 <HAL_GPIO_Init+0x328>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_GPIO_Init+0x32c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d037      	beq.n	80011de <HAL_GPIO_Init+0x23e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_GPIO_Init+0x330>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d031      	beq.n	80011da <HAL_GPIO_Init+0x23a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_GPIO_Init+0x334>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x236>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a55      	ldr	r2, [pc, #340]	; (80012d8 <HAL_GPIO_Init+0x338>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x232>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_GPIO_Init+0x33c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x22e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a53      	ldr	r2, [pc, #332]	; (80012e0 <HAL_GPIO_Init+0x340>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x22a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x344>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x348>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x34c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x350>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x21a>
 80011b6:	2309      	movs	r3, #9
 80011b8:	e012      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ba:	230a      	movs	r3, #10
 80011bc:	e010      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00e      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x328>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_GPIO_Init+0x354>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae86 	bls.w	8000fc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40022400 	.word	0x40022400
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_PWREx_EnableOverDrive+0x98>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_PWREx_EnableOverDrive+0x98>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_PWREx_EnableOverDrive+0x98>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001326:	f7ff fd1d 	bl	8000d64 <HAL_GetTick>
 800132a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800132c:	e009      	b.n	8001342 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800132e:	f7ff fd19 	bl	8000d64 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133c:	d901      	bls.n	8001342 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e022      	b.n	8001388 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d1ee      	bne.n	800132e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fd02 	bl	8000d64 <HAL_GetTick>
 8001360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001362:	e009      	b.n	8001378 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001364:	f7ff fcfe 	bl	8000d64 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001372:	d901      	bls.n	8001378 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e007      	b.n	8001388 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_PWREx_EnableOverDrive+0x9c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001384:	d1ee      	bne.n	8001364 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e29b      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8087 	beq.w	80014ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013bc:	4b96      	ldr	r3, [pc, #600]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d00c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c8:	4b93      	ldr	r3, [pc, #588]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d112      	bne.n	80013fa <HAL_RCC_OscConfig+0x62>
 80013d4:	4b90      	ldr	r3, [pc, #576]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e0:	d10b      	bne.n	80013fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d06c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x130>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d168      	bne.n	80014c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e275      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x7a>
 8001404:	4b84      	ldr	r3, [pc, #528]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a83      	ldr	r2, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e02e      	b.n	8001470 <HAL_RCC_OscConfig+0xd8>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x9c>
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7e      	ldr	r2, [pc, #504]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7b      	ldr	r2, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800142c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xd8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0xc0>
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a75      	ldr	r2, [pc, #468]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xd8>
 8001458:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a6b      	ldr	r2, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc74 	bl	8000d64 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc70 	bl	8000d64 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e229      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc60 	bl	8000d64 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fc5c 	bl	8000d64 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e215      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x110>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d069      	beq.n	80015aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d6:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x190>
 80014ee:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x17a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1e9      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	493d      	ldr	r1, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e040      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d023      	beq.n	8001578 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a38      	ldr	r2, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fc12 	bl	8000d64 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc0e 	bl	8000d64 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1c7      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4929      	ldr	r1, [pc, #164]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
 8001576:	e018      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fbee 	bl	8000d64 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fbea 	bl	8000d64 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1a3      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d038      	beq.n	8001628 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d019      	beq.n	80015f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbcb 	bl	8000d64 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbc7 	bl	8000d64 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e180      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x23a>
 80015f0:	e01a      	b.n	8001628 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_RCC_OscConfig+0x280>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbb1 	bl	8000d64 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fbad 	bl	8000d64 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d903      	bls.n	800161c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e166      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
 8001618:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a4 	beq.w	800177e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b8c      	ldr	r3, [pc, #560]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10d      	bne.n	800165e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b89      	ldr	r3, [pc, #548]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a88      	ldr	r2, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b86      	ldr	r3, [pc, #536]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165e:	4b83      	ldr	r3, [pc, #524]	; (800186c <HAL_RCC_OscConfig+0x4d4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800166a:	4b80      	ldr	r3, [pc, #512]	; (800186c <HAL_RCC_OscConfig+0x4d4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7f      	ldr	r2, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x4d4>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fb75 	bl	8000d64 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fb71 	bl	8000d64 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e12a      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001690:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_OscConfig+0x4d4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x31a>
 80016a4:	4b70      	ldr	r3, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	e02d      	b.n	800170e <HAL_RCC_OscConfig+0x376>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x33c>
 80016ba:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a67      	ldr	r2, [pc, #412]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
 80016d2:	e01c      	b.n	800170e <HAL_RCC_OscConfig+0x376>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x35e>
 80016dc:	4b62      	ldr	r3, [pc, #392]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a61      	ldr	r2, [pc, #388]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x376>
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fb25 	bl	8000d64 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb21 	bl	8000d64 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0d8      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ee      	beq.n	800171e <HAL_RCC_OscConfig+0x386>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fb0f 	bl	8000d64 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fb0b 	bl	8000d64 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0c2      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a3c      	ldr	r2, [pc, #240]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80ae 	beq.w	80018e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d06d      	beq.n	8001870 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d14b      	bne.n	8001834 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fadc 	bl	8000d64 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fad8 	bl	8000d64 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e091      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	071b      	lsls	r3, r3, #28
 80017fa:	491b      	ldr	r1, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a18      	ldr	r2, [pc, #96]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff faaa 	bl	8000d64 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff faa6 	bl	8000d64 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e05f      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x47c>
 8001832:	e057      	b.n	80018e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fa90 	bl	8000d64 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa8c 	bl	8000d64 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e045      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_RCC_OscConfig+0x4d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x4b0>
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x54c>
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_RCC_OscConfig+0x558>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d030      	beq.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d129      	bne.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d122      	bne.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d119      	bne.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d10f      	bne.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d0      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 020f 	bic.w	r2, r3, #15
 8001922:	4965      	ldr	r1, [pc, #404]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b8      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	494d      	ldr	r1, [pc, #308]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e07f      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e073      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e8:	f7ff f9bc 	bl	8000d64 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff f9b8 	bl	8000d64 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e053      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d210      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 020f 	bic.w	r2, r3, #15
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e032      	b.n	8001aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4916      	ldr	r1, [pc, #88]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490e      	ldr	r1, [pc, #56]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f000 f821 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	490a      	ldr	r1, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f918 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023c00 	.word	0x40023c00
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	080041f0 	.word	0x080041f0
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad0:	b090      	sub	sp, #64	; 0x40
 8001ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d00d      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x40>
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	f200 80a1 	bhi.w	8001c38 <HAL_RCC_GetSysClockFreq+0x16c>
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x34>
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afe:	e09b      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b04:	e09b      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b0a:	e098      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d028      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	2200      	movs	r2, #0
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b34:	2100      	movs	r1, #0
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b38:	fb03 f201 	mul.w	r2, r3, r1
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	fb00 f303 	mul.w	r3, r0, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b46:	fba0 1202 	umull	r1, r2, r0, r2
 8001b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b52:	4413      	add	r3, r2
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	61fa      	str	r2, [r7, #28]
 8001b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b66:	f7fe fbc3 	bl	80002f0 <__aeabi_uldivmod>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4613      	mov	r3, r2
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b72:	e053      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	617a      	str	r2, [r7, #20]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b86:	f04f 0b00 	mov.w	fp, #0
 8001b8a:	4652      	mov	r2, sl
 8001b8c:	465b      	mov	r3, fp
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	0159      	lsls	r1, r3, #5
 8001b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9c:	0150      	lsls	r0, r2, #5
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ba6:	eb63 090b 	sbc.w	r9, r3, fp
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bbe:	ebb2 0408 	subs.w	r4, r2, r8
 8001bc2:	eb63 0509 	sbc.w	r5, r3, r9
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	00eb      	lsls	r3, r5, #3
 8001bd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd4:	00e2      	lsls	r2, r4, #3
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	461d      	mov	r5, r3
 8001bda:	eb14 030a 	adds.w	r3, r4, sl
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	eb45 030b 	adc.w	r3, r5, fp
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	028b      	lsls	r3, r1, #10
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	028a      	lsls	r2, r1, #10
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c06:	2200      	movs	r2, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c10:	f7fe fb6e 	bl	80002f0 <__aeabi_uldivmod>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4613      	mov	r3, r2
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	3301      	adds	r3, #1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c36:	e002      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3740      	adds	r7, #64	; 0x40
 8001c44:	46bd      	mov	sp, r7
 8001c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	017d7840 	.word	0x017d7840

08001c58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0a9b      	lsrs	r3, r3, #10
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08004200 	.word	0x08004200

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	f7ff ffdc 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0b5b      	lsrs	r3, r3, #13
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08004200 	.word	0x08004200

08001cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ce8:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a68      	ldr	r2, [pc, #416]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	4964      	ldr	r1, [pc, #400]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d017      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	4959      	ldr	r1, [pc, #356]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d38:	d101      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d017      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	494a      	ldr	r1, [pc, #296]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d74:	d101      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 808b 	beq.w	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7fe ffcc 	bl	8000d64 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe ffc8 	bl	8000d64 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e38f      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d035      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d02e      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d114      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe ff90 	bl	8000d64 <HAL_GetTick>
 8001e44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe ff8c 	bl	8000d64 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e351      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ee      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e76:	d111      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e86:	400b      	ands	r3, r1
 8001e88:	4901      	ldr	r1, [pc, #4]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000
 8001e98:	0ffffcff 	.word	0x0ffffcff
 8001e9c:	4bac      	ldr	r3, [pc, #688]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4aab      	ldr	r2, [pc, #684]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ea6:	6093      	str	r3, [r2, #8]
 8001ea8:	4ba9      	ldr	r3, [pc, #676]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	49a6      	ldr	r1, [pc, #664]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ec6:	4ba2      	ldr	r3, [pc, #648]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ecc:	4aa0      	ldr	r2, [pc, #640]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ed6:	4b9e      	ldr	r3, [pc, #632]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	499b      	ldr	r1, [pc, #620]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef4:	4b96      	ldr	r3, [pc, #600]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f02:	4993      	ldr	r1, [pc, #588]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f24:	498a      	ldr	r1, [pc, #552]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f38:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f46:	4982      	ldr	r1, [pc, #520]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f5a:	4b7d      	ldr	r3, [pc, #500]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4979      	ldr	r1, [pc, #484]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7c:	4b74      	ldr	r3, [pc, #464]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4971      	ldr	r1, [pc, #452]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f9e:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f023 020c 	bic.w	r2, r3, #12
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	4968      	ldr	r1, [pc, #416]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fc0:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4960      	ldr	r1, [pc, #384]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	4957      	ldr	r1, [pc, #348]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002004:	4b52      	ldr	r3, [pc, #328]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	494f      	ldr	r1, [pc, #316]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4946      	ldr	r1, [pc, #280]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	493e      	ldr	r1, [pc, #248]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800209a:	492d      	ldr	r1, [pc, #180]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d011      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020bc:	4924      	ldr	r1, [pc, #144]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fc:	4914      	ldr	r1, [pc, #80]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002120:	490b      	ldr	r1, [pc, #44]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00f      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002144:	4902      	ldr	r1, [pc, #8]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800214c:	e002      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002160:	4b8a      	ldr	r3, [pc, #552]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	4986      	ldr	r1, [pc, #536]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002184:	4b81      	ldr	r3, [pc, #516]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	497d      	ldr	r1, [pc, #500]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d006      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80d6 	beq.w	800235c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a75      	ldr	r2, [pc, #468]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021bc:	f7fe fdd2 	bl	8000d64 <HAL_GetTick>
 80021c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021c4:	f7fe fdce 	bl	8000d64 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e195      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d021      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11d      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021f6:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220a:	0e1b      	lsrs	r3, r3, #24
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	019a      	lsls	r2, r3, #6
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	4958      	ldr	r1, [pc, #352]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02e      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225c:	d129      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800225e:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002272:	0f1b      	lsrs	r3, r3, #28
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	019a      	lsls	r2, r3, #6
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	061b      	lsls	r3, r3, #24
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	071b      	lsls	r3, r3, #28
 8002292:	493e      	ldr	r1, [pc, #248]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a0:	f023 021f 	bic.w	r2, r3, #31
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4938      	ldr	r1, [pc, #224]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01d      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d2:	0f1b      	lsrs	r3, r3, #28
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	019a      	lsls	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	071b      	lsls	r3, r3, #28
 80022f2:	4926      	ldr	r1, [pc, #152]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	019a      	lsls	r2, r3, #6
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	071b      	lsls	r3, r3, #28
 8002322:	491a      	ldr	r1, [pc, #104]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002336:	f7fe fd15 	bl	8000d64 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800233e:	f7fe fd11 	bl	8000d64 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0d8      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 80ce 	bne.w	8002500 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002370:	f7fe fcf8 	bl	8000d64 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002376:	e00b      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002378:	f7fe fcf4 	bl	8000d64 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d904      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0bb      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002390:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239c:	d0ec      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d12a      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023d4:	4b4d      	ldr	r3, [pc, #308]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	0f1b      	lsrs	r3, r3, #28
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	019a      	lsls	r2, r3, #6
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	061b      	lsls	r3, r3, #24
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	071b      	lsls	r3, r3, #28
 80023fa:	4944      	ldr	r1, [pc, #272]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002408:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	493d      	ldr	r1, [pc, #244]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d022      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002430:	d11d      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	0e1b      	lsrs	r3, r3, #24
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	0f1b      	lsrs	r3, r3, #28
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	019a      	lsls	r2, r3, #6
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	431a      	orrs	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	4929      	ldr	r1, [pc, #164]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	0e1b      	lsrs	r3, r3, #24
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	019a      	lsls	r2, r3, #6
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	071b      	lsls	r3, r3, #28
 80024ae:	4917      	ldr	r1, [pc, #92]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	4911      	ldr	r1, [pc, #68]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe fc44 	bl	8000d64 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024e0:	f7fe fc40 	bl	8000d64 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e007      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fe:	d1ef      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e049      	b.n	80025b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe faca 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 faca 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e054      	b.n	8002682 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_TIM_Base_Start_IT+0xd0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d022      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d01d      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_TIM_Base_Start_IT+0xd4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_TIM_Base_Start_IT+0xd8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_TIM_Base_Start_IT+0xdc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d115      	bne.n	800266c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_TIM_Base_Start_IT+0xec>)
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d015      	beq.n	800267e <HAL_TIM_Base_Start_IT+0xbe>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d011      	beq.n	800267e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	e008      	b.n	800267e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e000      	b.n	8002680 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40010000 	.word	0x40010000
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40010400 	.word	0x40010400
 80026a4:	40014000 	.word	0x40014000
 80026a8:	40001800 	.word	0x40001800
 80026ac:	00010007 	.word	0x00010007

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9da 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9cc 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f9dd 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0204 	mvn.w	r2, #4
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f9b0 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9a2 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9b3 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0208 	mvn.w	r2, #8
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2204      	movs	r2, #4
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f986 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f978 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f989 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0210 	mvn.w	r2, #16
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f95c 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f94e 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f95f 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0201 	mvn.w	r2, #1
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f928 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fb16 	bl	8002e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fb09 	bl	8002ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d10e      	bne.n	80028ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d107      	bne.n	80028ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f90d 	bl	8002ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d10e      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d107      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0220 	mvn.w	r2, #32
 80028de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fac9 	bl	8002e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_TIM_ConfigClockSource+0x1c>
 8002908:	2302      	movs	r3, #2
 800290a:	e0b4      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x186>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <HAL_TIM_ConfigClockSource+0x190>)
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002944:	d03e      	beq.n	80029c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	f200 8087 	bhi.w	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	f000 8086 	beq.w	8002a62 <HAL_TIM_ConfigClockSource+0x172>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d87f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d01a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0xa6>
 8002960:	2b70      	cmp	r3, #112	; 0x70
 8002962:	d87b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b60      	cmp	r3, #96	; 0x60
 8002966:	d050      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x11a>
 8002968:	2b60      	cmp	r3, #96	; 0x60
 800296a:	d877      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d03c      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0xfa>
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d873      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d058      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x13a>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d86f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	d064      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	2b30      	cmp	r3, #48	; 0x30
 8002982:	d86b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d060      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x15a>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d867      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	2b10      	cmp	r3, #16
 8002992:	d05a      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	e062      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f000 f9b9 	bl	8002d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]
      break;
 80029c2:	e04f      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f000 f9a2 	bl	8002d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e6:	609a      	str	r2, [r3, #8]
      break;
 80029e8:	e03c      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 f916 	bl	8002c28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2150      	movs	r1, #80	; 0x50
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f96f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a08:	e02c      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f935 	bl	8002c86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2160      	movs	r1, #96	; 0x60
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f95f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a28:	e01c      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 f8f6 	bl	8002c28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f94f 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e00c      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 f946 	bl	8002ce6 <TIM_ITRx_SetConfig>
      break;
 8002a5a:	e003      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e000      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	fffeff88 	.word	0xfffeff88

08002a84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b06:	d00f      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <TIM_Base_SetConfig+0x118>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3c      	ldr	r2, [pc, #240]	; (8002c04 <TIM_Base_SetConfig+0x11c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <TIM_Base_SetConfig+0x120>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x40>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2f      	ldr	r2, [pc, #188]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d027      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2c      	ldr	r2, [pc, #176]	; (8002c00 <TIM_Base_SetConfig+0x118>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d023      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <TIM_Base_SetConfig+0x11c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01f      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <TIM_Base_SetConfig+0x120>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d017      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <TIM_Base_SetConfig+0x128>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <TIM_Base_SetConfig+0x12c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00f      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <TIM_Base_SetConfig+0x130>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00b      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <TIM_Base_SetConfig+0x134>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <TIM_Base_SetConfig+0x138>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <TIM_Base_SetConfig+0x13c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <TIM_Base_SetConfig+0x114>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0xf8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <TIM_Base_SetConfig+0x124>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d103      	bne.n	8002be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	615a      	str	r2, [r3, #20]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800
 8002c1c:	40001800 	.word	0x40001800
 8002c20:	40001c00 	.word	0x40001c00
 8002c24:	40002000 	.word	0x40002000

08002c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 030a 	bic.w	r3, r3, #10
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f043 0307 	orr.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	021a      	lsls	r2, r3, #8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e06d      	b.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d01d      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10c      	bne.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40010400 	.word	0x40010400
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40001800 	.word	0x40001800

08002e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e040      	b.n	8002f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fe6a 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8b0 	bl	8003058 <UART_SetConfig>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e022      	b.n	8002f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb08 	bl	8003520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb8f 	bl	8003664 <UART_CheckIdleState>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d171      	bne.n	800304c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Transmit+0x24>
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e06a      	b.n	800304e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2221      	movs	r2, #33	; 0x21
 8002f84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fd feed 	bl	8000d64 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x68>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc0:	e02c      	b.n	800301c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fb96 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e038      	b.n	800304e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1cc      	bne.n	8002fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fb63 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e005      	b.n	800304e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4ba6      	ldr	r3, [pc, #664]	; (800331c <UART_SetConfig+0x2c4>)
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	6979      	ldr	r1, [r7, #20]
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a94      	ldr	r2, [pc, #592]	; (8003320 <UART_SetConfig+0x2c8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d120      	bne.n	8003116 <UART_SetConfig+0xbe>
 80030d4:	4b93      	ldr	r3, [pc, #588]	; (8003324 <UART_SetConfig+0x2cc>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d816      	bhi.n	8003110 <UART_SetConfig+0xb8>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <UART_SetConfig+0x90>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003105 	.word	0x08003105
 80030f0:	080030ff 	.word	0x080030ff
 80030f4:	0800310b 	.word	0x0800310b
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e150      	b.n	80033a0 <UART_SetConfig+0x348>
 80030fe:	2302      	movs	r3, #2
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e14d      	b.n	80033a0 <UART_SetConfig+0x348>
 8003104:	2304      	movs	r3, #4
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e14a      	b.n	80033a0 <UART_SetConfig+0x348>
 800310a:	2308      	movs	r3, #8
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e147      	b.n	80033a0 <UART_SetConfig+0x348>
 8003110:	2310      	movs	r3, #16
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e144      	b.n	80033a0 <UART_SetConfig+0x348>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a83      	ldr	r2, [pc, #524]	; (8003328 <UART_SetConfig+0x2d0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d132      	bne.n	8003186 <UART_SetConfig+0x12e>
 8003120:	4b80      	ldr	r3, [pc, #512]	; (8003324 <UART_SetConfig+0x2cc>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d828      	bhi.n	8003180 <UART_SetConfig+0x128>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0xdc>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003169 	.word	0x08003169
 8003138:	08003181 	.word	0x08003181
 800313c:	08003181 	.word	0x08003181
 8003140:	08003181 	.word	0x08003181
 8003144:	08003175 	.word	0x08003175
 8003148:	08003181 	.word	0x08003181
 800314c:	08003181 	.word	0x08003181
 8003150:	08003181 	.word	0x08003181
 8003154:	0800316f 	.word	0x0800316f
 8003158:	08003181 	.word	0x08003181
 800315c:	08003181 	.word	0x08003181
 8003160:	08003181 	.word	0x08003181
 8003164:	0800317b 	.word	0x0800317b
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e118      	b.n	80033a0 <UART_SetConfig+0x348>
 800316e:	2302      	movs	r3, #2
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e115      	b.n	80033a0 <UART_SetConfig+0x348>
 8003174:	2304      	movs	r3, #4
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e112      	b.n	80033a0 <UART_SetConfig+0x348>
 800317a:	2308      	movs	r3, #8
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e10f      	b.n	80033a0 <UART_SetConfig+0x348>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e10c      	b.n	80033a0 <UART_SetConfig+0x348>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a68      	ldr	r2, [pc, #416]	; (800332c <UART_SetConfig+0x2d4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d120      	bne.n	80031d2 <UART_SetConfig+0x17a>
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <UART_SetConfig+0x2cc>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800319a:	2b30      	cmp	r3, #48	; 0x30
 800319c:	d013      	beq.n	80031c6 <UART_SetConfig+0x16e>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d814      	bhi.n	80031cc <UART_SetConfig+0x174>
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d009      	beq.n	80031ba <UART_SetConfig+0x162>
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d810      	bhi.n	80031cc <UART_SetConfig+0x174>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <UART_SetConfig+0x15c>
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d006      	beq.n	80031c0 <UART_SetConfig+0x168>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x174>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e0f2      	b.n	80033a0 <UART_SetConfig+0x348>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e0ef      	b.n	80033a0 <UART_SetConfig+0x348>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0ec      	b.n	80033a0 <UART_SetConfig+0x348>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e0e9      	b.n	80033a0 <UART_SetConfig+0x348>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0e6      	b.n	80033a0 <UART_SetConfig+0x348>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a56      	ldr	r2, [pc, #344]	; (8003330 <UART_SetConfig+0x2d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d120      	bne.n	800321e <UART_SetConfig+0x1c6>
 80031dc:	4b51      	ldr	r3, [pc, #324]	; (8003324 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031e6:	2bc0      	cmp	r3, #192	; 0xc0
 80031e8:	d013      	beq.n	8003212 <UART_SetConfig+0x1ba>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d814      	bhi.n	8003218 <UART_SetConfig+0x1c0>
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d009      	beq.n	8003206 <UART_SetConfig+0x1ae>
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d810      	bhi.n	8003218 <UART_SetConfig+0x1c0>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x1a8>
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d006      	beq.n	800320c <UART_SetConfig+0x1b4>
 80031fe:	e00b      	b.n	8003218 <UART_SetConfig+0x1c0>
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e0cc      	b.n	80033a0 <UART_SetConfig+0x348>
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e0c9      	b.n	80033a0 <UART_SetConfig+0x348>
 800320c:	2304      	movs	r3, #4
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e0c6      	b.n	80033a0 <UART_SetConfig+0x348>
 8003212:	2308      	movs	r3, #8
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e0c3      	b.n	80033a0 <UART_SetConfig+0x348>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e0c0      	b.n	80033a0 <UART_SetConfig+0x348>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a44      	ldr	r2, [pc, #272]	; (8003334 <UART_SetConfig+0x2dc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d125      	bne.n	8003274 <UART_SetConfig+0x21c>
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <UART_SetConfig+0x2cc>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003236:	d017      	beq.n	8003268 <UART_SetConfig+0x210>
 8003238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800323c:	d817      	bhi.n	800326e <UART_SetConfig+0x216>
 800323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003242:	d00b      	beq.n	800325c <UART_SetConfig+0x204>
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d811      	bhi.n	800326e <UART_SetConfig+0x216>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <UART_SetConfig+0x1fe>
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d006      	beq.n	8003262 <UART_SetConfig+0x20a>
 8003254:	e00b      	b.n	800326e <UART_SetConfig+0x216>
 8003256:	2300      	movs	r3, #0
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e0a1      	b.n	80033a0 <UART_SetConfig+0x348>
 800325c:	2302      	movs	r3, #2
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e09e      	b.n	80033a0 <UART_SetConfig+0x348>
 8003262:	2304      	movs	r3, #4
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e09b      	b.n	80033a0 <UART_SetConfig+0x348>
 8003268:	2308      	movs	r3, #8
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e098      	b.n	80033a0 <UART_SetConfig+0x348>
 800326e:	2310      	movs	r3, #16
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e095      	b.n	80033a0 <UART_SetConfig+0x348>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <UART_SetConfig+0x2e0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d125      	bne.n	80032ca <UART_SetConfig+0x272>
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <UART_SetConfig+0x2cc>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328c:	d017      	beq.n	80032be <UART_SetConfig+0x266>
 800328e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003292:	d817      	bhi.n	80032c4 <UART_SetConfig+0x26c>
 8003294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003298:	d00b      	beq.n	80032b2 <UART_SetConfig+0x25a>
 800329a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329e:	d811      	bhi.n	80032c4 <UART_SetConfig+0x26c>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <UART_SetConfig+0x254>
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d006      	beq.n	80032b8 <UART_SetConfig+0x260>
 80032aa:	e00b      	b.n	80032c4 <UART_SetConfig+0x26c>
 80032ac:	2301      	movs	r3, #1
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e076      	b.n	80033a0 <UART_SetConfig+0x348>
 80032b2:	2302      	movs	r3, #2
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e073      	b.n	80033a0 <UART_SetConfig+0x348>
 80032b8:	2304      	movs	r3, #4
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e070      	b.n	80033a0 <UART_SetConfig+0x348>
 80032be:	2308      	movs	r3, #8
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e06d      	b.n	80033a0 <UART_SetConfig+0x348>
 80032c4:	2310      	movs	r3, #16
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e06a      	b.n	80033a0 <UART_SetConfig+0x348>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	; (800333c <UART_SetConfig+0x2e4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d138      	bne.n	8003346 <UART_SetConfig+0x2ee>
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <UART_SetConfig+0x2cc>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e2:	d017      	beq.n	8003314 <UART_SetConfig+0x2bc>
 80032e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e8:	d82a      	bhi.n	8003340 <UART_SetConfig+0x2e8>
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d00b      	beq.n	8003308 <UART_SetConfig+0x2b0>
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d824      	bhi.n	8003340 <UART_SetConfig+0x2e8>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <UART_SetConfig+0x2aa>
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d006      	beq.n	800330e <UART_SetConfig+0x2b6>
 8003300:	e01e      	b.n	8003340 <UART_SetConfig+0x2e8>
 8003302:	2300      	movs	r3, #0
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e04b      	b.n	80033a0 <UART_SetConfig+0x348>
 8003308:	2302      	movs	r3, #2
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e048      	b.n	80033a0 <UART_SetConfig+0x348>
 800330e:	2304      	movs	r3, #4
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e045      	b.n	80033a0 <UART_SetConfig+0x348>
 8003314:	2308      	movs	r3, #8
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e042      	b.n	80033a0 <UART_SetConfig+0x348>
 800331a:	bf00      	nop
 800331c:	efff69f3 	.word	0xefff69f3
 8003320:	40011000 	.word	0x40011000
 8003324:	40023800 	.word	0x40023800
 8003328:	40004400 	.word	0x40004400
 800332c:	40004800 	.word	0x40004800
 8003330:	40004c00 	.word	0x40004c00
 8003334:	40005000 	.word	0x40005000
 8003338:	40011400 	.word	0x40011400
 800333c:	40007800 	.word	0x40007800
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e02c      	b.n	80033a0 <UART_SetConfig+0x348>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a72      	ldr	r2, [pc, #456]	; (8003514 <UART_SetConfig+0x4bc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d125      	bne.n	800339c <UART_SetConfig+0x344>
 8003350:	4b71      	ldr	r3, [pc, #452]	; (8003518 <UART_SetConfig+0x4c0>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800335a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800335e:	d017      	beq.n	8003390 <UART_SetConfig+0x338>
 8003360:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003364:	d817      	bhi.n	8003396 <UART_SetConfig+0x33e>
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d00b      	beq.n	8003384 <UART_SetConfig+0x32c>
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d811      	bhi.n	8003396 <UART_SetConfig+0x33e>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <UART_SetConfig+0x326>
 8003376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800337a:	d006      	beq.n	800338a <UART_SetConfig+0x332>
 800337c:	e00b      	b.n	8003396 <UART_SetConfig+0x33e>
 800337e:	2300      	movs	r3, #0
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e00d      	b.n	80033a0 <UART_SetConfig+0x348>
 8003384:	2302      	movs	r3, #2
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e00a      	b.n	80033a0 <UART_SetConfig+0x348>
 800338a:	2304      	movs	r3, #4
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e007      	b.n	80033a0 <UART_SetConfig+0x348>
 8003390:	2308      	movs	r3, #8
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x348>
 8003396:	2310      	movs	r3, #16
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e001      	b.n	80033a0 <UART_SetConfig+0x348>
 800339c:	2310      	movs	r3, #16
 800339e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a8:	d15b      	bne.n	8003462 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d828      	bhi.n	8003402 <UART_SetConfig+0x3aa>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0x360>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe fc48 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80033e0:	61b8      	str	r0, [r7, #24]
        break;
 80033e2:	e013      	b.n	800340c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fc58 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80033e8:	61b8      	str	r0, [r7, #24]
        break;
 80033ea:	e00f      	b.n	800340c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <UART_SetConfig+0x4c4>)
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e00c      	b.n	800340c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fb6b 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 80033f6:	61b8      	str	r0, [r7, #24]
        break;
 80033f8:	e008      	b.n	800340c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	61bb      	str	r3, [r7, #24]
        break;
 8003400:	e004      	b.n	800340c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	77bb      	strb	r3, [r7, #30]
        break;
 800340a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d074      	beq.n	80034fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	005a      	lsls	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d916      	bls.n	800345c <UART_SetConfig+0x404>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d212      	bcs.n	800345c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f023 030f 	bic.w	r3, r3, #15
 800343e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	b29a      	uxth	r2, r3
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	4313      	orrs	r3, r2
 8003450:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	89fa      	ldrh	r2, [r7, #14]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e04f      	b.n	80034fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	77bb      	strb	r3, [r7, #30]
 8003460:	e04c      	b.n	80034fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d828      	bhi.n	80034ba <UART_SetConfig+0x462>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x418>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003495 	.word	0x08003495
 8003474:	0800349d 	.word	0x0800349d
 8003478:	080034a5 	.word	0x080034a5
 800347c:	080034bb 	.word	0x080034bb
 8003480:	080034ab 	.word	0x080034ab
 8003484:	080034bb 	.word	0x080034bb
 8003488:	080034bb 	.word	0x080034bb
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7fe fbec 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8003498:	61b8      	str	r0, [r7, #24]
        break;
 800349a:	e013      	b.n	80034c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7fe fbfc 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80034a0:	61b8      	str	r0, [r7, #24]
        break;
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <UART_SetConfig+0x4c4>)
 80034a6:	61bb      	str	r3, [r7, #24]
        break;
 80034a8:	e00c      	b.n	80034c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7fe fb0f 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 80034ae:	61b8      	str	r0, [r7, #24]
        break;
 80034b0:	e008      	b.n	80034c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	61bb      	str	r3, [r7, #24]
        break;
 80034b8:	e004      	b.n	80034c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	77bb      	strb	r3, [r7, #30]
        break;
 80034c2:	bf00      	nop
    }

    if (pclk != 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085a      	lsrs	r2, r3, #1
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b0f      	cmp	r3, #15
 80034e2:	d909      	bls.n	80034f8 <UART_SetConfig+0x4a0>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d205      	bcs.n	80034f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e001      	b.n	80034fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003508:	7fbb      	ldrb	r3, [r7, #30]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40007c00 	.word	0x40007c00
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400

08003520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01a      	beq.n	8003636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d10a      	bne.n	8003636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003674:	f7fd fb76 	bl	8000d64 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d10e      	bne.n	80036a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f831 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e027      	b.n	80036f6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d10e      	bne.n	80036d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f81b 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e011      	b.n	80036f6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b09c      	sub	sp, #112	; 0x70
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	e0a7      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	f000 80a3 	beq.w	8003860 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fd fb23 	bl	8000d64 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <UART_WaitOnFlagUntilTimeout+0x32>
 800372a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13f      	bne.n	80037b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003744:	667b      	str	r3, [r7, #100]	; 0x64
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003750:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e6      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	663b      	str	r3, [r7, #96]	; 0x60
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3308      	adds	r3, #8
 8003780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003782:	64ba      	str	r2, [r7, #72]	; 0x48
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e068      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d050      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037cc:	d148      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	613b      	str	r3, [r7, #16]
   return(result);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	66bb      	str	r3, [r7, #104]	; 0x68
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800382a:	623a      	str	r2, [r7, #32]
 800382c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	69f9      	ldr	r1, [r7, #28]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	61bb      	str	r3, [r7, #24]
   return(result);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e010      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	f43f af48 	beq.w	8003710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3770      	adds	r7, #112	; 0x70
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <__errno>:
 800388c:	4b01      	ldr	r3, [pc, #4]	; (8003894 <__errno+0x8>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	2000000c 	.word	0x2000000c

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	; (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	; (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	; (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 fc8e 	bl	80041cc <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08004244 	.word	0x08004244
 80038d4:	08004244 	.word	0x08004244
 80038d8:	08004244 	.word	0x08004244
 80038dc:	08004248 	.word	0x08004248

080038e0 <memset>:
 80038e0:	4402      	add	r2, r0
 80038e2:	4603      	mov	r3, r0
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d100      	bne.n	80038ea <memset+0xa>
 80038e8:	4770      	bx	lr
 80038ea:	f803 1b01 	strb.w	r1, [r3], #1
 80038ee:	e7f9      	b.n	80038e4 <memset+0x4>

080038f0 <siprintf>:
 80038f0:	b40e      	push	{r1, r2, r3}
 80038f2:	b500      	push	{lr}
 80038f4:	b09c      	sub	sp, #112	; 0x70
 80038f6:	ab1d      	add	r3, sp, #116	; 0x74
 80038f8:	9002      	str	r0, [sp, #8]
 80038fa:	9006      	str	r0, [sp, #24]
 80038fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <siprintf+0x38>)
 8003902:	9107      	str	r1, [sp, #28]
 8003904:	9104      	str	r1, [sp, #16]
 8003906:	4909      	ldr	r1, [pc, #36]	; (800392c <siprintf+0x3c>)
 8003908:	f853 2b04 	ldr.w	r2, [r3], #4
 800390c:	9105      	str	r1, [sp, #20]
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	a902      	add	r1, sp, #8
 8003914:	f000 f868 	bl	80039e8 <_svfiprintf_r>
 8003918:	9b02      	ldr	r3, [sp, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	b01c      	add	sp, #112	; 0x70
 8003920:	f85d eb04 	ldr.w	lr, [sp], #4
 8003924:	b003      	add	sp, #12
 8003926:	4770      	bx	lr
 8003928:	2000000c 	.word	0x2000000c
 800392c:	ffff0208 	.word	0xffff0208

08003930 <__ssputs_r>:
 8003930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	429e      	cmp	r6, r3
 8003938:	4682      	mov	sl, r0
 800393a:	460c      	mov	r4, r1
 800393c:	4690      	mov	r8, r2
 800393e:	461f      	mov	r7, r3
 8003940:	d838      	bhi.n	80039b4 <__ssputs_r+0x84>
 8003942:	898a      	ldrh	r2, [r1, #12]
 8003944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003948:	d032      	beq.n	80039b0 <__ssputs_r+0x80>
 800394a:	6825      	ldr	r5, [r4, #0]
 800394c:	6909      	ldr	r1, [r1, #16]
 800394e:	eba5 0901 	sub.w	r9, r5, r1
 8003952:	6965      	ldr	r5, [r4, #20]
 8003954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800395c:	3301      	adds	r3, #1
 800395e:	444b      	add	r3, r9
 8003960:	106d      	asrs	r5, r5, #1
 8003962:	429d      	cmp	r5, r3
 8003964:	bf38      	it	cc
 8003966:	461d      	movcc	r5, r3
 8003968:	0553      	lsls	r3, r2, #21
 800396a:	d531      	bpl.n	80039d0 <__ssputs_r+0xa0>
 800396c:	4629      	mov	r1, r5
 800396e:	f000 fb63 	bl	8004038 <_malloc_r>
 8003972:	4606      	mov	r6, r0
 8003974:	b950      	cbnz	r0, 800398c <__ssputs_r+0x5c>
 8003976:	230c      	movs	r3, #12
 8003978:	f8ca 3000 	str.w	r3, [sl]
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003982:	81a3      	strh	r3, [r4, #12]
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398c:	6921      	ldr	r1, [r4, #16]
 800398e:	464a      	mov	r2, r9
 8003990:	f000 fabe 	bl	8003f10 <memcpy>
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800399a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	6126      	str	r6, [r4, #16]
 80039a2:	6165      	str	r5, [r4, #20]
 80039a4:	444e      	add	r6, r9
 80039a6:	eba5 0509 	sub.w	r5, r5, r9
 80039aa:	6026      	str	r6, [r4, #0]
 80039ac:	60a5      	str	r5, [r4, #8]
 80039ae:	463e      	mov	r6, r7
 80039b0:	42be      	cmp	r6, r7
 80039b2:	d900      	bls.n	80039b6 <__ssputs_r+0x86>
 80039b4:	463e      	mov	r6, r7
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	4632      	mov	r2, r6
 80039ba:	4641      	mov	r1, r8
 80039bc:	f000 fab6 	bl	8003f2c <memmove>
 80039c0:	68a3      	ldr	r3, [r4, #8]
 80039c2:	1b9b      	subs	r3, r3, r6
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	4433      	add	r3, r6
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	2000      	movs	r0, #0
 80039ce:	e7db      	b.n	8003988 <__ssputs_r+0x58>
 80039d0:	462a      	mov	r2, r5
 80039d2:	f000 fba5 	bl	8004120 <_realloc_r>
 80039d6:	4606      	mov	r6, r0
 80039d8:	2800      	cmp	r0, #0
 80039da:	d1e1      	bne.n	80039a0 <__ssputs_r+0x70>
 80039dc:	6921      	ldr	r1, [r4, #16]
 80039de:	4650      	mov	r0, sl
 80039e0:	f000 fabe 	bl	8003f60 <_free_r>
 80039e4:	e7c7      	b.n	8003976 <__ssputs_r+0x46>
	...

080039e8 <_svfiprintf_r>:
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	4698      	mov	r8, r3
 80039ee:	898b      	ldrh	r3, [r1, #12]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	b09d      	sub	sp, #116	; 0x74
 80039f4:	4607      	mov	r7, r0
 80039f6:	460d      	mov	r5, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	d50e      	bpl.n	8003a1a <_svfiprintf_r+0x32>
 80039fc:	690b      	ldr	r3, [r1, #16]
 80039fe:	b963      	cbnz	r3, 8003a1a <_svfiprintf_r+0x32>
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	f000 fb19 	bl	8004038 <_malloc_r>
 8003a06:	6028      	str	r0, [r5, #0]
 8003a08:	6128      	str	r0, [r5, #16]
 8003a0a:	b920      	cbnz	r0, 8003a16 <_svfiprintf_r+0x2e>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	e0d1      	b.n	8003bba <_svfiprintf_r+0x1d2>
 8003a16:	2340      	movs	r3, #64	; 0x40
 8003a18:	616b      	str	r3, [r5, #20]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1e:	2320      	movs	r3, #32
 8003a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a28:	2330      	movs	r3, #48	; 0x30
 8003a2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bd4 <_svfiprintf_r+0x1ec>
 8003a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a32:	f04f 0901 	mov.w	r9, #1
 8003a36:	4623      	mov	r3, r4
 8003a38:	469a      	mov	sl, r3
 8003a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a3e:	b10a      	cbz	r2, 8003a44 <_svfiprintf_r+0x5c>
 8003a40:	2a25      	cmp	r2, #37	; 0x25
 8003a42:	d1f9      	bne.n	8003a38 <_svfiprintf_r+0x50>
 8003a44:	ebba 0b04 	subs.w	fp, sl, r4
 8003a48:	d00b      	beq.n	8003a62 <_svfiprintf_r+0x7a>
 8003a4a:	465b      	mov	r3, fp
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7ff ff6d 	bl	8003930 <__ssputs_r>
 8003a56:	3001      	adds	r0, #1
 8003a58:	f000 80aa 	beq.w	8003bb0 <_svfiprintf_r+0x1c8>
 8003a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a5e:	445a      	add	r2, fp
 8003a60:	9209      	str	r2, [sp, #36]	; 0x24
 8003a62:	f89a 3000 	ldrb.w	r3, [sl]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a2 	beq.w	8003bb0 <_svfiprintf_r+0x1c8>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a76:	f10a 0a01 	add.w	sl, sl, #1
 8003a7a:	9304      	str	r3, [sp, #16]
 8003a7c:	9307      	str	r3, [sp, #28]
 8003a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a82:	931a      	str	r3, [sp, #104]	; 0x68
 8003a84:	4654      	mov	r4, sl
 8003a86:	2205      	movs	r2, #5
 8003a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a8c:	4851      	ldr	r0, [pc, #324]	; (8003bd4 <_svfiprintf_r+0x1ec>)
 8003a8e:	f7fc fbdf 	bl	8000250 <memchr>
 8003a92:	9a04      	ldr	r2, [sp, #16]
 8003a94:	b9d8      	cbnz	r0, 8003ace <_svfiprintf_r+0xe6>
 8003a96:	06d0      	lsls	r0, r2, #27
 8003a98:	bf44      	itt	mi
 8003a9a:	2320      	movmi	r3, #32
 8003a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aa0:	0711      	lsls	r1, r2, #28
 8003aa2:	bf44      	itt	mi
 8003aa4:	232b      	movmi	r3, #43	; 0x2b
 8003aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003aae:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab0:	d015      	beq.n	8003ade <_svfiprintf_r+0xf6>
 8003ab2:	9a07      	ldr	r2, [sp, #28]
 8003ab4:	4654      	mov	r4, sl
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f04f 0c0a 	mov.w	ip, #10
 8003abc:	4621      	mov	r1, r4
 8003abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac2:	3b30      	subs	r3, #48	; 0x30
 8003ac4:	2b09      	cmp	r3, #9
 8003ac6:	d94e      	bls.n	8003b66 <_svfiprintf_r+0x17e>
 8003ac8:	b1b0      	cbz	r0, 8003af8 <_svfiprintf_r+0x110>
 8003aca:	9207      	str	r2, [sp, #28]
 8003acc:	e014      	b.n	8003af8 <_svfiprintf_r+0x110>
 8003ace:	eba0 0308 	sub.w	r3, r0, r8
 8003ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	46a2      	mov	sl, r4
 8003adc:	e7d2      	b.n	8003a84 <_svfiprintf_r+0x9c>
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	1d19      	adds	r1, r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	9103      	str	r1, [sp, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfbb      	ittet	lt
 8003aea:	425b      	neglt	r3, r3
 8003aec:	f042 0202 	orrlt.w	r2, r2, #2
 8003af0:	9307      	strge	r3, [sp, #28]
 8003af2:	9307      	strlt	r3, [sp, #28]
 8003af4:	bfb8      	it	lt
 8003af6:	9204      	strlt	r2, [sp, #16]
 8003af8:	7823      	ldrb	r3, [r4, #0]
 8003afa:	2b2e      	cmp	r3, #46	; 0x2e
 8003afc:	d10c      	bne.n	8003b18 <_svfiprintf_r+0x130>
 8003afe:	7863      	ldrb	r3, [r4, #1]
 8003b00:	2b2a      	cmp	r3, #42	; 0x2a
 8003b02:	d135      	bne.n	8003b70 <_svfiprintf_r+0x188>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bfb8      	it	lt
 8003b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b14:	3402      	adds	r4, #2
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003be4 <_svfiprintf_r+0x1fc>
 8003b1c:	7821      	ldrb	r1, [r4, #0]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	4650      	mov	r0, sl
 8003b22:	f7fc fb95 	bl	8000250 <memchr>
 8003b26:	b140      	cbz	r0, 8003b3a <_svfiprintf_r+0x152>
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	eba0 000a 	sub.w	r0, r0, sl
 8003b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b32:	9b04      	ldr	r3, [sp, #16]
 8003b34:	4303      	orrs	r3, r0
 8003b36:	3401      	adds	r4, #1
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3e:	4826      	ldr	r0, [pc, #152]	; (8003bd8 <_svfiprintf_r+0x1f0>)
 8003b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b44:	2206      	movs	r2, #6
 8003b46:	f7fc fb83 	bl	8000250 <memchr>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d038      	beq.n	8003bc0 <_svfiprintf_r+0x1d8>
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <_svfiprintf_r+0x1f4>)
 8003b50:	bb1b      	cbnz	r3, 8003b9a <_svfiprintf_r+0x1b2>
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	3307      	adds	r3, #7
 8003b56:	f023 0307 	bic.w	r3, r3, #7
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	9303      	str	r3, [sp, #12]
 8003b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b60:	4433      	add	r3, r6
 8003b62:	9309      	str	r3, [sp, #36]	; 0x24
 8003b64:	e767      	b.n	8003a36 <_svfiprintf_r+0x4e>
 8003b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	e7a5      	b.n	8003abc <_svfiprintf_r+0xd4>
 8003b70:	2300      	movs	r3, #0
 8003b72:	3401      	adds	r4, #1
 8003b74:	9305      	str	r3, [sp, #20]
 8003b76:	4619      	mov	r1, r3
 8003b78:	f04f 0c0a 	mov.w	ip, #10
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b82:	3a30      	subs	r2, #48	; 0x30
 8003b84:	2a09      	cmp	r2, #9
 8003b86:	d903      	bls.n	8003b90 <_svfiprintf_r+0x1a8>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0c5      	beq.n	8003b18 <_svfiprintf_r+0x130>
 8003b8c:	9105      	str	r1, [sp, #20]
 8003b8e:	e7c3      	b.n	8003b18 <_svfiprintf_r+0x130>
 8003b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b94:	4604      	mov	r4, r0
 8003b96:	2301      	movs	r3, #1
 8003b98:	e7f0      	b.n	8003b7c <_svfiprintf_r+0x194>
 8003b9a:	ab03      	add	r3, sp, #12
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	462a      	mov	r2, r5
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <_svfiprintf_r+0x1f8>)
 8003ba2:	a904      	add	r1, sp, #16
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	f3af 8000 	nop.w
 8003baa:	1c42      	adds	r2, r0, #1
 8003bac:	4606      	mov	r6, r0
 8003bae:	d1d6      	bne.n	8003b5e <_svfiprintf_r+0x176>
 8003bb0:	89ab      	ldrh	r3, [r5, #12]
 8003bb2:	065b      	lsls	r3, r3, #25
 8003bb4:	f53f af2c 	bmi.w	8003a10 <_svfiprintf_r+0x28>
 8003bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bba:	b01d      	add	sp, #116	; 0x74
 8003bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <_svfiprintf_r+0x1f8>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f000 f87a 	bl	8003cc4 <_printf_i>
 8003bd0:	e7eb      	b.n	8003baa <_svfiprintf_r+0x1c2>
 8003bd2:	bf00      	nop
 8003bd4:	08004208 	.word	0x08004208
 8003bd8:	08004212 	.word	0x08004212
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	08003931 	.word	0x08003931
 8003be4:	0800420e 	.word	0x0800420e

08003be8 <_printf_common>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	4616      	mov	r6, r2
 8003bee:	4699      	mov	r9, r3
 8003bf0:	688a      	ldr	r2, [r1, #8]
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	bfb8      	it	lt
 8003bfc:	4613      	movlt	r3, r2
 8003bfe:	6033      	str	r3, [r6, #0]
 8003c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c04:	4607      	mov	r7, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	b10a      	cbz	r2, 8003c0e <_printf_common+0x26>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	6833      	ldrmi	r3, [r6, #0]
 8003c16:	3302      	addmi	r3, #2
 8003c18:	6033      	strmi	r3, [r6, #0]
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	f015 0506 	ands.w	r5, r5, #6
 8003c20:	d106      	bne.n	8003c30 <_printf_common+0x48>
 8003c22:	f104 0a19 	add.w	sl, r4, #25
 8003c26:	68e3      	ldr	r3, [r4, #12]
 8003c28:	6832      	ldr	r2, [r6, #0]
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dc26      	bgt.n	8003c7e <_printf_common+0x96>
 8003c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c34:	1e13      	subs	r3, r2, #0
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	bf18      	it	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	0692      	lsls	r2, r2, #26
 8003c3e:	d42b      	bmi.n	8003c98 <_printf_common+0xb0>
 8003c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c44:	4649      	mov	r1, r9
 8003c46:	4638      	mov	r0, r7
 8003c48:	47c0      	blx	r8
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d01e      	beq.n	8003c8c <_printf_common+0xa4>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	68e5      	ldr	r5, [r4, #12]
 8003c52:	6832      	ldr	r2, [r6, #0]
 8003c54:	f003 0306 	and.w	r3, r3, #6
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	bf08      	it	eq
 8003c5c:	1aad      	subeq	r5, r5, r2
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	6922      	ldr	r2, [r4, #16]
 8003c62:	bf0c      	ite	eq
 8003c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c68:	2500      	movne	r5, #0
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	bfc4      	itt	gt
 8003c6e:	1a9b      	subgt	r3, r3, r2
 8003c70:	18ed      	addgt	r5, r5, r3
 8003c72:	2600      	movs	r6, #0
 8003c74:	341a      	adds	r4, #26
 8003c76:	42b5      	cmp	r5, r6
 8003c78:	d11a      	bne.n	8003cb0 <_printf_common+0xc8>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e008      	b.n	8003c90 <_printf_common+0xa8>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4652      	mov	r2, sl
 8003c82:	4649      	mov	r1, r9
 8003c84:	4638      	mov	r0, r7
 8003c86:	47c0      	blx	r8
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d103      	bne.n	8003c94 <_printf_common+0xac>
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c94:	3501      	adds	r5, #1
 8003c96:	e7c6      	b.n	8003c26 <_printf_common+0x3e>
 8003c98:	18e1      	adds	r1, r4, r3
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	2030      	movs	r0, #48	; 0x30
 8003c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ca2:	4422      	add	r2, r4
 8003ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cac:	3302      	adds	r3, #2
 8003cae:	e7c7      	b.n	8003c40 <_printf_common+0x58>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	47c0      	blx	r8
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d0e6      	beq.n	8003c8c <_printf_common+0xa4>
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7d9      	b.n	8003c76 <_printf_common+0x8e>
	...

08003cc4 <_printf_i>:
 8003cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	7e0f      	ldrb	r7, [r1, #24]
 8003cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ccc:	2f78      	cmp	r7, #120	; 0x78
 8003cce:	4691      	mov	r9, r2
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	469a      	mov	sl, r3
 8003cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cda:	d807      	bhi.n	8003cec <_printf_i+0x28>
 8003cdc:	2f62      	cmp	r7, #98	; 0x62
 8003cde:	d80a      	bhi.n	8003cf6 <_printf_i+0x32>
 8003ce0:	2f00      	cmp	r7, #0
 8003ce2:	f000 80d8 	beq.w	8003e96 <_printf_i+0x1d2>
 8003ce6:	2f58      	cmp	r7, #88	; 0x58
 8003ce8:	f000 80a3 	beq.w	8003e32 <_printf_i+0x16e>
 8003cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cf4:	e03a      	b.n	8003d6c <_printf_i+0xa8>
 8003cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cfa:	2b15      	cmp	r3, #21
 8003cfc:	d8f6      	bhi.n	8003cec <_printf_i+0x28>
 8003cfe:	a101      	add	r1, pc, #4	; (adr r1, 8003d04 <_printf_i+0x40>)
 8003d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d71 	.word	0x08003d71
 8003d0c:	08003ced 	.word	0x08003ced
 8003d10:	08003ced 	.word	0x08003ced
 8003d14:	08003ced 	.word	0x08003ced
 8003d18:	08003ced 	.word	0x08003ced
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003ced 	.word	0x08003ced
 8003d24:	08003ced 	.word	0x08003ced
 8003d28:	08003ced 	.word	0x08003ced
 8003d2c:	08003ced 	.word	0x08003ced
 8003d30:	08003e7d 	.word	0x08003e7d
 8003d34:	08003da1 	.word	0x08003da1
 8003d38:	08003e5f 	.word	0x08003e5f
 8003d3c:	08003ced 	.word	0x08003ced
 8003d40:	08003ced 	.word	0x08003ced
 8003d44:	08003e9f 	.word	0x08003e9f
 8003d48:	08003ced 	.word	0x08003ced
 8003d4c:	08003da1 	.word	0x08003da1
 8003d50:	08003ced 	.word	0x08003ced
 8003d54:	08003ced 	.word	0x08003ced
 8003d58:	08003e67 	.word	0x08003e67
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	602a      	str	r2, [r5, #0]
 8003d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0a3      	b.n	8003eb8 <_printf_i+0x1f4>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	6829      	ldr	r1, [r5, #0]
 8003d74:	0606      	lsls	r6, r0, #24
 8003d76:	f101 0304 	add.w	r3, r1, #4
 8003d7a:	d50a      	bpl.n	8003d92 <_printf_i+0xce>
 8003d7c:	680e      	ldr	r6, [r1, #0]
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	2e00      	cmp	r6, #0
 8003d82:	da03      	bge.n	8003d8c <_printf_i+0xc8>
 8003d84:	232d      	movs	r3, #45	; 0x2d
 8003d86:	4276      	negs	r6, r6
 8003d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d8c:	485e      	ldr	r0, [pc, #376]	; (8003f08 <_printf_i+0x244>)
 8003d8e:	230a      	movs	r3, #10
 8003d90:	e019      	b.n	8003dc6 <_printf_i+0x102>
 8003d92:	680e      	ldr	r6, [r1, #0]
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d9a:	bf18      	it	ne
 8003d9c:	b236      	sxthne	r6, r6
 8003d9e:	e7ef      	b.n	8003d80 <_printf_i+0xbc>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	1d19      	adds	r1, r3, #4
 8003da6:	6029      	str	r1, [r5, #0]
 8003da8:	0601      	lsls	r1, r0, #24
 8003daa:	d501      	bpl.n	8003db0 <_printf_i+0xec>
 8003dac:	681e      	ldr	r6, [r3, #0]
 8003dae:	e002      	b.n	8003db6 <_printf_i+0xf2>
 8003db0:	0646      	lsls	r6, r0, #25
 8003db2:	d5fb      	bpl.n	8003dac <_printf_i+0xe8>
 8003db4:	881e      	ldrh	r6, [r3, #0]
 8003db6:	4854      	ldr	r0, [pc, #336]	; (8003f08 <_printf_i+0x244>)
 8003db8:	2f6f      	cmp	r7, #111	; 0x6f
 8003dba:	bf0c      	ite	eq
 8003dbc:	2308      	moveq	r3, #8
 8003dbe:	230a      	movne	r3, #10
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dc6:	6865      	ldr	r5, [r4, #4]
 8003dc8:	60a5      	str	r5, [r4, #8]
 8003dca:	2d00      	cmp	r5, #0
 8003dcc:	bfa2      	ittt	ge
 8003dce:	6821      	ldrge	r1, [r4, #0]
 8003dd0:	f021 0104 	bicge.w	r1, r1, #4
 8003dd4:	6021      	strge	r1, [r4, #0]
 8003dd6:	b90e      	cbnz	r6, 8003ddc <_printf_i+0x118>
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	d04d      	beq.n	8003e78 <_printf_i+0x1b4>
 8003ddc:	4615      	mov	r5, r2
 8003dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8003de2:	fb03 6711 	mls	r7, r3, r1, r6
 8003de6:	5dc7      	ldrb	r7, [r0, r7]
 8003de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dec:	4637      	mov	r7, r6
 8003dee:	42bb      	cmp	r3, r7
 8003df0:	460e      	mov	r6, r1
 8003df2:	d9f4      	bls.n	8003dde <_printf_i+0x11a>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10b      	bne.n	8003e10 <_printf_i+0x14c>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	07de      	lsls	r6, r3, #31
 8003dfc:	d508      	bpl.n	8003e10 <_printf_i+0x14c>
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6861      	ldr	r1, [r4, #4]
 8003e02:	4299      	cmp	r1, r3
 8003e04:	bfde      	ittt	le
 8003e06:	2330      	movle	r3, #48	; 0x30
 8003e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e10:	1b52      	subs	r2, r2, r5
 8003e12:	6122      	str	r2, [r4, #16]
 8003e14:	f8cd a000 	str.w	sl, [sp]
 8003e18:	464b      	mov	r3, r9
 8003e1a:	aa03      	add	r2, sp, #12
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f7ff fee2 	bl	8003be8 <_printf_common>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d14c      	bne.n	8003ec2 <_printf_i+0x1fe>
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	b004      	add	sp, #16
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e32:	4835      	ldr	r0, [pc, #212]	; (8003f08 <_printf_i+0x244>)
 8003e34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e38:	6829      	ldr	r1, [r5, #0]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e40:	6029      	str	r1, [r5, #0]
 8003e42:	061d      	lsls	r5, r3, #24
 8003e44:	d514      	bpl.n	8003e70 <_printf_i+0x1ac>
 8003e46:	07df      	lsls	r7, r3, #31
 8003e48:	bf44      	itt	mi
 8003e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e4e:	6023      	strmi	r3, [r4, #0]
 8003e50:	b91e      	cbnz	r6, 8003e5a <_printf_i+0x196>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	f023 0320 	bic.w	r3, r3, #32
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	e7b0      	b.n	8003dc0 <_printf_i+0xfc>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	f043 0320 	orr.w	r3, r3, #32
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	2378      	movs	r3, #120	; 0x78
 8003e68:	4828      	ldr	r0, [pc, #160]	; (8003f0c <_printf_i+0x248>)
 8003e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e6e:	e7e3      	b.n	8003e38 <_printf_i+0x174>
 8003e70:	0659      	lsls	r1, r3, #25
 8003e72:	bf48      	it	mi
 8003e74:	b2b6      	uxthmi	r6, r6
 8003e76:	e7e6      	b.n	8003e46 <_printf_i+0x182>
 8003e78:	4615      	mov	r5, r2
 8003e7a:	e7bb      	b.n	8003df4 <_printf_i+0x130>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	6826      	ldr	r6, [r4, #0]
 8003e80:	6961      	ldr	r1, [r4, #20]
 8003e82:	1d18      	adds	r0, r3, #4
 8003e84:	6028      	str	r0, [r5, #0]
 8003e86:	0635      	lsls	r5, r6, #24
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	d501      	bpl.n	8003e90 <_printf_i+0x1cc>
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <_printf_i+0x1d2>
 8003e90:	0670      	lsls	r0, r6, #25
 8003e92:	d5fb      	bpl.n	8003e8c <_printf_i+0x1c8>
 8003e94:	8019      	strh	r1, [r3, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	4615      	mov	r5, r2
 8003e9c:	e7ba      	b.n	8003e14 <_printf_i+0x150>
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	602a      	str	r2, [r5, #0]
 8003ea4:	681d      	ldr	r5, [r3, #0]
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f7fc f9d0 	bl	8000250 <memchr>
 8003eb0:	b108      	cbz	r0, 8003eb6 <_printf_i+0x1f2>
 8003eb2:	1b40      	subs	r0, r0, r5
 8003eb4:	6060      	str	r0, [r4, #4]
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec0:	e7a8      	b.n	8003e14 <_printf_i+0x150>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	47d0      	blx	sl
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d0ab      	beq.n	8003e28 <_printf_i+0x164>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	079b      	lsls	r3, r3, #30
 8003ed4:	d413      	bmi.n	8003efe <_printf_i+0x23a>
 8003ed6:	68e0      	ldr	r0, [r4, #12]
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	4298      	cmp	r0, r3
 8003edc:	bfb8      	it	lt
 8003ede:	4618      	movlt	r0, r3
 8003ee0:	e7a4      	b.n	8003e2c <_printf_i+0x168>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d09b      	beq.n	8003e28 <_printf_i+0x164>
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	9903      	ldr	r1, [sp, #12]
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dcf2      	bgt.n	8003ee2 <_printf_i+0x21e>
 8003efc:	e7eb      	b.n	8003ed6 <_printf_i+0x212>
 8003efe:	2500      	movs	r5, #0
 8003f00:	f104 0619 	add.w	r6, r4, #25
 8003f04:	e7f5      	b.n	8003ef2 <_printf_i+0x22e>
 8003f06:	bf00      	nop
 8003f08:	08004219 	.word	0x08004219
 8003f0c:	0800422a 	.word	0x0800422a

08003f10 <memcpy>:
 8003f10:	440a      	add	r2, r1
 8003f12:	4291      	cmp	r1, r2
 8003f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f18:	d100      	bne.n	8003f1c <memcpy+0xc>
 8003f1a:	4770      	bx	lr
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f26:	4291      	cmp	r1, r2
 8003f28:	d1f9      	bne.n	8003f1e <memcpy+0xe>
 8003f2a:	bd10      	pop	{r4, pc}

08003f2c <memmove>:
 8003f2c:	4288      	cmp	r0, r1
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	eb01 0402 	add.w	r4, r1, r2
 8003f34:	d902      	bls.n	8003f3c <memmove+0x10>
 8003f36:	4284      	cmp	r4, r0
 8003f38:	4623      	mov	r3, r4
 8003f3a:	d807      	bhi.n	8003f4c <memmove+0x20>
 8003f3c:	1e43      	subs	r3, r0, #1
 8003f3e:	42a1      	cmp	r1, r4
 8003f40:	d008      	beq.n	8003f54 <memmove+0x28>
 8003f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f4a:	e7f8      	b.n	8003f3e <memmove+0x12>
 8003f4c:	4402      	add	r2, r0
 8003f4e:	4601      	mov	r1, r0
 8003f50:	428a      	cmp	r2, r1
 8003f52:	d100      	bne.n	8003f56 <memmove+0x2a>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f5e:	e7f7      	b.n	8003f50 <memmove+0x24>

08003f60 <_free_r>:
 8003f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d044      	beq.n	8003ff0 <_free_r+0x90>
 8003f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f6a:	9001      	str	r0, [sp, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f72:	bfb8      	it	lt
 8003f74:	18e4      	addlt	r4, r4, r3
 8003f76:	f000 f913 	bl	80041a0 <__malloc_lock>
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <_free_r+0x94>)
 8003f7c:	9801      	ldr	r0, [sp, #4]
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	b933      	cbnz	r3, 8003f90 <_free_r+0x30>
 8003f82:	6063      	str	r3, [r4, #4]
 8003f84:	6014      	str	r4, [r2, #0]
 8003f86:	b003      	add	sp, #12
 8003f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f8c:	f000 b90e 	b.w	80041ac <__malloc_unlock>
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	d908      	bls.n	8003fa6 <_free_r+0x46>
 8003f94:	6825      	ldr	r5, [r4, #0]
 8003f96:	1961      	adds	r1, r4, r5
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	bf01      	itttt	eq
 8003f9c:	6819      	ldreq	r1, [r3, #0]
 8003f9e:	685b      	ldreq	r3, [r3, #4]
 8003fa0:	1949      	addeq	r1, r1, r5
 8003fa2:	6021      	streq	r1, [r4, #0]
 8003fa4:	e7ed      	b.n	8003f82 <_free_r+0x22>
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b10b      	cbz	r3, 8003fb0 <_free_r+0x50>
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d9fa      	bls.n	8003fa6 <_free_r+0x46>
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	1855      	adds	r5, r2, r1
 8003fb4:	42a5      	cmp	r5, r4
 8003fb6:	d10b      	bne.n	8003fd0 <_free_r+0x70>
 8003fb8:	6824      	ldr	r4, [r4, #0]
 8003fba:	4421      	add	r1, r4
 8003fbc:	1854      	adds	r4, r2, r1
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	d1e0      	bne.n	8003f86 <_free_r+0x26>
 8003fc4:	681c      	ldr	r4, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	6053      	str	r3, [r2, #4]
 8003fca:	4421      	add	r1, r4
 8003fcc:	6011      	str	r1, [r2, #0]
 8003fce:	e7da      	b.n	8003f86 <_free_r+0x26>
 8003fd0:	d902      	bls.n	8003fd8 <_free_r+0x78>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	6003      	str	r3, [r0, #0]
 8003fd6:	e7d6      	b.n	8003f86 <_free_r+0x26>
 8003fd8:	6825      	ldr	r5, [r4, #0]
 8003fda:	1961      	adds	r1, r4, r5
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	bf04      	itt	eq
 8003fe0:	6819      	ldreq	r1, [r3, #0]
 8003fe2:	685b      	ldreq	r3, [r3, #4]
 8003fe4:	6063      	str	r3, [r4, #4]
 8003fe6:	bf04      	itt	eq
 8003fe8:	1949      	addeq	r1, r1, r5
 8003fea:	6021      	streq	r1, [r4, #0]
 8003fec:	6054      	str	r4, [r2, #4]
 8003fee:	e7ca      	b.n	8003f86 <_free_r+0x26>
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bd30      	pop	{r4, r5, pc}
 8003ff4:	200001d4 	.word	0x200001d4

08003ff8 <sbrk_aligned>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4e0e      	ldr	r6, [pc, #56]	; (8004034 <sbrk_aligned+0x3c>)
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	6831      	ldr	r1, [r6, #0]
 8004000:	4605      	mov	r5, r0
 8004002:	b911      	cbnz	r1, 800400a <sbrk_aligned+0x12>
 8004004:	f000 f8bc 	bl	8004180 <_sbrk_r>
 8004008:	6030      	str	r0, [r6, #0]
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f8b7 	bl	8004180 <_sbrk_r>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d00a      	beq.n	800402c <sbrk_aligned+0x34>
 8004016:	1cc4      	adds	r4, r0, #3
 8004018:	f024 0403 	bic.w	r4, r4, #3
 800401c:	42a0      	cmp	r0, r4
 800401e:	d007      	beq.n	8004030 <sbrk_aligned+0x38>
 8004020:	1a21      	subs	r1, r4, r0
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f8ac 	bl	8004180 <_sbrk_r>
 8004028:	3001      	adds	r0, #1
 800402a:	d101      	bne.n	8004030 <sbrk_aligned+0x38>
 800402c:	f04f 34ff 	mov.w	r4, #4294967295
 8004030:	4620      	mov	r0, r4
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	200001d8 	.word	0x200001d8

08004038 <_malloc_r>:
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	1ccd      	adds	r5, r1, #3
 800403e:	f025 0503 	bic.w	r5, r5, #3
 8004042:	3508      	adds	r5, #8
 8004044:	2d0c      	cmp	r5, #12
 8004046:	bf38      	it	cc
 8004048:	250c      	movcc	r5, #12
 800404a:	2d00      	cmp	r5, #0
 800404c:	4607      	mov	r7, r0
 800404e:	db01      	blt.n	8004054 <_malloc_r+0x1c>
 8004050:	42a9      	cmp	r1, r5
 8004052:	d905      	bls.n	8004060 <_malloc_r+0x28>
 8004054:	230c      	movs	r3, #12
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	2600      	movs	r6, #0
 800405a:	4630      	mov	r0, r6
 800405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004060:	4e2e      	ldr	r6, [pc, #184]	; (800411c <_malloc_r+0xe4>)
 8004062:	f000 f89d 	bl	80041a0 <__malloc_lock>
 8004066:	6833      	ldr	r3, [r6, #0]
 8004068:	461c      	mov	r4, r3
 800406a:	bb34      	cbnz	r4, 80040ba <_malloc_r+0x82>
 800406c:	4629      	mov	r1, r5
 800406e:	4638      	mov	r0, r7
 8004070:	f7ff ffc2 	bl	8003ff8 <sbrk_aligned>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	4604      	mov	r4, r0
 8004078:	d14d      	bne.n	8004116 <_malloc_r+0xde>
 800407a:	6834      	ldr	r4, [r6, #0]
 800407c:	4626      	mov	r6, r4
 800407e:	2e00      	cmp	r6, #0
 8004080:	d140      	bne.n	8004104 <_malloc_r+0xcc>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	4631      	mov	r1, r6
 8004086:	4638      	mov	r0, r7
 8004088:	eb04 0803 	add.w	r8, r4, r3
 800408c:	f000 f878 	bl	8004180 <_sbrk_r>
 8004090:	4580      	cmp	r8, r0
 8004092:	d13a      	bne.n	800410a <_malloc_r+0xd2>
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	3503      	adds	r5, #3
 8004098:	1a6d      	subs	r5, r5, r1
 800409a:	f025 0503 	bic.w	r5, r5, #3
 800409e:	3508      	adds	r5, #8
 80040a0:	2d0c      	cmp	r5, #12
 80040a2:	bf38      	it	cc
 80040a4:	250c      	movcc	r5, #12
 80040a6:	4629      	mov	r1, r5
 80040a8:	4638      	mov	r0, r7
 80040aa:	f7ff ffa5 	bl	8003ff8 <sbrk_aligned>
 80040ae:	3001      	adds	r0, #1
 80040b0:	d02b      	beq.n	800410a <_malloc_r+0xd2>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	442b      	add	r3, r5
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	e00e      	b.n	80040d8 <_malloc_r+0xa0>
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	1b52      	subs	r2, r2, r5
 80040be:	d41e      	bmi.n	80040fe <_malloc_r+0xc6>
 80040c0:	2a0b      	cmp	r2, #11
 80040c2:	d916      	bls.n	80040f2 <_malloc_r+0xba>
 80040c4:	1961      	adds	r1, r4, r5
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	6025      	str	r5, [r4, #0]
 80040ca:	bf18      	it	ne
 80040cc:	6059      	strne	r1, [r3, #4]
 80040ce:	6863      	ldr	r3, [r4, #4]
 80040d0:	bf08      	it	eq
 80040d2:	6031      	streq	r1, [r6, #0]
 80040d4:	5162      	str	r2, [r4, r5]
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	4638      	mov	r0, r7
 80040da:	f104 060b 	add.w	r6, r4, #11
 80040de:	f000 f865 	bl	80041ac <__malloc_unlock>
 80040e2:	f026 0607 	bic.w	r6, r6, #7
 80040e6:	1d23      	adds	r3, r4, #4
 80040e8:	1af2      	subs	r2, r6, r3
 80040ea:	d0b6      	beq.n	800405a <_malloc_r+0x22>
 80040ec:	1b9b      	subs	r3, r3, r6
 80040ee:	50a3      	str	r3, [r4, r2]
 80040f0:	e7b3      	b.n	800405a <_malloc_r+0x22>
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	bf0c      	ite	eq
 80040f8:	6032      	streq	r2, [r6, #0]
 80040fa:	605a      	strne	r2, [r3, #4]
 80040fc:	e7ec      	b.n	80040d8 <_malloc_r+0xa0>
 80040fe:	4623      	mov	r3, r4
 8004100:	6864      	ldr	r4, [r4, #4]
 8004102:	e7b2      	b.n	800406a <_malloc_r+0x32>
 8004104:	4634      	mov	r4, r6
 8004106:	6876      	ldr	r6, [r6, #4]
 8004108:	e7b9      	b.n	800407e <_malloc_r+0x46>
 800410a:	230c      	movs	r3, #12
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4638      	mov	r0, r7
 8004110:	f000 f84c 	bl	80041ac <__malloc_unlock>
 8004114:	e7a1      	b.n	800405a <_malloc_r+0x22>
 8004116:	6025      	str	r5, [r4, #0]
 8004118:	e7de      	b.n	80040d8 <_malloc_r+0xa0>
 800411a:	bf00      	nop
 800411c:	200001d4 	.word	0x200001d4

08004120 <_realloc_r>:
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	4680      	mov	r8, r0
 8004126:	4614      	mov	r4, r2
 8004128:	460e      	mov	r6, r1
 800412a:	b921      	cbnz	r1, 8004136 <_realloc_r+0x16>
 800412c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4611      	mov	r1, r2
 8004132:	f7ff bf81 	b.w	8004038 <_malloc_r>
 8004136:	b92a      	cbnz	r2, 8004144 <_realloc_r+0x24>
 8004138:	f7ff ff12 	bl	8003f60 <_free_r>
 800413c:	4625      	mov	r5, r4
 800413e:	4628      	mov	r0, r5
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	f000 f838 	bl	80041b8 <_malloc_usable_size_r>
 8004148:	4284      	cmp	r4, r0
 800414a:	4607      	mov	r7, r0
 800414c:	d802      	bhi.n	8004154 <_realloc_r+0x34>
 800414e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004152:	d812      	bhi.n	800417a <_realloc_r+0x5a>
 8004154:	4621      	mov	r1, r4
 8004156:	4640      	mov	r0, r8
 8004158:	f7ff ff6e 	bl	8004038 <_malloc_r>
 800415c:	4605      	mov	r5, r0
 800415e:	2800      	cmp	r0, #0
 8004160:	d0ed      	beq.n	800413e <_realloc_r+0x1e>
 8004162:	42bc      	cmp	r4, r7
 8004164:	4622      	mov	r2, r4
 8004166:	4631      	mov	r1, r6
 8004168:	bf28      	it	cs
 800416a:	463a      	movcs	r2, r7
 800416c:	f7ff fed0 	bl	8003f10 <memcpy>
 8004170:	4631      	mov	r1, r6
 8004172:	4640      	mov	r0, r8
 8004174:	f7ff fef4 	bl	8003f60 <_free_r>
 8004178:	e7e1      	b.n	800413e <_realloc_r+0x1e>
 800417a:	4635      	mov	r5, r6
 800417c:	e7df      	b.n	800413e <_realloc_r+0x1e>
	...

08004180 <_sbrk_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d06      	ldr	r5, [pc, #24]	; (800419c <_sbrk_r+0x1c>)
 8004184:	2300      	movs	r3, #0
 8004186:	4604      	mov	r4, r0
 8004188:	4608      	mov	r0, r1
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f7fc fbb6 	bl	80008fc <_sbrk>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_sbrk_r+0x1a>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_sbrk_r+0x1a>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	200001dc 	.word	0x200001dc

080041a0 <__malloc_lock>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__malloc_lock+0x8>)
 80041a2:	f000 b811 	b.w	80041c8 <__retarget_lock_acquire_recursive>
 80041a6:	bf00      	nop
 80041a8:	200001e0 	.word	0x200001e0

080041ac <__malloc_unlock>:
 80041ac:	4801      	ldr	r0, [pc, #4]	; (80041b4 <__malloc_unlock+0x8>)
 80041ae:	f000 b80c 	b.w	80041ca <__retarget_lock_release_recursive>
 80041b2:	bf00      	nop
 80041b4:	200001e0 	.word	0x200001e0

080041b8 <_malloc_usable_size_r>:
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f18      	subs	r0, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfbc      	itt	lt
 80041c2:	580b      	ldrlt	r3, [r1, r0]
 80041c4:	18c0      	addlt	r0, r0, r3
 80041c6:	4770      	bx	lr

080041c8 <__retarget_lock_acquire_recursive>:
 80041c8:	4770      	bx	lr

080041ca <__retarget_lock_release_recursive>:
 80041ca:	4770      	bx	lr

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
