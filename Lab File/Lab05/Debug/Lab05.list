
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006578  08006578  00016578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006994  08006994  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800699c  0800699c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080069a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001dc  08006b80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006b80  00020424  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf2e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0002c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002834b  00000000  00000000  0002ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c429  00000000  00000000  0005729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79a4  00000000  00000000  000636c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  0015b0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006560 	.word	0x08006560

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006560 	.word	0x08006560

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0x98>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC1_Init+0x98>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC1_Init+0x98>)
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_ADC1_Init+0xa0>)
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_ADC1_Init+0x98>)
 8000654:	f000 fcc6 	bl	8000fe4 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 fa5b 	bl	8000b18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000662:	230a      	movs	r3, #10
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0x98>)
 8000674:	f000 fe60 	bl	8001338 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800067e:	f000 fa4b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001f8 	.word	0x200001f8
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <HAL_ADC_MspInit+0x74>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d123      	bne.n	8000702 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_ADC_MspInit+0x7c>)
 80006fe:	f001 f951 	bl	80019a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40012000 	.word	0x40012000
 8000710:	40023800 	.word	0x40023800
 8000714:	40020800 	.word	0x40020800

08000718 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0x74>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0x74>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0x74>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_GPIO_Init+0x74>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <MX_GPIO_Init+0x74>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_GPIO_Init+0x74>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	21f0      	movs	r1, #240	; 0xf0
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0x78>)
 8000764:	f001 faca 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000768:	23f0      	movs	r3, #240	; 0xf0
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x78>)
 8000780:	f001 f910 	bl	80019a4 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020c00 	.word	0x40020c00

08000794 <average_8>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int average_8(int x){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	static int samples[8];
	static int i = 0;
	static int total =0;

	total += x - samples[i];
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <average_8+0x54>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <average_8+0x58>)
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <average_8+0x5c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <average_8+0x5c>)
 80007b2:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <average_8+0x54>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <average_8+0x58>)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i == 7 ? 0 : i+1);
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <average_8+0x54>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d003      	beq.n	80007d0 <average_8+0x3c>
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <average_8+0x54>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	e000      	b.n	80007d2 <average_8+0x3e>
 80007d0:	2300      	movs	r3, #0
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <average_8+0x54>)
 80007d4:	6013      	str	r3, [r2, #0]
	return total>>3;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <average_8+0x5c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	10db      	asrs	r3, r3, #3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000314 	.word	0x20000314
 80007ec:	20000318 	.word	0x20000318
 80007f0:	20000338 	.word	0x20000338

080007f4 <average_16>:
int average_16(int x){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i = 0;
	static int total =0;

	total += x - samples[i];
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <average_16+0x54>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <average_16+0x58>)
 8000802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <average_16+0x5c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <average_16+0x5c>)
 8000812:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <average_16+0x54>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <average_16+0x58>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i == 15 ? 0 : i+1);
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <average_16+0x54>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d003      	beq.n	8000830 <average_16+0x3c>
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <average_16+0x54>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	e000      	b.n	8000832 <average_16+0x3e>
 8000830:	2300      	movs	r3, #0
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <average_16+0x54>)
 8000834:	6013      	str	r3, [r2, #0]
	return total>>4;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <average_16+0x5c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	111b      	asrs	r3, r3, #4
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	2000033c 	.word	0x2000033c
 800084c:	20000340 	.word	0x20000340
 8000850:	20000380 	.word	0x20000380

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fb42 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f8b5 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f7ff ff59 	bl	8000718 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000866:	f7ff fec5 	bl	80005f4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800086a:	f000 fa81 	bl	8000d70 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);
 800086e:	484e      	ldr	r0, [pc, #312]	; (80009a8 <main+0x154>)
 8000870:	f000 fbfc 	bl	800106c <HAL_ADC_Start>
//	  displayHEX(hex1);
//	  HAL_UART_Transmit(&huart3, (uint32_t *)&str, 12, 100);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
//  	  	HAL_Delay(200);
//	  ข้อ3-4
	  char str1[] ="\r\n";
 8000874:	4a4d      	ldr	r2, [pc, #308]	; (80009ac <main+0x158>)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	4611      	mov	r1, r2
 800087c:	8019      	strh	r1, [r3, #0]
 800087e:	3302      	adds	r3, #2
 8000880:	0c12      	lsrs	r2, r2, #16
 8000882:	701a      	strb	r2, [r3, #0]
	  while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 8000884:	bf00      	nop
 8000886:	2164      	movs	r1, #100	; 0x64
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <main+0x154>)
 800088a:	f000 fcbd 	bl	8001208 <HAL_ADC_PollForConversion>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <main+0x32>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000894:	4844      	ldr	r0, [pc, #272]	; (80009a8 <main+0x154>)
 8000896:	f000 fd42 	bl	800131e <HAL_ADC_GetValue>
 800089a:	4603      	mov	r3, r0
 800089c:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <main+0x15c>)
 800089e:	6013      	str	r3, [r2, #0]
	  displayHEX(adc_val);
 80008a0:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <main+0x15c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f8fb 	bl	8000aa0 <displayHEX>
	  HAL_UART_Transmit(&huart3, (uint32_t*)&str, 100, 100);
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2264      	movs	r2, #100	; 0x64
 80008ae:	4941      	ldr	r1, [pc, #260]	; (80009b4 <main+0x160>)
 80008b0:	4841      	ldr	r0, [pc, #260]	; (80009b8 <main+0x164>)
 80008b2:	f002 fb47 	bl	8002f44 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fcc1 	bl	8000240 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	1d39      	adds	r1, r7, #4
 80008c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c8:	483b      	ldr	r0, [pc, #236]	; (80009b8 <main+0x164>)
 80008ca:	f002 fb3b 	bl	8002f44 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint32_t*)&x, 100, 100);
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	2264      	movs	r2, #100	; 0x64
 80008d2:	493a      	ldr	r1, [pc, #232]	; (80009bc <main+0x168>)
 80008d4:	4838      	ldr	r0, [pc, #224]	; (80009b8 <main+0x164>)
 80008d6:	f002 fb35 	bl	8002f44 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fcaf 	bl	8000240 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	1d39      	adds	r1, r7, #4
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	4832      	ldr	r0, [pc, #200]	; (80009b8 <main+0x164>)
 80008ee:	f002 fb29 	bl	8002f44 <HAL_UART_Transmit>
	  avg_8 = average_8(adc_val);
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <main+0x15c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff4c 	bl	8000794 <average_8>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <main+0x16c>)
 8000900:	6013      	str	r3, [r2, #0]
	  avg_16 = average_16(adc_val);
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <main+0x15c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff74 	bl	80007f4 <average_16>
 800090c:	4603      	mov	r3, r0
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <main+0x170>)
 8000910:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	482c      	ldr	r0, [pc, #176]	; (80009c8 <main+0x174>)
 8000918:	f001 f9f0 	bl	8001cfc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <main+0x174>)
 8000922:	f001 f9eb 	bl	8001cfc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	4827      	ldr	r0, [pc, #156]	; (80009c8 <main+0x174>)
 800092c:	f001 f9e6 	bl	8001cfc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2110      	movs	r1, #16
 8000934:	4824      	ldr	r0, [pc, #144]	; (80009c8 <main+0x174>)
 8000936:	f001 f9e1 	bl	8001cfc <HAL_GPIO_WritePin>

	  if (adc_val >= 820) {
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <main+0x15c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000942:	d32d      	bcc.n	80009a0 <main+0x14c>
	      if (adc_val <= 1638) {
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <main+0x15c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f240 6266 	movw	r2, #1638	; 0x666
 800094c:	4293      	cmp	r3, r2
 800094e:	d805      	bhi.n	800095c <main+0x108>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <main+0x174>)
 8000956:	f001 f9d1 	bl	8001cfc <HAL_GPIO_WritePin>
 800095a:	e021      	b.n	80009a0 <main+0x14c>
	      } else if (adc_val <= 2457) {
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <main+0x15c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f640 1299 	movw	r2, #2457	; 0x999
 8000964:	4293      	cmp	r3, r2
 8000966:	d805      	bhi.n	8000974 <main+0x120>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	21c0      	movs	r1, #192	; 0xc0
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <main+0x174>)
 800096e:	f001 f9c5 	bl	8001cfc <HAL_GPIO_WritePin>
 8000972:	e015      	b.n	80009a0 <main+0x14c>
	      } else if (adc_val <= 3276) {
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <main+0x15c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f640 42cc 	movw	r2, #3276	; 0xccc
 800097c:	4293      	cmp	r3, r2
 800097e:	d805      	bhi.n	800098c <main+0x138>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	21e0      	movs	r1, #224	; 0xe0
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <main+0x174>)
 8000986:	f001 f9b9 	bl	8001cfc <HAL_GPIO_WritePin>
 800098a:	e009      	b.n	80009a0 <main+0x14c>
	      } else if (adc_val <= 4095) {
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <main+0x15c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000994:	d204      	bcs.n	80009a0 <main+0x14c>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	21f0      	movs	r1, #240	; 0xf0
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <main+0x174>)
 800099c:	f001 f9ae 	bl	8001cfc <HAL_GPIO_WritePin>
	      }
	  }

	  HAL_Delay(200);
 80009a0:	20c8      	movs	r0, #200	; 0xc8
 80009a2:	f000 fafb 	bl	8000f9c <HAL_Delay>
  {
 80009a6:	e765      	b.n	8000874 <main+0x20>
 80009a8:	200001f8 	.word	0x200001f8
 80009ac:	08006578 	.word	0x08006578
 80009b0:	20000240 	.word	0x20000240
 80009b4:	20000244 	.word	0x20000244
 80009b8:	20000388 	.word	0x20000388
 80009bc:	200002a8 	.word	0x200002a8
 80009c0:	2000030c 	.word	0x2000030c
 80009c4:	20000310 	.word	0x20000310
 80009c8:	40020c00 	.word	0x40020c00

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 ff7a 	bl	80038d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <SystemClock_Config+0xcc>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a3c:	2360      	movs	r3, #96	; 0x60
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000a40:	2306      	movs	r3, #6
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f96d 	bl	8001d30 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 f85c 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fc04 	bl	800228c <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8a:	f000 f845 	bl	8000b18 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <displayHEX>:

/* USER CODE BEGIN 4 */
void displayHEX(uint32_t hex1){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	6078      	str	r0, [r7, #4]
	float v = (hex1 * 3.3)/4095;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ab2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000af8 <displayHEX+0x58>
 8000ab6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000aba:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000b00 <displayHEX+0x60>
 8000abe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ac2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac6:	edc7 7a03 	vstr	s15, [r7, #12]
	sprintf (str,"ADC1_CH10 0x%08x Vin = %.2f v",hex1,v);
 8000aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad2:	ed8d 7b00 	vstr	d7, [sp]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	490b      	ldr	r1, [pc, #44]	; (8000b08 <displayHEX+0x68>)
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <displayHEX+0x6c>)
 8000adc:	f003 fb46 	bl	800416c <siprintf>
	sprintf (x,"0x%08x",hex1);
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <displayHEX+0x70>)
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <displayHEX+0x74>)
 8000ae6:	f003 fb41 	bl	800416c <siprintf>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	f3af 8000 	nop.w
 8000af8:	66666666 	.word	0x66666666
 8000afc:	400a6666 	.word	0x400a6666
 8000b00:	00000000 	.word	0x00000000
 8000b04:	40affe00 	.word	0x40affe00
 8000b08:	0800657c 	.word	0x0800657c
 8000b0c:	20000244 	.word	0x20000244
 8000b10:	0800659c 	.word	0x0800659c
 8000b14:	200002a8 	.word	0x200002a8

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f9d0 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_kill>:

int _kill(int pid, int sig)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bda:	f002 fe51 	bl	8003880 <__errno>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2216      	movs	r2, #22
 8000be2:	601a      	str	r2, [r3, #0]
  return -1;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_exit>:

void _exit (int status)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ffe7 	bl	8000bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c02:	e7fe      	b.n	8000c02 <_exit+0x12>

08000c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
  }

  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
  }
  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f002 fdb6 	bl	8003880 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20080000 	.word	0x20080000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000384 	.word	0x20000384
 8000d48:	20000428 	.word	0x20000428

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_USART3_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000db4:	f002 f878 	bl	8002ea8 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f7ff feab 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000388 	.word	0x20000388
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ae      	sub	sp, #184	; 0xb8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2290      	movs	r2, #144	; 0x90
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fd6f 	bl	80038d4 <memset>
  if(uartHandle->Instance==USART3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_UART_MspInit+0xb4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13c      	bne.n	8000e7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fc22 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e1a:	f7ff fe7d 	bl	8000b18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0xbc>)
 8000e76:	f000 fd95 	bl	80019a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	37b8      	adds	r7, #184	; 0xb8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004800 	.word	0x40004800
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020c00 	.word	0x40020c00

08000e90 <Reset_Handler>:
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:
 8000e9e:	58d4      	ldr	r4, [r2, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:
 8000ea4:	18c4      	adds	r4, r0, r3
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
 8000eba:	f7ff ff47 	bl	8000d4c <SystemInit>
 8000ebe:	f002 fce5 	bl	800388c <__libc_init_array>
 8000ec2:	f7ff fcc7 	bl	8000854 <main>
 8000ec6:	4770      	bx	lr
 8000ec8:	20080000 	.word	0x20080000
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200001dc 	.word	0x200001dc
 8000ed4:	080069a4 	.word	0x080069a4
 8000ed8:	200001dc 	.word	0x200001dc
 8000edc:	20000424 	.word	0x20000424

08000ee0 <ADC_IRQHandler>:
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 fd28 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fe17 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fd35 	bl	800198a <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 fd0b 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000410 	.word	0x20000410

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000410 	.word	0x20000410

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e031      	b.n	800105e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fb48 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_Init+0x84>)
 8001028:	4013      	ands	r3, r2
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fad6 	bl	80015e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
 800104e:	e001      	b.n	8001054 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	ffffeefd 	.word	0xffffeefd

0800106c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Start+0x1a>
 8001082:	2302      	movs	r3, #2
 8001084:	e0ad      	b.n	80011e2 <HAL_ADC_Start+0x176>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b01      	cmp	r3, #1
 800109a:	d018      	beq.n	80010ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_ADC_Start+0x184>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_ADC_Start+0x188>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9a      	lsrs	r2, r3, #18
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d175      	bne.n	80011c8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_ADC_Start+0x18c>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001116:	d106      	bne.n	8001126 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f023 0206 	bic.w	r2, r3, #6
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
 8001124:	e002      	b.n	800112c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800113c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_ADC_Start+0x190>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d143      	bne.n	80011e0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	e03a      	b.n	80011e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_ADC_Start+0x194>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d10e      	bne.n	8001192 <HAL_ADC_Start+0x126>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001190:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_ADC_Start+0x190>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d120      	bne.n	80011e0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_ADC_Start+0x198>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11b      	bne.n	80011e0 <HAL_ADC_Start+0x174>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d114      	bne.n	80011e0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	e00b      	b.n	80011e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f043 0210 	orr.w	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	fffff8fe 	.word	0xfffff8fe
 80011fc:	40012300 	.word	0x40012300
 8001200:	40012000 	.word	0x40012000
 8001204:	40012200 	.word	0x40012200

08001208 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001224:	d113      	bne.n	800124e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001234:	d10b      	bne.n	800124e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f043 0220 	orr.w	r2, r3, #32
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e063      	b.n	8001316 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800124e:	f7ff fe99 	bl	8000f84 <HAL_GetTick>
 8001252:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001254:	e021      	b.n	800129a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d01d      	beq.n	800129a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <HAL_ADC_PollForConversion+0x6c>
 8001264:	f7ff fe8e 	bl	8000f84 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d212      	bcs.n	800129a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b02      	cmp	r3, #2
 8001280:	d00b      	beq.n	800129a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e03d      	b.n	8001316 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d1d6      	bne.n	8001256 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0212 	mvn.w	r2, #18
 80012b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d123      	bne.n	8001314 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d11f      	bne.n	8001314 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1c>
 8001350:	2302      	movs	r3, #2
 8001352:	e136      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x28a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d93a      	bls.n	80013da <HAL_ADC_ConfigChannel+0xa2>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800136c:	d035      	beq.n	80013da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	3b1e      	subs	r3, #30
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a8d      	ldr	r2, [pc, #564]	; (80015d0 <HAL_ADC_ConfigChannel+0x298>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10a      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68d9      	ldr	r1, [r3, #12]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	061a      	lsls	r2, r3, #24
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b2:	e035      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68d9      	ldr	r1, [r3, #12]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	3b1e      	subs	r3, #30
 80013ce:	409a      	lsls	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d8:	e022      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6919      	ldr	r1, [r3, #16]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	2207      	movs	r2, #7
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6919      	ldr	r1, [r3, #16]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4403      	add	r3, r0
 8001416:	409a      	lsls	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b06      	cmp	r3, #6
 8001426:	d824      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b05      	subs	r3, #5
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	e04c      	b.n	800150c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d824      	bhi.n	80014c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b23      	subs	r3, #35	; 0x23
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b23      	subs	r3, #35	; 0x23
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
 80014c2:	e023      	b.n	800150c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b41      	subs	r3, #65	; 0x41
 80014d6:	221f      	movs	r2, #31
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	; 0x41
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_ADC_ConfigChannel+0x29c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10a      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1f4>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800151e:	d105      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001526:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800152a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_ADC_ConfigChannel+0x29c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10f      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x21e>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b12      	cmp	r3, #18
 800153c:	d10b      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001548:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001554:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_ADC_ConfigChannel+0x29c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d12b      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x280>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_ADC_ConfigChannel+0x298>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d003      	beq.n	8001572 <HAL_ADC_ConfigChannel+0x23a>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b11      	cmp	r3, #17
 8001570:	d122      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001578:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800157c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001584:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001588:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_ADC_ConfigChannel+0x298>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d111      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_ADC_ConfigChannel+0x2a4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0c9a      	lsrs	r2, r3, #18
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015aa:	e002      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f9      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	10000012 	.word	0x10000012
 80015d4:	40012000 	.word	0x40012000
 80015d8:	40012300 	.word	0x40012300
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <ADC_Init+0x1ec>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <ADC_Init+0x1ec>)
 80015f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <ADC_Init+0x1ec>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4973      	ldr	r1, [pc, #460]	; (80017d0 <ADC_Init+0x1ec>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <ADC_Init+0x1f0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d022      	beq.n	80016be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001686:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e00f      	b.n	80016de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0202 	bic.w	r2, r2, #2
 80016ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6899      	ldr	r1, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	005a      	lsls	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6859      	ldr	r1, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	3b01      	subs	r3, #1
 8001738:	035a      	lsls	r2, r3, #13
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	e007      	b.n	8001754 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	3b01      	subs	r3, #1
 8001770:	051a      	lsls	r2, r3, #20
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001796:	025a      	lsls	r2, r3, #9
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	029a      	lsls	r2, r3, #10
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40012300 	.word	0x40012300
 80017d4:	0f000001 	.word	0x0f000001

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <__NVIC_SetPriorityGrouping+0x40>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	4313      	orrs	r3, r2
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x40>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	05fa0000 	.word	0x05fa0000

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff47 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff5c 	bl	8001820 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffb0 	bl	80018f8 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e175      	b.n	8001cb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8164 	bne.w	8001caa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d005      	beq.n	80019fa <HAL_GPIO_Init+0x56>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80be 	beq.w	8001caa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a65      	ldr	r2, [pc, #404]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b46:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <HAL_GPIO_Init+0x328>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_GPIO_Init+0x32c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d037      	beq.n	8001be2 <HAL_GPIO_Init+0x23e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a57      	ldr	r2, [pc, #348]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d031      	beq.n	8001bde <HAL_GPIO_Init+0x23a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x334>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02b      	beq.n	8001bda <HAL_GPIO_Init+0x236>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a55      	ldr	r2, [pc, #340]	; (8001cdc <HAL_GPIO_Init+0x338>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x232>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x33c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x22e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <HAL_GPIO_Init+0x340>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x22a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_GPIO_Init+0x344>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x226>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x348>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x222>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x34c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x21e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x350>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x21a>
 8001bba:	2309      	movs	r3, #9
 8001bbc:	e012      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	e010      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	e00e      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x240>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x328>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a34      	ldr	r2, [pc, #208]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <HAL_GPIO_Init+0x354>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f ae86 	bls.w	80019c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40021c00 	.word	0x40021c00
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40022400 	.word	0x40022400
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e29b      	b.n	800227e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8087 	beq.w	8001e62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d54:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d60:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_OscConfig+0x62>
 8001d6c:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d78:	d10b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x130>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d168      	bne.n	8001e60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e275      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x7a>
 8001d9c:	4b84      	ldr	r3, [pc, #528]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a83      	ldr	r2, [pc, #524]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e02e      	b.n	8001e08 <HAL_RCC_OscConfig+0xd8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x9c>
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b7c      	ldr	r3, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7b      	ldr	r2, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xd8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a72      	ldr	r2, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xd8>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6b      	ldr	r2, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f8b8 	bl	8000f84 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f8b4 	bl	8000f84 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e229      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe8>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f8a4 	bl	8000f84 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f8a0 	bl	8000f84 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e215      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x110>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d069      	beq.n	8001f42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x190>
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x17a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1e9      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e040      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d023      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a38      	ldr	r2, [pc, #224]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f856 	bl	8000f84 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff f852 	bl	8000f84 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4929      	ldr	r1, [pc, #164]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
 8001f0e:	e018      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f832 	bl	8000f84 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff f82e 	bl	8000f84 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1a3      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d038      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d019      	beq.n	8001f8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f80f 	bl	8000f84 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f80b 	bl	8000f84 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e180      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x23a>
 8001f88:	e01a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe fff5 	bl	8000f84 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fff1 	bl	8000f84 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d903      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e166      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
 8001fb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a4 	beq.w	8002116 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a88      	ldr	r2, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b86      	ldr	r3, [pc, #536]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b83      	ldr	r3, [pc, #524]	; (8002204 <HAL_RCC_OscConfig+0x4d4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002002:	4b80      	ldr	r3, [pc, #512]	; (8002204 <HAL_RCC_OscConfig+0x4d4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7f      	ldr	r2, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x4d4>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7fe ffb9 	bl	8000f84 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7fe ffb5 	bl	8000f84 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b64      	cmp	r3, #100	; 0x64
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e12a      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCC_OscConfig+0x4d4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x31a>
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	4a6f      	ldr	r2, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	; 0x70
 8002048:	e02d      	b.n	80020a6 <HAL_RCC_OscConfig+0x376>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x33c>
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
 800206a:	e01c      	b.n	80020a6 <HAL_RCC_OscConfig+0x376>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x35e>
 8002074:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	4a61      	ldr	r2, [pc, #388]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6713      	str	r3, [r2, #112]	; 0x70
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	e00b      	b.n	80020a6 <HAL_RCC_OscConfig+0x376>
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff69 	bl	8000f84 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe ff65 	bl	8000f84 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0d8      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ee      	beq.n	80020b6 <HAL_RCC_OscConfig+0x386>
 80020d8:	e014      	b.n	8002104 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe ff53 	bl	8000f84 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe ff4f 	bl	8000f84 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0c2      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ee      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80ae 	beq.w	800227c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002120:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d06d      	beq.n	8002208 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d14b      	bne.n	80021cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a31      	ldr	r2, [pc, #196]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe ff20 	bl	8000f84 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe ff1c 	bl	8000f84 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e091      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	071b      	lsls	r3, r3, #28
 8002192:	491b      	ldr	r1, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe feee 	bl	8000f84 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe feea 	bl	8000f84 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e05f      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x47c>
 80021ca:	e057      	b.n	800227c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fed4 	bl	8000f84 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fed0 	bl	8000f84 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4b0>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x54c>
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x558>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d030      	beq.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d129      	bne.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d122      	bne.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002240:	4293      	cmp	r3, r2
 8002242:	d119      	bne.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d10f      	bne.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 020f 	bic.w	r2, r3, #15
 80022ba:	4965      	ldr	r1, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800230e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d040      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e073      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4936      	ldr	r1, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fe00 	bl	8000f84 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fdfc 	bl	8000f84 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e053      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d210      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 020f 	bic.w	r2, r3, #15
 80023c6:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1d4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fd5c 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00
 8002454:	40023800 	.word	0x40023800
 8002458:	080065a4 	.word	0x080065a4
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002468:	b090      	sub	sp, #64	; 0x40
 800246a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
 8002470:	2300      	movs	r3, #0
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d00d      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002488:	2b08      	cmp	r3, #8
 800248a:	f200 80a1 	bhi.w	80025d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
 8002492:	2b04      	cmp	r3, #4
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x3a>
 8002496:	e09b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800249c:	e09b      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024a2:	e098      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d028      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	2200      	movs	r2, #0
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	627a      	str	r2, [r7, #36]	; 0x24
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024cc:	2100      	movs	r1, #0
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024d0:	fb03 f201 	mul.w	r2, r3, r1
 80024d4:	2300      	movs	r3, #0
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	4413      	add	r3, r2
 80024dc:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_RCC_GetSysClockFreq+0x188>)
 80024de:	fba0 1202 	umull	r1, r2, r0, r2
 80024e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e4:	460a      	mov	r2, r1
 80024e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ea:	4413      	add	r3, r2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	2200      	movs	r2, #0
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	61fa      	str	r2, [r7, #28]
 80024f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024fe:	f7fd fef7 	bl	80002f0 <__aeabi_uldivmod>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4613      	mov	r3, r2
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250a:	e053      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	2200      	movs	r2, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	617a      	str	r2, [r7, #20]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800251e:	f04f 0b00 	mov.w	fp, #0
 8002522:	4652      	mov	r2, sl
 8002524:	465b      	mov	r3, fp
 8002526:	f04f 0000 	mov.w	r0, #0
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	0159      	lsls	r1, r3, #5
 8002530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002534:	0150      	lsls	r0, r2, #5
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	ebb2 080a 	subs.w	r8, r2, sl
 800253e:	eb63 090b 	sbc.w	r9, r3, fp
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800254e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002552:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002556:	ebb2 0408 	subs.w	r4, r2, r8
 800255a:	eb63 0509 	sbc.w	r5, r3, r9
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	00eb      	lsls	r3, r5, #3
 8002568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256c:	00e2      	lsls	r2, r4, #3
 800256e:	4614      	mov	r4, r2
 8002570:	461d      	mov	r5, r3
 8002572:	eb14 030a 	adds.w	r3, r4, sl
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	eb45 030b 	adc.w	r3, r5, fp
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258a:	4629      	mov	r1, r5
 800258c:	028b      	lsls	r3, r1, #10
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002594:	4621      	mov	r1, r4
 8002596:	028a      	lsls	r2, r1, #10
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	2200      	movs	r2, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	60fa      	str	r2, [r7, #12]
 80025a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a8:	f7fd fea2 	bl	80002f0 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	3301      	adds	r3, #1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80025c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3740      	adds	r7, #64	; 0x40
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	017d7840 	.word	0x017d7840

080025f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff0 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0a9b      	lsrs	r3, r3, #10
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	080065b4 	.word	0x080065b4

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffdc 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0b5b      	lsrs	r3, r3, #13
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	080065b4 	.word	0x080065b4

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800268a:	6093      	str	r3, [r2, #8]
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	4964      	ldr	r1, [pc, #400]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	4959      	ldr	r1, [pc, #356]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ee:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	494a      	ldr	r1, [pc, #296]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 808b 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002754:	4b35      	ldr	r3, [pc, #212]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a34      	ldr	r2, [pc, #208]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fc10 	bl	8000f84 <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7fe fc0c 	bl	8000f84 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e38f      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d035      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d02e      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a1a      	ldr	r2, [pc, #104]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d114      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fbd4 	bl	8000f84 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fbd0 	bl	8000f84 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e351      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800280e:	d111      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800281e:	400b      	ands	r3, r1
 8002820:	4901      	ldr	r1, [pc, #4]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
 8002826:	e00b      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002828:	40023800 	.word	0x40023800
 800282c:	40007000 	.word	0x40007000
 8002830:	0ffffcff 	.word	0x0ffffcff
 8002834:	4bac      	ldr	r3, [pc, #688]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4aab      	ldr	r2, [pc, #684]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800283e:	6093      	str	r3, [r2, #8]
 8002840:	4ba9      	ldr	r3, [pc, #676]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284c:	49a6      	ldr	r1, [pc, #664]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	4313      	orrs	r3, r2
 8002850:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800285e:	4ba2      	ldr	r3, [pc, #648]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002864:	4aa0      	ldr	r2, [pc, #640]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800286e:	4b9e      	ldr	r3, [pc, #632]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002870:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	499b      	ldr	r1, [pc, #620]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289a:	4993      	ldr	r1, [pc, #588]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ae:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028bc:	498a      	ldr	r1, [pc, #552]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d0:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	4982      	ldr	r1, [pc, #520]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4979      	ldr	r1, [pc, #484]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002914:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4971      	ldr	r1, [pc, #452]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002936:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f023 020c 	bic.w	r2, r3, #12
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	4968      	ldr	r1, [pc, #416]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002958:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	4960      	ldr	r1, [pc, #384]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	4957      	ldr	r1, [pc, #348]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299c:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	494f      	ldr	r1, [pc, #316]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4946      	ldr	r1, [pc, #280]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	493e      	ldr	r1, [pc, #248]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a32:	492d      	ldr	r1, [pc, #180]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d011      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a54:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	4914      	ldr	r1, [pc, #80]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab8:	490b      	ldr	r1, [pc, #44]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00f      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002adc:	4902      	ldr	r1, [pc, #8]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002af8:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	4986      	ldr	r1, [pc, #536]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2c:	497d      	ldr	r1, [pc, #500]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d006      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80d6 	beq.w	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b48:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a75      	ldr	r2, [pc, #468]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe fa16 	bl	8000f84 <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b5c:	f7fe fa12 	bl	8000f84 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e195      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d021      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b9c:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba2:	0e1b      	lsrs	r3, r3, #24
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	019a      	lsls	r2, r3, #6
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	071b      	lsls	r3, r3, #28
 8002bc2:	4958      	ldr	r1, [pc, #352]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02e      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf4:	d129      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	0f1b      	lsrs	r3, r3, #28
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	493e      	ldr	r1, [pc, #248]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c38:	f023 021f 	bic.w	r2, r3, #31
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4938      	ldr	r1, [pc, #224]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01d      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5c:	0e1b      	lsrs	r3, r3, #24
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c64:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6a:	0f1b      	lsrs	r3, r3, #28
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4926      	ldr	r1, [pc, #152]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d011      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	019a      	lsls	r2, r3, #6
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	491a      	ldr	r1, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cce:	f7fe f959 	bl	8000f84 <HAL_GetTick>
 8002cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cd6:	f7fe f955 	bl	8000f84 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0d8      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 80ce 	bne.w	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f93c 	bl	8000f84 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d10:	f7fe f938 	bl	8000f84 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d904      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0bb      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d34:	d0ec      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02e      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d12a      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	0f1b      	lsrs	r3, r3, #28
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	019a      	lsls	r2, r3, #6
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	4944      	ldr	r1, [pc, #272]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d9a:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	493d      	ldr	r1, [pc, #244]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d022      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc8:	d11d      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	0e1b      	lsrs	r3, r3, #24
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	0f1b      	lsrs	r3, r3, #28
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	019a      	lsls	r2, r3, #6
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	4929      	ldr	r1, [pc, #164]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d028      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	0e1b      	lsrs	r3, r3, #24
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	019a      	lsls	r2, r3, #6
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4911      	ldr	r1, [pc, #68]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e70:	f7fe f888 	bl	8000f84 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e78:	f7fe f884 	bl	8000f84 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e007      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e96:	d1ef      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e040      	b.n	8002f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd ff80 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8b0 	bl	800304c <UART_SetConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fb08 	bl	8003514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb8f 	bl	8003658 <UART_CheckIdleState>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d171      	bne.n	8003040 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_UART_Transmit+0x24>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e06a      	b.n	8003042 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7a:	f7fe f803 	bl	8000f84 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d108      	bne.n	8002fac <HAL_UART_Transmit+0x68>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e003      	b.n	8002fb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fb4:	e02c      	b.n	8003010 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fb96 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e038      	b.n	8003042 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	e007      	b.n	8002ffe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1cc      	bne.n	8002fb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2200      	movs	r2, #0
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fb63 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e005      	b.n	8003042 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4ba6      	ldr	r3, [pc, #664]	; (8003310 <UART_SetConfig+0x2c4>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	430b      	orrs	r3, r1
 8003082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a94      	ldr	r2, [pc, #592]	; (8003314 <UART_SetConfig+0x2c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d120      	bne.n	800310a <UART_SetConfig+0xbe>
 80030c8:	4b93      	ldr	r3, [pc, #588]	; (8003318 <UART_SetConfig+0x2cc>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d816      	bhi.n	8003104 <UART_SetConfig+0xb8>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0x90>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	080030f3 	.word	0x080030f3
 80030e8:	080030ff 	.word	0x080030ff
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e150      	b.n	8003394 <UART_SetConfig+0x348>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e14d      	b.n	8003394 <UART_SetConfig+0x348>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e14a      	b.n	8003394 <UART_SetConfig+0x348>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e147      	b.n	8003394 <UART_SetConfig+0x348>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e144      	b.n	8003394 <UART_SetConfig+0x348>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a83      	ldr	r2, [pc, #524]	; (800331c <UART_SetConfig+0x2d0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d132      	bne.n	800317a <UART_SetConfig+0x12e>
 8003114:	4b80      	ldr	r3, [pc, #512]	; (8003318 <UART_SetConfig+0x2cc>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d828      	bhi.n	8003174 <UART_SetConfig+0x128>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0xdc>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003175 	.word	0x08003175
 8003130:	08003175 	.word	0x08003175
 8003134:	08003175 	.word	0x08003175
 8003138:	08003169 	.word	0x08003169
 800313c:	08003175 	.word	0x08003175
 8003140:	08003175 	.word	0x08003175
 8003144:	08003175 	.word	0x08003175
 8003148:	08003163 	.word	0x08003163
 800314c:	08003175 	.word	0x08003175
 8003150:	08003175 	.word	0x08003175
 8003154:	08003175 	.word	0x08003175
 8003158:	0800316f 	.word	0x0800316f
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e118      	b.n	8003394 <UART_SetConfig+0x348>
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e115      	b.n	8003394 <UART_SetConfig+0x348>
 8003168:	2304      	movs	r3, #4
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e112      	b.n	8003394 <UART_SetConfig+0x348>
 800316e:	2308      	movs	r3, #8
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e10f      	b.n	8003394 <UART_SetConfig+0x348>
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e10c      	b.n	8003394 <UART_SetConfig+0x348>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a68      	ldr	r2, [pc, #416]	; (8003320 <UART_SetConfig+0x2d4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d120      	bne.n	80031c6 <UART_SetConfig+0x17a>
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <UART_SetConfig+0x2cc>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d013      	beq.n	80031ba <UART_SetConfig+0x16e>
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d814      	bhi.n	80031c0 <UART_SetConfig+0x174>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d009      	beq.n	80031ae <UART_SetConfig+0x162>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d810      	bhi.n	80031c0 <UART_SetConfig+0x174>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <UART_SetConfig+0x15c>
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d006      	beq.n	80031b4 <UART_SetConfig+0x168>
 80031a6:	e00b      	b.n	80031c0 <UART_SetConfig+0x174>
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e0f2      	b.n	8003394 <UART_SetConfig+0x348>
 80031ae:	2302      	movs	r3, #2
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e0ef      	b.n	8003394 <UART_SetConfig+0x348>
 80031b4:	2304      	movs	r3, #4
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e0ec      	b.n	8003394 <UART_SetConfig+0x348>
 80031ba:	2308      	movs	r3, #8
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e0e9      	b.n	8003394 <UART_SetConfig+0x348>
 80031c0:	2310      	movs	r3, #16
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0e6      	b.n	8003394 <UART_SetConfig+0x348>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a56      	ldr	r2, [pc, #344]	; (8003324 <UART_SetConfig+0x2d8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d120      	bne.n	8003212 <UART_SetConfig+0x1c6>
 80031d0:	4b51      	ldr	r3, [pc, #324]	; (8003318 <UART_SetConfig+0x2cc>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031da:	2bc0      	cmp	r3, #192	; 0xc0
 80031dc:	d013      	beq.n	8003206 <UART_SetConfig+0x1ba>
 80031de:	2bc0      	cmp	r3, #192	; 0xc0
 80031e0:	d814      	bhi.n	800320c <UART_SetConfig+0x1c0>
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d009      	beq.n	80031fa <UART_SetConfig+0x1ae>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d810      	bhi.n	800320c <UART_SetConfig+0x1c0>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <UART_SetConfig+0x1a8>
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d006      	beq.n	8003200 <UART_SetConfig+0x1b4>
 80031f2:	e00b      	b.n	800320c <UART_SetConfig+0x1c0>
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e0cc      	b.n	8003394 <UART_SetConfig+0x348>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e0c9      	b.n	8003394 <UART_SetConfig+0x348>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e0c6      	b.n	8003394 <UART_SetConfig+0x348>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e0c3      	b.n	8003394 <UART_SetConfig+0x348>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e0c0      	b.n	8003394 <UART_SetConfig+0x348>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a44      	ldr	r2, [pc, #272]	; (8003328 <UART_SetConfig+0x2dc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <UART_SetConfig+0x21c>
 800321c:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <UART_SetConfig+0x2cc>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322a:	d017      	beq.n	800325c <UART_SetConfig+0x210>
 800322c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003230:	d817      	bhi.n	8003262 <UART_SetConfig+0x216>
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d00b      	beq.n	8003250 <UART_SetConfig+0x204>
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d811      	bhi.n	8003262 <UART_SetConfig+0x216>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <UART_SetConfig+0x1fe>
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d006      	beq.n	8003256 <UART_SetConfig+0x20a>
 8003248:	e00b      	b.n	8003262 <UART_SetConfig+0x216>
 800324a:	2300      	movs	r3, #0
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e0a1      	b.n	8003394 <UART_SetConfig+0x348>
 8003250:	2302      	movs	r3, #2
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e09e      	b.n	8003394 <UART_SetConfig+0x348>
 8003256:	2304      	movs	r3, #4
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e09b      	b.n	8003394 <UART_SetConfig+0x348>
 800325c:	2308      	movs	r3, #8
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e098      	b.n	8003394 <UART_SetConfig+0x348>
 8003262:	2310      	movs	r3, #16
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e095      	b.n	8003394 <UART_SetConfig+0x348>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <UART_SetConfig+0x2e0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d125      	bne.n	80032be <UART_SetConfig+0x272>
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <UART_SetConfig+0x2cc>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800327c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003280:	d017      	beq.n	80032b2 <UART_SetConfig+0x266>
 8003282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003286:	d817      	bhi.n	80032b8 <UART_SetConfig+0x26c>
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328c:	d00b      	beq.n	80032a6 <UART_SetConfig+0x25a>
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	d811      	bhi.n	80032b8 <UART_SetConfig+0x26c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <UART_SetConfig+0x254>
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d006      	beq.n	80032ac <UART_SetConfig+0x260>
 800329e:	e00b      	b.n	80032b8 <UART_SetConfig+0x26c>
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e076      	b.n	8003394 <UART_SetConfig+0x348>
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e073      	b.n	8003394 <UART_SetConfig+0x348>
 80032ac:	2304      	movs	r3, #4
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e070      	b.n	8003394 <UART_SetConfig+0x348>
 80032b2:	2308      	movs	r3, #8
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e06d      	b.n	8003394 <UART_SetConfig+0x348>
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e06a      	b.n	8003394 <UART_SetConfig+0x348>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <UART_SetConfig+0x2e4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d138      	bne.n	800333a <UART_SetConfig+0x2ee>
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <UART_SetConfig+0x2cc>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032d6:	d017      	beq.n	8003308 <UART_SetConfig+0x2bc>
 80032d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032dc:	d82a      	bhi.n	8003334 <UART_SetConfig+0x2e8>
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e2:	d00b      	beq.n	80032fc <UART_SetConfig+0x2b0>
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e8:	d824      	bhi.n	8003334 <UART_SetConfig+0x2e8>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <UART_SetConfig+0x2aa>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d006      	beq.n	8003302 <UART_SetConfig+0x2b6>
 80032f4:	e01e      	b.n	8003334 <UART_SetConfig+0x2e8>
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e04b      	b.n	8003394 <UART_SetConfig+0x348>
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e048      	b.n	8003394 <UART_SetConfig+0x348>
 8003302:	2304      	movs	r3, #4
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e045      	b.n	8003394 <UART_SetConfig+0x348>
 8003308:	2308      	movs	r3, #8
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e042      	b.n	8003394 <UART_SetConfig+0x348>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40011000 	.word	0x40011000
 8003318:	40023800 	.word	0x40023800
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	40011400 	.word	0x40011400
 8003330:	40007800 	.word	0x40007800
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e02c      	b.n	8003394 <UART_SetConfig+0x348>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <UART_SetConfig+0x4bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d125      	bne.n	8003390 <UART_SetConfig+0x344>
 8003344:	4b71      	ldr	r3, [pc, #452]	; (800350c <UART_SetConfig+0x4c0>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800334e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003352:	d017      	beq.n	8003384 <UART_SetConfig+0x338>
 8003354:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003358:	d817      	bhi.n	800338a <UART_SetConfig+0x33e>
 800335a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335e:	d00b      	beq.n	8003378 <UART_SetConfig+0x32c>
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d811      	bhi.n	800338a <UART_SetConfig+0x33e>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <UART_SetConfig+0x326>
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336e:	d006      	beq.n	800337e <UART_SetConfig+0x332>
 8003370:	e00b      	b.n	800338a <UART_SetConfig+0x33e>
 8003372:	2300      	movs	r3, #0
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e00d      	b.n	8003394 <UART_SetConfig+0x348>
 8003378:	2302      	movs	r3, #2
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e00a      	b.n	8003394 <UART_SetConfig+0x348>
 800337e:	2304      	movs	r3, #4
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e007      	b.n	8003394 <UART_SetConfig+0x348>
 8003384:	2308      	movs	r3, #8
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x348>
 800338a:	2310      	movs	r3, #16
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e001      	b.n	8003394 <UART_SetConfig+0x348>
 8003390:	2310      	movs	r3, #16
 8003392:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339c:	d15b      	bne.n	8003456 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d828      	bhi.n	80033f6 <UART_SetConfig+0x3aa>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x360>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7ff f91a 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 80033d4:	61b8      	str	r0, [r7, #24]
        break;
 80033d6:	e013      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff f92a 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80033dc:	61b8      	str	r0, [r7, #24]
        break;
 80033de:	e00f      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <UART_SetConfig+0x4c4>)
 80033e2:	61bb      	str	r3, [r7, #24]
        break;
 80033e4:	e00c      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f83d 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 80033ea:	61b8      	str	r0, [r7, #24]
        break;
 80033ec:	e008      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e004      	b.n	8003400 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77bb      	strb	r3, [r7, #30]
        break;
 80033fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d074      	beq.n	80034f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	005a      	lsls	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d916      	bls.n	8003450 <UART_SetConfig+0x404>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d212      	bcs.n	8003450 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f023 030f 	bic.w	r3, r3, #15
 8003432:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	b29a      	uxth	r2, r3
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	4313      	orrs	r3, r2
 8003444:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	89fa      	ldrh	r2, [r7, #14]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e04f      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	77bb      	strb	r3, [r7, #30]
 8003454:	e04c      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d828      	bhi.n	80034ae <UART_SetConfig+0x462>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x418>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff f8be 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e013      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7ff f8ce 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <UART_SetConfig+0x4c4>)
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe ffe1 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 80034a2:	61b8      	str	r0, [r7, #24]
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77bb      	strb	r3, [r7, #30]
        break;
 80034b6:	bf00      	nop
    }

    if (pclk != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	085a      	lsrs	r2, r3, #1
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d909      	bls.n	80034ec <UART_SetConfig+0x4a0>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d205      	bcs.n	80034ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	e001      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40007c00 	.word	0x40007c00
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400

08003514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01a      	beq.n	800362a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003612:	d10a      	bne.n	800362a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003668:	f7fd fc8c 	bl	8000f84 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d10e      	bne.n	800369a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f831 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e027      	b.n	80036ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d10e      	bne.n	80036c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f81b 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e011      	b.n	80036ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b09c      	sub	sp, #112	; 0x70
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	e0a7      	b.n	8003854 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	f000 80a3 	beq.w	8003854 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fd fc39 	bl	8000f84 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <UART_WaitOnFlagUntilTimeout+0x32>
 800371e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13f      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003738:	667b      	str	r3, [r7, #100]	; 0x64
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003744:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e6      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	663b      	str	r3, [r7, #96]	; 0x60
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003776:	64ba      	str	r2, [r7, #72]	; 0x48
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800377c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e068      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d050      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c0:	d148      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
 80037ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e6      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	66bb      	str	r3, [r7, #104]	; 0x68
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800381e:	623a      	str	r2, [r7, #32]
 8003820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	69f9      	ldr	r1, [r7, #28]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	61bb      	str	r3, [r7, #24]
   return(result);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e010      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	f43f af48 	beq.w	8003704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3770      	adds	r7, #112	; 0x70
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <__errno>:
 8003880:	4b01      	ldr	r3, [pc, #4]	; (8003888 <__errno+0x8>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000000c 	.word	0x2000000c

0800388c <__libc_init_array>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4d0d      	ldr	r5, [pc, #52]	; (80038c4 <__libc_init_array+0x38>)
 8003890:	4c0d      	ldr	r4, [pc, #52]	; (80038c8 <__libc_init_array+0x3c>)
 8003892:	1b64      	subs	r4, r4, r5
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	2600      	movs	r6, #0
 8003898:	42a6      	cmp	r6, r4
 800389a:	d109      	bne.n	80038b0 <__libc_init_array+0x24>
 800389c:	4d0b      	ldr	r5, [pc, #44]	; (80038cc <__libc_init_array+0x40>)
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__libc_init_array+0x44>)
 80038a0:	f002 fe5e 	bl	8006560 <_init>
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	2600      	movs	r6, #0
 80038aa:	42a6      	cmp	r6, r4
 80038ac:	d105      	bne.n	80038ba <__libc_init_array+0x2e>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b4:	4798      	blx	r3
 80038b6:	3601      	adds	r6, #1
 80038b8:	e7ee      	b.n	8003898 <__libc_init_array+0xc>
 80038ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80038be:	4798      	blx	r3
 80038c0:	3601      	adds	r6, #1
 80038c2:	e7f2      	b.n	80038aa <__libc_init_array+0x1e>
 80038c4:	0800699c 	.word	0x0800699c
 80038c8:	0800699c 	.word	0x0800699c
 80038cc:	0800699c 	.word	0x0800699c
 80038d0:	080069a0 	.word	0x080069a0

080038d4 <memset>:
 80038d4:	4402      	add	r2, r0
 80038d6:	4603      	mov	r3, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <__cvt>:
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	ed2d 8b02 	vpush	{d8}
 80038ea:	eeb0 8b40 	vmov.f64	d8, d0
 80038ee:	b085      	sub	sp, #20
 80038f0:	4617      	mov	r7, r2
 80038f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80038f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80038f6:	ee18 2a90 	vmov	r2, s17
 80038fa:	f025 0520 	bic.w	r5, r5, #32
 80038fe:	2a00      	cmp	r2, #0
 8003900:	bfb6      	itet	lt
 8003902:	222d      	movlt	r2, #45	; 0x2d
 8003904:	2200      	movge	r2, #0
 8003906:	eeb1 8b40 	vneglt.f64	d8, d0
 800390a:	2d46      	cmp	r5, #70	; 0x46
 800390c:	460c      	mov	r4, r1
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	d004      	beq.n	800391c <__cvt+0x38>
 8003912:	2d45      	cmp	r5, #69	; 0x45
 8003914:	d100      	bne.n	8003918 <__cvt+0x34>
 8003916:	3401      	adds	r4, #1
 8003918:	2102      	movs	r1, #2
 800391a:	e000      	b.n	800391e <__cvt+0x3a>
 800391c:	2103      	movs	r1, #3
 800391e:	ab03      	add	r3, sp, #12
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	ab02      	add	r3, sp, #8
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4622      	mov	r2, r4
 8003928:	4633      	mov	r3, r6
 800392a:	eeb0 0b48 	vmov.f64	d0, d8
 800392e:	f000 fccb 	bl	80042c8 <_dtoa_r>
 8003932:	2d47      	cmp	r5, #71	; 0x47
 8003934:	d101      	bne.n	800393a <__cvt+0x56>
 8003936:	07fb      	lsls	r3, r7, #31
 8003938:	d51a      	bpl.n	8003970 <__cvt+0x8c>
 800393a:	2d46      	cmp	r5, #70	; 0x46
 800393c:	eb00 0204 	add.w	r2, r0, r4
 8003940:	d10c      	bne.n	800395c <__cvt+0x78>
 8003942:	7803      	ldrb	r3, [r0, #0]
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d107      	bne.n	8003958 <__cvt+0x74>
 8003948:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	bf1c      	itt	ne
 8003952:	f1c4 0401 	rsbne	r4, r4, #1
 8003956:	6034      	strne	r4, [r6, #0]
 8003958:	6833      	ldr	r3, [r6, #0]
 800395a:	441a      	add	r2, r3
 800395c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	bf08      	it	eq
 8003966:	9203      	streq	r2, [sp, #12]
 8003968:	2130      	movs	r1, #48	; 0x30
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	4293      	cmp	r3, r2
 800396e:	d307      	bcc.n	8003980 <__cvt+0x9c>
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003974:	1a1b      	subs	r3, r3, r0
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	b005      	add	sp, #20
 800397a:	ecbd 8b02 	vpop	{d8}
 800397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003980:	1c5c      	adds	r4, r3, #1
 8003982:	9403      	str	r4, [sp, #12]
 8003984:	7019      	strb	r1, [r3, #0]
 8003986:	e7f0      	b.n	800396a <__cvt+0x86>

08003988 <__exponent>:
 8003988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398a:	4603      	mov	r3, r0
 800398c:	2900      	cmp	r1, #0
 800398e:	bfb8      	it	lt
 8003990:	4249      	neglt	r1, r1
 8003992:	f803 2b02 	strb.w	r2, [r3], #2
 8003996:	bfb4      	ite	lt
 8003998:	222d      	movlt	r2, #45	; 0x2d
 800399a:	222b      	movge	r2, #43	; 0x2b
 800399c:	2909      	cmp	r1, #9
 800399e:	7042      	strb	r2, [r0, #1]
 80039a0:	dd2a      	ble.n	80039f8 <__exponent+0x70>
 80039a2:	f10d 0407 	add.w	r4, sp, #7
 80039a6:	46a4      	mov	ip, r4
 80039a8:	270a      	movs	r7, #10
 80039aa:	46a6      	mov	lr, r4
 80039ac:	460a      	mov	r2, r1
 80039ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80039b2:	fb07 1516 	mls	r5, r7, r6, r1
 80039b6:	3530      	adds	r5, #48	; 0x30
 80039b8:	2a63      	cmp	r2, #99	; 0x63
 80039ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80039be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039c2:	4631      	mov	r1, r6
 80039c4:	dcf1      	bgt.n	80039aa <__exponent+0x22>
 80039c6:	3130      	adds	r1, #48	; 0x30
 80039c8:	f1ae 0502 	sub.w	r5, lr, #2
 80039cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039d0:	1c44      	adds	r4, r0, #1
 80039d2:	4629      	mov	r1, r5
 80039d4:	4561      	cmp	r1, ip
 80039d6:	d30a      	bcc.n	80039ee <__exponent+0x66>
 80039d8:	f10d 0209 	add.w	r2, sp, #9
 80039dc:	eba2 020e 	sub.w	r2, r2, lr
 80039e0:	4565      	cmp	r5, ip
 80039e2:	bf88      	it	hi
 80039e4:	2200      	movhi	r2, #0
 80039e6:	4413      	add	r3, r2
 80039e8:	1a18      	subs	r0, r3, r0
 80039ea:	b003      	add	sp, #12
 80039ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80039f6:	e7ed      	b.n	80039d4 <__exponent+0x4c>
 80039f8:	2330      	movs	r3, #48	; 0x30
 80039fa:	3130      	adds	r1, #48	; 0x30
 80039fc:	7083      	strb	r3, [r0, #2]
 80039fe:	70c1      	strb	r1, [r0, #3]
 8003a00:	1d03      	adds	r3, r0, #4
 8003a02:	e7f1      	b.n	80039e8 <__exponent+0x60>
 8003a04:	0000      	movs	r0, r0
	...

08003a08 <_printf_float>:
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	b08b      	sub	sp, #44	; 0x2c
 8003a0e:	460c      	mov	r4, r1
 8003a10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003a14:	4616      	mov	r6, r2
 8003a16:	461f      	mov	r7, r3
 8003a18:	4605      	mov	r5, r0
 8003a1a:	f001 f9c3 	bl	8004da4 <_localeconv_r>
 8003a1e:	f8d0 b000 	ldr.w	fp, [r0]
 8003a22:	4658      	mov	r0, fp
 8003a24:	f7fc fc0c 	bl	8000240 <strlen>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9308      	str	r3, [sp, #32]
 8003a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	3307      	adds	r3, #7
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	f103 0108 	add.w	r1, r3, #8
 8003a40:	f8c8 1000 	str.w	r1, [r8]
 8003a44:	4682      	mov	sl, r0
 8003a46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003a4e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003cb0 <_printf_float+0x2a8>
 8003a52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003a56:	eeb0 6bc0 	vabs.f64	d6, d0
 8003a5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	dd24      	ble.n	8003aae <_printf_float+0xa6>
 8003a64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d502      	bpl.n	8003a74 <_printf_float+0x6c>
 8003a6e:	232d      	movs	r3, #45	; 0x2d
 8003a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a74:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <_printf_float+0x2b0>)
 8003a76:	4891      	ldr	r0, [pc, #580]	; (8003cbc <_printf_float+0x2b4>)
 8003a78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a7c:	bf94      	ite	ls
 8003a7e:	4698      	movls	r8, r3
 8003a80:	4680      	movhi	r8, r0
 8003a82:	2303      	movs	r3, #3
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6022      	str	r2, [r4, #0]
 8003a8e:	9304      	str	r3, [sp, #16]
 8003a90:	9700      	str	r7, [sp, #0]
 8003a92:	4633      	mov	r3, r6
 8003a94:	aa09      	add	r2, sp, #36	; 0x24
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f9d3 	bl	8003e44 <_printf_common>
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f040 808a 	bne.w	8003bb8 <_printf_float+0x1b0>
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	b00b      	add	sp, #44	; 0x2c
 8003aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aae:	eeb4 0b40 	vcmp.f64	d0, d0
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	d709      	bvc.n	8003acc <_printf_float+0xc4>
 8003ab8:	ee10 3a90 	vmov	r3, s1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bfbc      	itt	lt
 8003ac0:	232d      	movlt	r3, #45	; 0x2d
 8003ac2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ac6:	487e      	ldr	r0, [pc, #504]	; (8003cc0 <_printf_float+0x2b8>)
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <_printf_float+0x2bc>)
 8003aca:	e7d5      	b.n	8003a78 <_printf_float+0x70>
 8003acc:	6863      	ldr	r3, [r4, #4]
 8003ace:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ad2:	9104      	str	r1, [sp, #16]
 8003ad4:	1c59      	adds	r1, r3, #1
 8003ad6:	d13c      	bne.n	8003b52 <_printf_float+0x14a>
 8003ad8:	2306      	movs	r3, #6
 8003ada:	6063      	str	r3, [r4, #4]
 8003adc:	2300      	movs	r3, #0
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	ab08      	add	r3, sp, #32
 8003ae2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aea:	ab07      	add	r3, sp, #28
 8003aec:	6861      	ldr	r1, [r4, #4]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6022      	str	r2, [r4, #0]
 8003af2:	f10d 031b 	add.w	r3, sp, #27
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7ff fef4 	bl	80038e4 <__cvt>
 8003afc:	9b04      	ldr	r3, [sp, #16]
 8003afe:	9907      	ldr	r1, [sp, #28]
 8003b00:	2b47      	cmp	r3, #71	; 0x47
 8003b02:	4680      	mov	r8, r0
 8003b04:	d108      	bne.n	8003b18 <_printf_float+0x110>
 8003b06:	1cc8      	adds	r0, r1, #3
 8003b08:	db02      	blt.n	8003b10 <_printf_float+0x108>
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	dd41      	ble.n	8003b94 <_printf_float+0x18c>
 8003b10:	f1a9 0902 	sub.w	r9, r9, #2
 8003b14:	fa5f f989 	uxtb.w	r9, r9
 8003b18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b1c:	d820      	bhi.n	8003b60 <_printf_float+0x158>
 8003b1e:	3901      	subs	r1, #1
 8003b20:	464a      	mov	r2, r9
 8003b22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b26:	9107      	str	r1, [sp, #28]
 8003b28:	f7ff ff2e 	bl	8003988 <__exponent>
 8003b2c:	9a08      	ldr	r2, [sp, #32]
 8003b2e:	9004      	str	r0, [sp, #16]
 8003b30:	1813      	adds	r3, r2, r0
 8003b32:	2a01      	cmp	r2, #1
 8003b34:	6123      	str	r3, [r4, #16]
 8003b36:	dc02      	bgt.n	8003b3e <_printf_float+0x136>
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	07d2      	lsls	r2, r2, #31
 8003b3c:	d501      	bpl.n	8003b42 <_printf_float+0x13a>
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0a2      	beq.n	8003a90 <_printf_float+0x88>
 8003b4a:	232d      	movs	r3, #45	; 0x2d
 8003b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b50:	e79e      	b.n	8003a90 <_printf_float+0x88>
 8003b52:	9904      	ldr	r1, [sp, #16]
 8003b54:	2947      	cmp	r1, #71	; 0x47
 8003b56:	d1c1      	bne.n	8003adc <_printf_float+0xd4>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1bf      	bne.n	8003adc <_printf_float+0xd4>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e7bc      	b.n	8003ada <_printf_float+0xd2>
 8003b60:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b64:	d118      	bne.n	8003b98 <_printf_float+0x190>
 8003b66:	2900      	cmp	r1, #0
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	dd0b      	ble.n	8003b84 <_printf_float+0x17c>
 8003b6c:	6121      	str	r1, [r4, #16]
 8003b6e:	b913      	cbnz	r3, 8003b76 <_printf_float+0x16e>
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	07d0      	lsls	r0, r2, #31
 8003b74:	d502      	bpl.n	8003b7c <_printf_float+0x174>
 8003b76:	3301      	adds	r3, #1
 8003b78:	440b      	add	r3, r1
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	e7de      	b.n	8003b42 <_printf_float+0x13a>
 8003b84:	b913      	cbnz	r3, 8003b8c <_printf_float+0x184>
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	07d2      	lsls	r2, r2, #31
 8003b8a:	d501      	bpl.n	8003b90 <_printf_float+0x188>
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	e7f4      	b.n	8003b7a <_printf_float+0x172>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e7f2      	b.n	8003b7a <_printf_float+0x172>
 8003b94:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b98:	9b08      	ldr	r3, [sp, #32]
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	db05      	blt.n	8003baa <_printf_float+0x1a2>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	6121      	str	r1, [r4, #16]
 8003ba2:	07d8      	lsls	r0, r3, #31
 8003ba4:	d5ea      	bpl.n	8003b7c <_printf_float+0x174>
 8003ba6:	1c4b      	adds	r3, r1, #1
 8003ba8:	e7e7      	b.n	8003b7a <_printf_float+0x172>
 8003baa:	2900      	cmp	r1, #0
 8003bac:	bfd4      	ite	le
 8003bae:	f1c1 0202 	rsble	r2, r1, #2
 8003bb2:	2201      	movgt	r2, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	e7e0      	b.n	8003b7a <_printf_float+0x172>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	055a      	lsls	r2, r3, #21
 8003bbc:	d407      	bmi.n	8003bce <_printf_float+0x1c6>
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d12a      	bne.n	8003c22 <_printf_float+0x21a>
 8003bcc:	e76a      	b.n	8003aa4 <_printf_float+0x9c>
 8003bce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bd2:	f240 80e2 	bls.w	8003d9a <_printf_float+0x392>
 8003bd6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003bda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d133      	bne.n	8003c4c <_printf_float+0x244>
 8003be4:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <_printf_float+0x2c0>)
 8003be6:	2301      	movs	r3, #1
 8003be8:	4631      	mov	r1, r6
 8003bea:	4628      	mov	r0, r5
 8003bec:	47b8      	blx	r7
 8003bee:	3001      	adds	r0, #1
 8003bf0:	f43f af58 	beq.w	8003aa4 <_printf_float+0x9c>
 8003bf4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	db02      	blt.n	8003c02 <_printf_float+0x1fa>
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	07d8      	lsls	r0, r3, #31
 8003c00:	d50f      	bpl.n	8003c22 <_printf_float+0x21a>
 8003c02:	4653      	mov	r3, sl
 8003c04:	465a      	mov	r2, fp
 8003c06:	4631      	mov	r1, r6
 8003c08:	4628      	mov	r0, r5
 8003c0a:	47b8      	blx	r7
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f43f af49 	beq.w	8003aa4 <_printf_float+0x9c>
 8003c12:	f04f 0800 	mov.w	r8, #0
 8003c16:	f104 091a 	add.w	r9, r4, #26
 8003c1a:	9b08      	ldr	r3, [sp, #32]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	4543      	cmp	r3, r8
 8003c20:	dc09      	bgt.n	8003c36 <_printf_float+0x22e>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	079b      	lsls	r3, r3, #30
 8003c26:	f100 8108 	bmi.w	8003e3a <_printf_float+0x432>
 8003c2a:	68e0      	ldr	r0, [r4, #12]
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	4298      	cmp	r0, r3
 8003c30:	bfb8      	it	lt
 8003c32:	4618      	movlt	r0, r3
 8003c34:	e738      	b.n	8003aa8 <_printf_float+0xa0>
 8003c36:	2301      	movs	r3, #1
 8003c38:	464a      	mov	r2, r9
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	f43f af2f 	beq.w	8003aa4 <_printf_float+0x9c>
 8003c46:	f108 0801 	add.w	r8, r8, #1
 8003c4a:	e7e6      	b.n	8003c1a <_printf_float+0x212>
 8003c4c:	9b07      	ldr	r3, [sp, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dc3c      	bgt.n	8003ccc <_printf_float+0x2c4>
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <_printf_float+0x2c0>)
 8003c54:	2301      	movs	r3, #1
 8003c56:	4631      	mov	r1, r6
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b8      	blx	r7
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	f43f af21 	beq.w	8003aa4 <_printf_float+0x9c>
 8003c62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d102      	bne.n	8003c70 <_printf_float+0x268>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	07d9      	lsls	r1, r3, #31
 8003c6e:	d5d8      	bpl.n	8003c22 <_printf_float+0x21a>
 8003c70:	4653      	mov	r3, sl
 8003c72:	465a      	mov	r2, fp
 8003c74:	4631      	mov	r1, r6
 8003c76:	4628      	mov	r0, r5
 8003c78:	47b8      	blx	r7
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	f43f af12 	beq.w	8003aa4 <_printf_float+0x9c>
 8003c80:	f04f 0900 	mov.w	r9, #0
 8003c84:	f104 0a1a 	add.w	sl, r4, #26
 8003c88:	9b07      	ldr	r3, [sp, #28]
 8003c8a:	425b      	negs	r3, r3
 8003c8c:	454b      	cmp	r3, r9
 8003c8e:	dc01      	bgt.n	8003c94 <_printf_float+0x28c>
 8003c90:	9b08      	ldr	r3, [sp, #32]
 8003c92:	e795      	b.n	8003bc0 <_printf_float+0x1b8>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4652      	mov	r2, sl
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	47b8      	blx	r7
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	f43f af00 	beq.w	8003aa4 <_printf_float+0x9c>
 8003ca4:	f109 0901 	add.w	r9, r9, #1
 8003ca8:	e7ee      	b.n	8003c88 <_printf_float+0x280>
 8003caa:	bf00      	nop
 8003cac:	f3af 8000 	nop.w
 8003cb0:	ffffffff 	.word	0xffffffff
 8003cb4:	7fefffff 	.word	0x7fefffff
 8003cb8:	080065c0 	.word	0x080065c0
 8003cbc:	080065c4 	.word	0x080065c4
 8003cc0:	080065cc 	.word	0x080065cc
 8003cc4:	080065c8 	.word	0x080065c8
 8003cc8:	080065d0 	.word	0x080065d0
 8003ccc:	9a08      	ldr	r2, [sp, #32]
 8003cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bfa8      	it	ge
 8003cd4:	461a      	movge	r2, r3
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	4691      	mov	r9, r2
 8003cda:	dc38      	bgt.n	8003d4e <_printf_float+0x346>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9305      	str	r3, [sp, #20]
 8003ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ce4:	f104 021a 	add.w	r2, r4, #26
 8003ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cea:	9905      	ldr	r1, [sp, #20]
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	eba3 0309 	sub.w	r3, r3, r9
 8003cf2:	428b      	cmp	r3, r1
 8003cf4:	dc33      	bgt.n	8003d5e <_printf_float+0x356>
 8003cf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	db3c      	blt.n	8003d78 <_printf_float+0x370>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07da      	lsls	r2, r3, #31
 8003d02:	d439      	bmi.n	8003d78 <_printf_float+0x370>
 8003d04:	9b08      	ldr	r3, [sp, #32]
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	9907      	ldr	r1, [sp, #28]
 8003d0a:	1a9a      	subs	r2, r3, r2
 8003d0c:	eba3 0901 	sub.w	r9, r3, r1
 8003d10:	4591      	cmp	r9, r2
 8003d12:	bfa8      	it	ge
 8003d14:	4691      	movge	r9, r2
 8003d16:	f1b9 0f00 	cmp.w	r9, #0
 8003d1a:	dc35      	bgt.n	8003d88 <_printf_float+0x380>
 8003d1c:	f04f 0800 	mov.w	r8, #0
 8003d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d24:	f104 0a1a 	add.w	sl, r4, #26
 8003d28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	eba3 0309 	sub.w	r3, r3, r9
 8003d32:	4543      	cmp	r3, r8
 8003d34:	f77f af75 	ble.w	8003c22 <_printf_float+0x21a>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4652      	mov	r2, sl
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	f43f aeae 	beq.w	8003aa4 <_printf_float+0x9c>
 8003d48:	f108 0801 	add.w	r8, r8, #1
 8003d4c:	e7ec      	b.n	8003d28 <_printf_float+0x320>
 8003d4e:	4613      	mov	r3, r2
 8003d50:	4631      	mov	r1, r6
 8003d52:	4642      	mov	r2, r8
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d1bf      	bne.n	8003cdc <_printf_float+0x2d4>
 8003d5c:	e6a2      	b.n	8003aa4 <_printf_float+0x9c>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4631      	mov	r1, r6
 8003d62:	4628      	mov	r0, r5
 8003d64:	9204      	str	r2, [sp, #16]
 8003d66:	47b8      	blx	r7
 8003d68:	3001      	adds	r0, #1
 8003d6a:	f43f ae9b 	beq.w	8003aa4 <_printf_float+0x9c>
 8003d6e:	9b05      	ldr	r3, [sp, #20]
 8003d70:	9a04      	ldr	r2, [sp, #16]
 8003d72:	3301      	adds	r3, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	e7b7      	b.n	8003ce8 <_printf_float+0x2e0>
 8003d78:	4653      	mov	r3, sl
 8003d7a:	465a      	mov	r2, fp
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	4628      	mov	r0, r5
 8003d80:	47b8      	blx	r7
 8003d82:	3001      	adds	r0, #1
 8003d84:	d1be      	bne.n	8003d04 <_printf_float+0x2fc>
 8003d86:	e68d      	b.n	8003aa4 <_printf_float+0x9c>
 8003d88:	9a04      	ldr	r2, [sp, #16]
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	4442      	add	r2, r8
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	47b8      	blx	r7
 8003d94:	3001      	adds	r0, #1
 8003d96:	d1c1      	bne.n	8003d1c <_printf_float+0x314>
 8003d98:	e684      	b.n	8003aa4 <_printf_float+0x9c>
 8003d9a:	9a08      	ldr	r2, [sp, #32]
 8003d9c:	2a01      	cmp	r2, #1
 8003d9e:	dc01      	bgt.n	8003da4 <_printf_float+0x39c>
 8003da0:	07db      	lsls	r3, r3, #31
 8003da2:	d537      	bpl.n	8003e14 <_printf_float+0x40c>
 8003da4:	2301      	movs	r3, #1
 8003da6:	4642      	mov	r2, r8
 8003da8:	4631      	mov	r1, r6
 8003daa:	4628      	mov	r0, r5
 8003dac:	47b8      	blx	r7
 8003dae:	3001      	adds	r0, #1
 8003db0:	f43f ae78 	beq.w	8003aa4 <_printf_float+0x9c>
 8003db4:	4653      	mov	r3, sl
 8003db6:	465a      	mov	r2, fp
 8003db8:	4631      	mov	r1, r6
 8003dba:	4628      	mov	r0, r5
 8003dbc:	47b8      	blx	r7
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	f43f ae70 	beq.w	8003aa4 <_printf_float+0x9c>
 8003dc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003dc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d01b      	beq.n	8003e0a <_printf_float+0x402>
 8003dd2:	9b08      	ldr	r3, [sp, #32]
 8003dd4:	f108 0201 	add.w	r2, r8, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4631      	mov	r1, r6
 8003ddc:	4628      	mov	r0, r5
 8003dde:	47b8      	blx	r7
 8003de0:	3001      	adds	r0, #1
 8003de2:	d10e      	bne.n	8003e02 <_printf_float+0x3fa>
 8003de4:	e65e      	b.n	8003aa4 <_printf_float+0x9c>
 8003de6:	2301      	movs	r3, #1
 8003de8:	464a      	mov	r2, r9
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	f43f ae57 	beq.w	8003aa4 <_printf_float+0x9c>
 8003df6:	f108 0801 	add.w	r8, r8, #1
 8003dfa:	9b08      	ldr	r3, [sp, #32]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4543      	cmp	r3, r8
 8003e00:	dcf1      	bgt.n	8003de6 <_printf_float+0x3de>
 8003e02:	9b04      	ldr	r3, [sp, #16]
 8003e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e08:	e6db      	b.n	8003bc2 <_printf_float+0x1ba>
 8003e0a:	f04f 0800 	mov.w	r8, #0
 8003e0e:	f104 091a 	add.w	r9, r4, #26
 8003e12:	e7f2      	b.n	8003dfa <_printf_float+0x3f2>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4642      	mov	r2, r8
 8003e18:	e7df      	b.n	8003dda <_printf_float+0x3d2>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	464a      	mov	r2, r9
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	f43f ae3d 	beq.w	8003aa4 <_printf_float+0x9c>
 8003e2a:	f108 0801 	add.w	r8, r8, #1
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e32:	1a5b      	subs	r3, r3, r1
 8003e34:	4543      	cmp	r3, r8
 8003e36:	dcf0      	bgt.n	8003e1a <_printf_float+0x412>
 8003e38:	e6f7      	b.n	8003c2a <_printf_float+0x222>
 8003e3a:	f04f 0800 	mov.w	r8, #0
 8003e3e:	f104 0919 	add.w	r9, r4, #25
 8003e42:	e7f4      	b.n	8003e2e <_printf_float+0x426>

08003e44 <_printf_common>:
 8003e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e48:	4616      	mov	r6, r2
 8003e4a:	4699      	mov	r9, r3
 8003e4c:	688a      	ldr	r2, [r1, #8]
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bfb8      	it	lt
 8003e58:	4613      	movlt	r3, r2
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e60:	4607      	mov	r7, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	b10a      	cbz	r2, 8003e6a <_printf_common+0x26>
 8003e66:	3301      	adds	r3, #1
 8003e68:	6033      	str	r3, [r6, #0]
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	0699      	lsls	r1, r3, #26
 8003e6e:	bf42      	ittt	mi
 8003e70:	6833      	ldrmi	r3, [r6, #0]
 8003e72:	3302      	addmi	r3, #2
 8003e74:	6033      	strmi	r3, [r6, #0]
 8003e76:	6825      	ldr	r5, [r4, #0]
 8003e78:	f015 0506 	ands.w	r5, r5, #6
 8003e7c:	d106      	bne.n	8003e8c <_printf_common+0x48>
 8003e7e:	f104 0a19 	add.w	sl, r4, #25
 8003e82:	68e3      	ldr	r3, [r4, #12]
 8003e84:	6832      	ldr	r2, [r6, #0]
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	dc26      	bgt.n	8003eda <_printf_common+0x96>
 8003e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e90:	1e13      	subs	r3, r2, #0
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	bf18      	it	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	0692      	lsls	r2, r2, #26
 8003e9a:	d42b      	bmi.n	8003ef4 <_printf_common+0xb0>
 8003e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	47c0      	blx	r8
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d01e      	beq.n	8003ee8 <_printf_common+0xa4>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	68e5      	ldr	r5, [r4, #12]
 8003eae:	6832      	ldr	r2, [r6, #0]
 8003eb0:	f003 0306 	and.w	r3, r3, #6
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	bf08      	it	eq
 8003eb8:	1aad      	subeq	r5, r5, r2
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	bf0c      	ite	eq
 8003ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec4:	2500      	movne	r5, #0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bfc4      	itt	gt
 8003eca:	1a9b      	subgt	r3, r3, r2
 8003ecc:	18ed      	addgt	r5, r5, r3
 8003ece:	2600      	movs	r6, #0
 8003ed0:	341a      	adds	r4, #26
 8003ed2:	42b5      	cmp	r5, r6
 8003ed4:	d11a      	bne.n	8003f0c <_printf_common+0xc8>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e008      	b.n	8003eec <_printf_common+0xa8>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4652      	mov	r2, sl
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	47c0      	blx	r8
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d103      	bne.n	8003ef0 <_printf_common+0xac>
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	e7c6      	b.n	8003e82 <_printf_common+0x3e>
 8003ef4:	18e1      	adds	r1, r4, r3
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	2030      	movs	r0, #48	; 0x30
 8003efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003efe:	4422      	add	r2, r4
 8003f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f08:	3302      	adds	r3, #2
 8003f0a:	e7c7      	b.n	8003e9c <_printf_common+0x58>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	4622      	mov	r2, r4
 8003f10:	4649      	mov	r1, r9
 8003f12:	4638      	mov	r0, r7
 8003f14:	47c0      	blx	r8
 8003f16:	3001      	adds	r0, #1
 8003f18:	d0e6      	beq.n	8003ee8 <_printf_common+0xa4>
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7d9      	b.n	8003ed2 <_printf_common+0x8e>
	...

08003f20 <_printf_i>:
 8003f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	7e0f      	ldrb	r7, [r1, #24]
 8003f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f28:	2f78      	cmp	r7, #120	; 0x78
 8003f2a:	4691      	mov	r9, r2
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	469a      	mov	sl, r3
 8003f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f36:	d807      	bhi.n	8003f48 <_printf_i+0x28>
 8003f38:	2f62      	cmp	r7, #98	; 0x62
 8003f3a:	d80a      	bhi.n	8003f52 <_printf_i+0x32>
 8003f3c:	2f00      	cmp	r7, #0
 8003f3e:	f000 80d8 	beq.w	80040f2 <_printf_i+0x1d2>
 8003f42:	2f58      	cmp	r7, #88	; 0x58
 8003f44:	f000 80a3 	beq.w	800408e <_printf_i+0x16e>
 8003f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f50:	e03a      	b.n	8003fc8 <_printf_i+0xa8>
 8003f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f56:	2b15      	cmp	r3, #21
 8003f58:	d8f6      	bhi.n	8003f48 <_printf_i+0x28>
 8003f5a:	a101      	add	r1, pc, #4	; (adr r1, 8003f60 <_printf_i+0x40>)
 8003f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fcd 	.word	0x08003fcd
 8003f68:	08003f49 	.word	0x08003f49
 8003f6c:	08003f49 	.word	0x08003f49
 8003f70:	08003f49 	.word	0x08003f49
 8003f74:	08003f49 	.word	0x08003f49
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003f49 	.word	0x08003f49
 8003f80:	08003f49 	.word	0x08003f49
 8003f84:	08003f49 	.word	0x08003f49
 8003f88:	08003f49 	.word	0x08003f49
 8003f8c:	080040d9 	.word	0x080040d9
 8003f90:	08003ffd 	.word	0x08003ffd
 8003f94:	080040bb 	.word	0x080040bb
 8003f98:	08003f49 	.word	0x08003f49
 8003f9c:	08003f49 	.word	0x08003f49
 8003fa0:	080040fb 	.word	0x080040fb
 8003fa4:	08003f49 	.word	0x08003f49
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f49 	.word	0x08003f49
 8003fb0:	08003f49 	.word	0x08003f49
 8003fb4:	080040c3 	.word	0x080040c3
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	1d1a      	adds	r2, r3, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	602a      	str	r2, [r5, #0]
 8003fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0a3      	b.n	8004114 <_printf_i+0x1f4>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	6829      	ldr	r1, [r5, #0]
 8003fd0:	0606      	lsls	r6, r0, #24
 8003fd2:	f101 0304 	add.w	r3, r1, #4
 8003fd6:	d50a      	bpl.n	8003fee <_printf_i+0xce>
 8003fd8:	680e      	ldr	r6, [r1, #0]
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	da03      	bge.n	8003fe8 <_printf_i+0xc8>
 8003fe0:	232d      	movs	r3, #45	; 0x2d
 8003fe2:	4276      	negs	r6, r6
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe8:	485e      	ldr	r0, [pc, #376]	; (8004164 <_printf_i+0x244>)
 8003fea:	230a      	movs	r3, #10
 8003fec:	e019      	b.n	8004022 <_printf_i+0x102>
 8003fee:	680e      	ldr	r6, [r1, #0]
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ff6:	bf18      	it	ne
 8003ff8:	b236      	sxthne	r6, r6
 8003ffa:	e7ef      	b.n	8003fdc <_printf_i+0xbc>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	1d19      	adds	r1, r3, #4
 8004002:	6029      	str	r1, [r5, #0]
 8004004:	0601      	lsls	r1, r0, #24
 8004006:	d501      	bpl.n	800400c <_printf_i+0xec>
 8004008:	681e      	ldr	r6, [r3, #0]
 800400a:	e002      	b.n	8004012 <_printf_i+0xf2>
 800400c:	0646      	lsls	r6, r0, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0xe8>
 8004010:	881e      	ldrh	r6, [r3, #0]
 8004012:	4854      	ldr	r0, [pc, #336]	; (8004164 <_printf_i+0x244>)
 8004014:	2f6f      	cmp	r7, #111	; 0x6f
 8004016:	bf0c      	ite	eq
 8004018:	2308      	moveq	r3, #8
 800401a:	230a      	movne	r3, #10
 800401c:	2100      	movs	r1, #0
 800401e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004022:	6865      	ldr	r5, [r4, #4]
 8004024:	60a5      	str	r5, [r4, #8]
 8004026:	2d00      	cmp	r5, #0
 8004028:	bfa2      	ittt	ge
 800402a:	6821      	ldrge	r1, [r4, #0]
 800402c:	f021 0104 	bicge.w	r1, r1, #4
 8004030:	6021      	strge	r1, [r4, #0]
 8004032:	b90e      	cbnz	r6, 8004038 <_printf_i+0x118>
 8004034:	2d00      	cmp	r5, #0
 8004036:	d04d      	beq.n	80040d4 <_printf_i+0x1b4>
 8004038:	4615      	mov	r5, r2
 800403a:	fbb6 f1f3 	udiv	r1, r6, r3
 800403e:	fb03 6711 	mls	r7, r3, r1, r6
 8004042:	5dc7      	ldrb	r7, [r0, r7]
 8004044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004048:	4637      	mov	r7, r6
 800404a:	42bb      	cmp	r3, r7
 800404c:	460e      	mov	r6, r1
 800404e:	d9f4      	bls.n	800403a <_printf_i+0x11a>
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10b      	bne.n	800406c <_printf_i+0x14c>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	07de      	lsls	r6, r3, #31
 8004058:	d508      	bpl.n	800406c <_printf_i+0x14c>
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	6861      	ldr	r1, [r4, #4]
 800405e:	4299      	cmp	r1, r3
 8004060:	bfde      	ittt	le
 8004062:	2330      	movle	r3, #48	; 0x30
 8004064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800406c:	1b52      	subs	r2, r2, r5
 800406e:	6122      	str	r2, [r4, #16]
 8004070:	f8cd a000 	str.w	sl, [sp]
 8004074:	464b      	mov	r3, r9
 8004076:	aa03      	add	r2, sp, #12
 8004078:	4621      	mov	r1, r4
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff fee2 	bl	8003e44 <_printf_common>
 8004080:	3001      	adds	r0, #1
 8004082:	d14c      	bne.n	800411e <_printf_i+0x1fe>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	b004      	add	sp, #16
 800408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408e:	4835      	ldr	r0, [pc, #212]	; (8004164 <_printf_i+0x244>)
 8004090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004094:	6829      	ldr	r1, [r5, #0]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	f851 6b04 	ldr.w	r6, [r1], #4
 800409c:	6029      	str	r1, [r5, #0]
 800409e:	061d      	lsls	r5, r3, #24
 80040a0:	d514      	bpl.n	80040cc <_printf_i+0x1ac>
 80040a2:	07df      	lsls	r7, r3, #31
 80040a4:	bf44      	itt	mi
 80040a6:	f043 0320 	orrmi.w	r3, r3, #32
 80040aa:	6023      	strmi	r3, [r4, #0]
 80040ac:	b91e      	cbnz	r6, 80040b6 <_printf_i+0x196>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f023 0320 	bic.w	r3, r3, #32
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	2310      	movs	r3, #16
 80040b8:	e7b0      	b.n	800401c <_printf_i+0xfc>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	2378      	movs	r3, #120	; 0x78
 80040c4:	4828      	ldr	r0, [pc, #160]	; (8004168 <_printf_i+0x248>)
 80040c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ca:	e7e3      	b.n	8004094 <_printf_i+0x174>
 80040cc:	0659      	lsls	r1, r3, #25
 80040ce:	bf48      	it	mi
 80040d0:	b2b6      	uxthmi	r6, r6
 80040d2:	e7e6      	b.n	80040a2 <_printf_i+0x182>
 80040d4:	4615      	mov	r5, r2
 80040d6:	e7bb      	b.n	8004050 <_printf_i+0x130>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	6826      	ldr	r6, [r4, #0]
 80040dc:	6961      	ldr	r1, [r4, #20]
 80040de:	1d18      	adds	r0, r3, #4
 80040e0:	6028      	str	r0, [r5, #0]
 80040e2:	0635      	lsls	r5, r6, #24
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0x1cc>
 80040e8:	6019      	str	r1, [r3, #0]
 80040ea:	e002      	b.n	80040f2 <_printf_i+0x1d2>
 80040ec:	0670      	lsls	r0, r6, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0x1c8>
 80040f0:	8019      	strh	r1, [r3, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	4615      	mov	r5, r2
 80040f8:	e7ba      	b.n	8004070 <_printf_i+0x150>
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	1d1a      	adds	r2, r3, #4
 80040fe:	602a      	str	r2, [r5, #0]
 8004100:	681d      	ldr	r5, [r3, #0]
 8004102:	6862      	ldr	r2, [r4, #4]
 8004104:	2100      	movs	r1, #0
 8004106:	4628      	mov	r0, r5
 8004108:	f7fc f8a2 	bl	8000250 <memchr>
 800410c:	b108      	cbz	r0, 8004112 <_printf_i+0x1f2>
 800410e:	1b40      	subs	r0, r0, r5
 8004110:	6060      	str	r0, [r4, #4]
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	2300      	movs	r3, #0
 8004118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411c:	e7a8      	b.n	8004070 <_printf_i+0x150>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	462a      	mov	r2, r5
 8004122:	4649      	mov	r1, r9
 8004124:	4640      	mov	r0, r8
 8004126:	47d0      	blx	sl
 8004128:	3001      	adds	r0, #1
 800412a:	d0ab      	beq.n	8004084 <_printf_i+0x164>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	079b      	lsls	r3, r3, #30
 8004130:	d413      	bmi.n	800415a <_printf_i+0x23a>
 8004132:	68e0      	ldr	r0, [r4, #12]
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	4298      	cmp	r0, r3
 8004138:	bfb8      	it	lt
 800413a:	4618      	movlt	r0, r3
 800413c:	e7a4      	b.n	8004088 <_printf_i+0x168>
 800413e:	2301      	movs	r3, #1
 8004140:	4632      	mov	r2, r6
 8004142:	4649      	mov	r1, r9
 8004144:	4640      	mov	r0, r8
 8004146:	47d0      	blx	sl
 8004148:	3001      	adds	r0, #1
 800414a:	d09b      	beq.n	8004084 <_printf_i+0x164>
 800414c:	3501      	adds	r5, #1
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	9903      	ldr	r1, [sp, #12]
 8004152:	1a5b      	subs	r3, r3, r1
 8004154:	42ab      	cmp	r3, r5
 8004156:	dcf2      	bgt.n	800413e <_printf_i+0x21e>
 8004158:	e7eb      	b.n	8004132 <_printf_i+0x212>
 800415a:	2500      	movs	r5, #0
 800415c:	f104 0619 	add.w	r6, r4, #25
 8004160:	e7f5      	b.n	800414e <_printf_i+0x22e>
 8004162:	bf00      	nop
 8004164:	080065d2 	.word	0x080065d2
 8004168:	080065e3 	.word	0x080065e3

0800416c <siprintf>:
 800416c:	b40e      	push	{r1, r2, r3}
 800416e:	b500      	push	{lr}
 8004170:	b09c      	sub	sp, #112	; 0x70
 8004172:	ab1d      	add	r3, sp, #116	; 0x74
 8004174:	9002      	str	r0, [sp, #8]
 8004176:	9006      	str	r0, [sp, #24]
 8004178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800417c:	4809      	ldr	r0, [pc, #36]	; (80041a4 <siprintf+0x38>)
 800417e:	9107      	str	r1, [sp, #28]
 8004180:	9104      	str	r1, [sp, #16]
 8004182:	4909      	ldr	r1, [pc, #36]	; (80041a8 <siprintf+0x3c>)
 8004184:	f853 2b04 	ldr.w	r2, [r3], #4
 8004188:	9105      	str	r1, [sp, #20]
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	a902      	add	r1, sp, #8
 8004190:	f001 faf8 	bl	8005784 <_svfiprintf_r>
 8004194:	9b02      	ldr	r3, [sp, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	b01c      	add	sp, #112	; 0x70
 800419c:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a0:	b003      	add	sp, #12
 80041a2:	4770      	bx	lr
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	ffff0208 	.word	0xffff0208

080041ac <quorem>:
 80041ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	6903      	ldr	r3, [r0, #16]
 80041b2:	690c      	ldr	r4, [r1, #16]
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	4607      	mov	r7, r0
 80041b8:	f2c0 8081 	blt.w	80042be <quorem+0x112>
 80041bc:	3c01      	subs	r4, #1
 80041be:	f101 0814 	add.w	r8, r1, #20
 80041c2:	f100 0514 	add.w	r5, r0, #20
 80041c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041d4:	3301      	adds	r3, #1
 80041d6:	429a      	cmp	r2, r3
 80041d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80041dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80041e4:	d331      	bcc.n	800424a <quorem+0x9e>
 80041e6:	f04f 0e00 	mov.w	lr, #0
 80041ea:	4640      	mov	r0, r8
 80041ec:	46ac      	mov	ip, r5
 80041ee:	46f2      	mov	sl, lr
 80041f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80041f4:	b293      	uxth	r3, r2
 80041f6:	fb06 e303 	mla	r3, r6, r3, lr
 80041fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80041fe:	b29b      	uxth	r3, r3
 8004200:	ebaa 0303 	sub.w	r3, sl, r3
 8004204:	f8dc a000 	ldr.w	sl, [ip]
 8004208:	0c12      	lsrs	r2, r2, #16
 800420a:	fa13 f38a 	uxtah	r3, r3, sl
 800420e:	fb06 e202 	mla	r2, r6, r2, lr
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	9b00      	ldr	r3, [sp, #0]
 8004216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800421a:	b292      	uxth	r2, r2
 800421c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004224:	f8bd 3000 	ldrh.w	r3, [sp]
 8004228:	4581      	cmp	r9, r0
 800422a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800422e:	f84c 3b04 	str.w	r3, [ip], #4
 8004232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004236:	d2db      	bcs.n	80041f0 <quorem+0x44>
 8004238:	f855 300b 	ldr.w	r3, [r5, fp]
 800423c:	b92b      	cbnz	r3, 800424a <quorem+0x9e>
 800423e:	9b01      	ldr	r3, [sp, #4]
 8004240:	3b04      	subs	r3, #4
 8004242:	429d      	cmp	r5, r3
 8004244:	461a      	mov	r2, r3
 8004246:	d32e      	bcc.n	80042a6 <quorem+0xfa>
 8004248:	613c      	str	r4, [r7, #16]
 800424a:	4638      	mov	r0, r7
 800424c:	f001 f846 	bl	80052dc <__mcmp>
 8004250:	2800      	cmp	r0, #0
 8004252:	db24      	blt.n	800429e <quorem+0xf2>
 8004254:	3601      	adds	r6, #1
 8004256:	4628      	mov	r0, r5
 8004258:	f04f 0c00 	mov.w	ip, #0
 800425c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004260:	f8d0 e000 	ldr.w	lr, [r0]
 8004264:	b293      	uxth	r3, r2
 8004266:	ebac 0303 	sub.w	r3, ip, r3
 800426a:	0c12      	lsrs	r2, r2, #16
 800426c:	fa13 f38e 	uxtah	r3, r3, lr
 8004270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004278:	b29b      	uxth	r3, r3
 800427a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800427e:	45c1      	cmp	r9, r8
 8004280:	f840 3b04 	str.w	r3, [r0], #4
 8004284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004288:	d2e8      	bcs.n	800425c <quorem+0xb0>
 800428a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800428e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004292:	b922      	cbnz	r2, 800429e <quorem+0xf2>
 8004294:	3b04      	subs	r3, #4
 8004296:	429d      	cmp	r5, r3
 8004298:	461a      	mov	r2, r3
 800429a:	d30a      	bcc.n	80042b2 <quorem+0x106>
 800429c:	613c      	str	r4, [r7, #16]
 800429e:	4630      	mov	r0, r6
 80042a0:	b003      	add	sp, #12
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	3b04      	subs	r3, #4
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d1cc      	bne.n	8004248 <quorem+0x9c>
 80042ae:	3c01      	subs	r4, #1
 80042b0:	e7c7      	b.n	8004242 <quorem+0x96>
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	3b04      	subs	r3, #4
 80042b6:	2a00      	cmp	r2, #0
 80042b8:	d1f0      	bne.n	800429c <quorem+0xf0>
 80042ba:	3c01      	subs	r4, #1
 80042bc:	e7eb      	b.n	8004296 <quorem+0xea>
 80042be:	2000      	movs	r0, #0
 80042c0:	e7ee      	b.n	80042a0 <quorem+0xf4>
 80042c2:	0000      	movs	r0, r0
 80042c4:	0000      	movs	r0, r0
	...

080042c8 <_dtoa_r>:
 80042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042cc:	ed2d 8b02 	vpush	{d8}
 80042d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042d2:	b091      	sub	sp, #68	; 0x44
 80042d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80042d8:	ec59 8b10 	vmov	r8, r9, d0
 80042dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80042de:	9106      	str	r1, [sp, #24]
 80042e0:	4606      	mov	r6, r0
 80042e2:	9208      	str	r2, [sp, #32]
 80042e4:	930c      	str	r3, [sp, #48]	; 0x30
 80042e6:	b975      	cbnz	r5, 8004306 <_dtoa_r+0x3e>
 80042e8:	2010      	movs	r0, #16
 80042ea:	f000 fd5f 	bl	8004dac <malloc>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6270      	str	r0, [r6, #36]	; 0x24
 80042f2:	b920      	cbnz	r0, 80042fe <_dtoa_r+0x36>
 80042f4:	4baa      	ldr	r3, [pc, #680]	; (80045a0 <_dtoa_r+0x2d8>)
 80042f6:	21ea      	movs	r1, #234	; 0xea
 80042f8:	48aa      	ldr	r0, [pc, #680]	; (80045a4 <_dtoa_r+0x2dc>)
 80042fa:	f001 fb53 	bl	80059a4 <__assert_func>
 80042fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004302:	6005      	str	r5, [r0, #0]
 8004304:	60c5      	str	r5, [r0, #12]
 8004306:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	b151      	cbz	r1, 8004322 <_dtoa_r+0x5a>
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	604a      	str	r2, [r1, #4]
 8004310:	2301      	movs	r3, #1
 8004312:	4093      	lsls	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
 8004316:	4630      	mov	r0, r6
 8004318:	f000 fd9e 	bl	8004e58 <_Bfree>
 800431c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f1b9 0300 	subs.w	r3, r9, #0
 8004326:	bfbb      	ittet	lt
 8004328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800432c:	9303      	strlt	r3, [sp, #12]
 800432e:	2300      	movge	r3, #0
 8004330:	2201      	movlt	r2, #1
 8004332:	bfac      	ite	ge
 8004334:	6023      	strge	r3, [r4, #0]
 8004336:	6022      	strlt	r2, [r4, #0]
 8004338:	4b9b      	ldr	r3, [pc, #620]	; (80045a8 <_dtoa_r+0x2e0>)
 800433a:	9c03      	ldr	r4, [sp, #12]
 800433c:	43a3      	bics	r3, r4
 800433e:	d11c      	bne.n	800437a <_dtoa_r+0xb2>
 8004340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004342:	f242 730f 	movw	r3, #9999	; 0x270f
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800434c:	ea53 0308 	orrs.w	r3, r3, r8
 8004350:	f000 84fd 	beq.w	8004d4e <_dtoa_r+0xa86>
 8004354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004356:	b963      	cbnz	r3, 8004372 <_dtoa_r+0xaa>
 8004358:	4b94      	ldr	r3, [pc, #592]	; (80045ac <_dtoa_r+0x2e4>)
 800435a:	e01f      	b.n	800439c <_dtoa_r+0xd4>
 800435c:	4b94      	ldr	r3, [pc, #592]	; (80045b0 <_dtoa_r+0x2e8>)
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	3308      	adds	r3, #8
 8004362:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	9801      	ldr	r0, [sp, #4]
 8004368:	b011      	add	sp, #68	; 0x44
 800436a:	ecbd 8b02 	vpop	{d8}
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <_dtoa_r+0x2e4>)
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	3303      	adds	r3, #3
 8004378:	e7f3      	b.n	8004362 <_dtoa_r+0x9a>
 800437a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800437e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004386:	d10b      	bne.n	80043a0 <_dtoa_r+0xd8>
 8004388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800438a:	2301      	movs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 84d9 	beq.w	8004d48 <_dtoa_r+0xa80>
 8004396:	4887      	ldr	r0, [pc, #540]	; (80045b4 <_dtoa_r+0x2ec>)
 8004398:	6018      	str	r0, [r3, #0]
 800439a:	1e43      	subs	r3, r0, #1
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	e7e2      	b.n	8004366 <_dtoa_r+0x9e>
 80043a0:	a90f      	add	r1, sp, #60	; 0x3c
 80043a2:	aa0e      	add	r2, sp, #56	; 0x38
 80043a4:	4630      	mov	r0, r6
 80043a6:	eeb0 0b48 	vmov.f64	d0, d8
 80043aa:	f001 f83d 	bl	8005428 <__d2b>
 80043ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80043b2:	4605      	mov	r5, r0
 80043b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d046      	beq.n	8004448 <_dtoa_r+0x180>
 80043ba:	ee18 4a90 	vmov	r4, s17
 80043be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80043c2:	ec53 2b18 	vmov	r2, r3, d8
 80043c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80043ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80043ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80043d2:	2400      	movs	r4, #0
 80043d4:	ec43 2b16 	vmov	d6, r2, r3
 80043d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80043dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004588 <_dtoa_r+0x2c0>
 80043e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80043e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004590 <_dtoa_r+0x2c8>
 80043e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80043ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004598 <_dtoa_r+0x2d0>
 80043f0:	ee07 1a90 	vmov	s15, r1
 80043f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80043f8:	eeb0 7b46 	vmov.f64	d7, d6
 80043fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004400:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004404:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	ee16 ba90 	vmov	fp, s13
 8004410:	940a      	str	r4, [sp, #40]	; 0x28
 8004412:	d508      	bpl.n	8004426 <_dtoa_r+0x15e>
 8004414:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004418:	eeb4 6b47 	vcmp.f64	d6, d7
 800441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004420:	bf18      	it	ne
 8004422:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004426:	f1bb 0f16 	cmp.w	fp, #22
 800442a:	d82f      	bhi.n	800448c <_dtoa_r+0x1c4>
 800442c:	4b62      	ldr	r3, [pc, #392]	; (80045b8 <_dtoa_r+0x2f0>)
 800442e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004432:	ed93 7b00 	vldr	d7, [r3]
 8004436:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	d501      	bpl.n	8004444 <_dtoa_r+0x17c>
 8004440:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004444:	2300      	movs	r3, #0
 8004446:	e022      	b.n	800448e <_dtoa_r+0x1c6>
 8004448:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800444a:	4401      	add	r1, r0
 800444c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8004450:	2b20      	cmp	r3, #32
 8004452:	bfc1      	itttt	gt
 8004454:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004458:	fa04 f303 	lslgt.w	r3, r4, r3
 800445c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004460:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004464:	bfd6      	itet	le
 8004466:	f1c3 0320 	rsble	r3, r3, #32
 800446a:	ea43 0808 	orrgt.w	r8, r3, r8
 800446e:	fa08 f803 	lslle.w	r8, r8, r3
 8004472:	ee07 8a90 	vmov	s15, r8
 8004476:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800447a:	3901      	subs	r1, #1
 800447c:	ee17 4a90 	vmov	r4, s15
 8004480:	ec53 2b17 	vmov	r2, r3, d7
 8004484:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004488:	2401      	movs	r4, #1
 800448a:	e7a3      	b.n	80043d4 <_dtoa_r+0x10c>
 800448c:	2301      	movs	r3, #1
 800448e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004490:	1a43      	subs	r3, r0, r1
 8004492:	1e5a      	subs	r2, r3, #1
 8004494:	bf45      	ittet	mi
 8004496:	f1c3 0301 	rsbmi	r3, r3, #1
 800449a:	9304      	strmi	r3, [sp, #16]
 800449c:	2300      	movpl	r3, #0
 800449e:	2300      	movmi	r3, #0
 80044a0:	9205      	str	r2, [sp, #20]
 80044a2:	bf54      	ite	pl
 80044a4:	9304      	strpl	r3, [sp, #16]
 80044a6:	9305      	strmi	r3, [sp, #20]
 80044a8:	f1bb 0f00 	cmp.w	fp, #0
 80044ac:	db18      	blt.n	80044e0 <_dtoa_r+0x218>
 80044ae:	9b05      	ldr	r3, [sp, #20]
 80044b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80044b4:	445b      	add	r3, fp
 80044b6:	9305      	str	r3, [sp, #20]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9a06      	ldr	r2, [sp, #24]
 80044bc:	2a09      	cmp	r2, #9
 80044be:	d849      	bhi.n	8004554 <_dtoa_r+0x28c>
 80044c0:	2a05      	cmp	r2, #5
 80044c2:	bfc4      	itt	gt
 80044c4:	3a04      	subgt	r2, #4
 80044c6:	9206      	strgt	r2, [sp, #24]
 80044c8:	9a06      	ldr	r2, [sp, #24]
 80044ca:	f1a2 0202 	sub.w	r2, r2, #2
 80044ce:	bfcc      	ite	gt
 80044d0:	2400      	movgt	r4, #0
 80044d2:	2401      	movle	r4, #1
 80044d4:	2a03      	cmp	r2, #3
 80044d6:	d848      	bhi.n	800456a <_dtoa_r+0x2a2>
 80044d8:	e8df f002 	tbb	[pc, r2]
 80044dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80044e0:	9b04      	ldr	r3, [sp, #16]
 80044e2:	2200      	movs	r2, #0
 80044e4:	eba3 030b 	sub.w	r3, r3, fp
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	9209      	str	r2, [sp, #36]	; 0x24
 80044ec:	f1cb 0300 	rsb	r3, fp, #0
 80044f0:	e7e3      	b.n	80044ba <_dtoa_r+0x1f2>
 80044f2:	2200      	movs	r2, #0
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	9a08      	ldr	r2, [sp, #32]
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	dc39      	bgt.n	8004570 <_dtoa_r+0x2a8>
 80044fc:	f04f 0a01 	mov.w	sl, #1
 8004500:	46d1      	mov	r9, sl
 8004502:	4652      	mov	r2, sl
 8004504:	f8cd a020 	str.w	sl, [sp, #32]
 8004508:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800450a:	2100      	movs	r1, #0
 800450c:	6079      	str	r1, [r7, #4]
 800450e:	2004      	movs	r0, #4
 8004510:	f100 0c14 	add.w	ip, r0, #20
 8004514:	4594      	cmp	ip, r2
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	d92f      	bls.n	800457a <_dtoa_r+0x2b2>
 800451a:	4630      	mov	r0, r6
 800451c:	930d      	str	r3, [sp, #52]	; 0x34
 800451e:	f000 fc5b 	bl	8004dd8 <_Balloc>
 8004522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004524:	9001      	str	r0, [sp, #4]
 8004526:	4602      	mov	r2, r0
 8004528:	2800      	cmp	r0, #0
 800452a:	d149      	bne.n	80045c0 <_dtoa_r+0x2f8>
 800452c:	4b23      	ldr	r3, [pc, #140]	; (80045bc <_dtoa_r+0x2f4>)
 800452e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004532:	e6e1      	b.n	80042f8 <_dtoa_r+0x30>
 8004534:	2201      	movs	r2, #1
 8004536:	e7dd      	b.n	80044f4 <_dtoa_r+0x22c>
 8004538:	2200      	movs	r2, #0
 800453a:	9207      	str	r2, [sp, #28]
 800453c:	9a08      	ldr	r2, [sp, #32]
 800453e:	eb0b 0a02 	add.w	sl, fp, r2
 8004542:	f10a 0901 	add.w	r9, sl, #1
 8004546:	464a      	mov	r2, r9
 8004548:	2a01      	cmp	r2, #1
 800454a:	bfb8      	it	lt
 800454c:	2201      	movlt	r2, #1
 800454e:	e7db      	b.n	8004508 <_dtoa_r+0x240>
 8004550:	2201      	movs	r2, #1
 8004552:	e7f2      	b.n	800453a <_dtoa_r+0x272>
 8004554:	2401      	movs	r4, #1
 8004556:	2200      	movs	r2, #0
 8004558:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800455c:	f04f 3aff 	mov.w	sl, #4294967295
 8004560:	2100      	movs	r1, #0
 8004562:	46d1      	mov	r9, sl
 8004564:	2212      	movs	r2, #18
 8004566:	9108      	str	r1, [sp, #32]
 8004568:	e7ce      	b.n	8004508 <_dtoa_r+0x240>
 800456a:	2201      	movs	r2, #1
 800456c:	9207      	str	r2, [sp, #28]
 800456e:	e7f5      	b.n	800455c <_dtoa_r+0x294>
 8004570:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004574:	46d1      	mov	r9, sl
 8004576:	4652      	mov	r2, sl
 8004578:	e7c6      	b.n	8004508 <_dtoa_r+0x240>
 800457a:	3101      	adds	r1, #1
 800457c:	6079      	str	r1, [r7, #4]
 800457e:	0040      	lsls	r0, r0, #1
 8004580:	e7c6      	b.n	8004510 <_dtoa_r+0x248>
 8004582:	bf00      	nop
 8004584:	f3af 8000 	nop.w
 8004588:	636f4361 	.word	0x636f4361
 800458c:	3fd287a7 	.word	0x3fd287a7
 8004590:	8b60c8b3 	.word	0x8b60c8b3
 8004594:	3fc68a28 	.word	0x3fc68a28
 8004598:	509f79fb 	.word	0x509f79fb
 800459c:	3fd34413 	.word	0x3fd34413
 80045a0:	08006601 	.word	0x08006601
 80045a4:	08006618 	.word	0x08006618
 80045a8:	7ff00000 	.word	0x7ff00000
 80045ac:	080065fd 	.word	0x080065fd
 80045b0:	080065f4 	.word	0x080065f4
 80045b4:	080065d1 	.word	0x080065d1
 80045b8:	08006708 	.word	0x08006708
 80045bc:	08006673 	.word	0x08006673
 80045c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80045c2:	9901      	ldr	r1, [sp, #4]
 80045c4:	6011      	str	r1, [r2, #0]
 80045c6:	f1b9 0f0e 	cmp.w	r9, #14
 80045ca:	d86c      	bhi.n	80046a6 <_dtoa_r+0x3de>
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	d06a      	beq.n	80046a6 <_dtoa_r+0x3de>
 80045d0:	f1bb 0f00 	cmp.w	fp, #0
 80045d4:	f340 80a0 	ble.w	8004718 <_dtoa_r+0x450>
 80045d8:	49c1      	ldr	r1, [pc, #772]	; (80048e0 <_dtoa_r+0x618>)
 80045da:	f00b 020f 	and.w	r2, fp, #15
 80045de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80045e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80045e6:	ed92 7b00 	vldr	d7, [r2]
 80045ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80045ee:	f000 8087 	beq.w	8004700 <_dtoa_r+0x438>
 80045f2:	4abc      	ldr	r2, [pc, #752]	; (80048e4 <_dtoa_r+0x61c>)
 80045f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80045f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80045fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004600:	f001 010f 	and.w	r1, r1, #15
 8004604:	2203      	movs	r2, #3
 8004606:	48b7      	ldr	r0, [pc, #732]	; (80048e4 <_dtoa_r+0x61c>)
 8004608:	2900      	cmp	r1, #0
 800460a:	d17b      	bne.n	8004704 <_dtoa_r+0x43c>
 800460c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004610:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800461a:	2900      	cmp	r1, #0
 800461c:	f000 80a2 	beq.w	8004764 <_dtoa_r+0x49c>
 8004620:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004628:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	f140 8098 	bpl.w	8004764 <_dtoa_r+0x49c>
 8004634:	f1b9 0f00 	cmp.w	r9, #0
 8004638:	f000 8094 	beq.w	8004764 <_dtoa_r+0x49c>
 800463c:	f1ba 0f00 	cmp.w	sl, #0
 8004640:	dd2f      	ble.n	80046a2 <_dtoa_r+0x3da>
 8004642:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800464a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800464e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004652:	3201      	adds	r2, #1
 8004654:	4650      	mov	r0, sl
 8004656:	ed9d 6b02 	vldr	d6, [sp, #8]
 800465a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800465e:	ee07 2a90 	vmov	s15, r2
 8004662:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004666:	eea7 5b06 	vfma.f64	d5, d7, d6
 800466a:	ee15 4a90 	vmov	r4, s11
 800466e:	ec52 1b15 	vmov	r1, r2, d5
 8004672:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004676:	2800      	cmp	r0, #0
 8004678:	d177      	bne.n	800476a <_dtoa_r+0x4a2>
 800467a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800467e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004682:	ec42 1b17 	vmov	d7, r1, r2
 8004686:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	f300 8263 	bgt.w	8004b58 <_dtoa_r+0x890>
 8004692:	eeb1 7b47 	vneg.f64	d7, d7
 8004696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	f100 8258 	bmi.w	8004b52 <_dtoa_r+0x88a>
 80046a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80046a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	f2c0 811d 	blt.w	80048e8 <_dtoa_r+0x620>
 80046ae:	f1bb 0f0e 	cmp.w	fp, #14
 80046b2:	f300 8119 	bgt.w	80048e8 <_dtoa_r+0x620>
 80046b6:	4b8a      	ldr	r3, [pc, #552]	; (80048e0 <_dtoa_r+0x618>)
 80046b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046bc:	ed93 6b00 	vldr	d6, [r3]
 80046c0:	9b08      	ldr	r3, [sp, #32]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f280 80b7 	bge.w	8004836 <_dtoa_r+0x56e>
 80046c8:	f1b9 0f00 	cmp.w	r9, #0
 80046cc:	f300 80b3 	bgt.w	8004836 <_dtoa_r+0x56e>
 80046d0:	f040 823f 	bne.w	8004b52 <_dtoa_r+0x88a>
 80046d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80046d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80046dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e8:	464c      	mov	r4, r9
 80046ea:	464f      	mov	r7, r9
 80046ec:	f280 8215 	bge.w	8004b1a <_dtoa_r+0x852>
 80046f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046f4:	2331      	movs	r3, #49	; 0x31
 80046f6:	f808 3b01 	strb.w	r3, [r8], #1
 80046fa:	f10b 0b01 	add.w	fp, fp, #1
 80046fe:	e211      	b.n	8004b24 <_dtoa_r+0x85c>
 8004700:	2202      	movs	r2, #2
 8004702:	e780      	b.n	8004606 <_dtoa_r+0x33e>
 8004704:	07cc      	lsls	r4, r1, #31
 8004706:	d504      	bpl.n	8004712 <_dtoa_r+0x44a>
 8004708:	ed90 6b00 	vldr	d6, [r0]
 800470c:	3201      	adds	r2, #1
 800470e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004712:	1049      	asrs	r1, r1, #1
 8004714:	3008      	adds	r0, #8
 8004716:	e777      	b.n	8004608 <_dtoa_r+0x340>
 8004718:	d022      	beq.n	8004760 <_dtoa_r+0x498>
 800471a:	f1cb 0100 	rsb	r1, fp, #0
 800471e:	4a70      	ldr	r2, [pc, #448]	; (80048e0 <_dtoa_r+0x618>)
 8004720:	f001 000f 	and.w	r0, r1, #15
 8004724:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004728:	ed92 7b00 	vldr	d7, [r2]
 800472c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004734:	486b      	ldr	r0, [pc, #428]	; (80048e4 <_dtoa_r+0x61c>)
 8004736:	1109      	asrs	r1, r1, #4
 8004738:	2400      	movs	r4, #0
 800473a:	2202      	movs	r2, #2
 800473c:	b929      	cbnz	r1, 800474a <_dtoa_r+0x482>
 800473e:	2c00      	cmp	r4, #0
 8004740:	f43f af6a 	beq.w	8004618 <_dtoa_r+0x350>
 8004744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004748:	e766      	b.n	8004618 <_dtoa_r+0x350>
 800474a:	07cf      	lsls	r7, r1, #31
 800474c:	d505      	bpl.n	800475a <_dtoa_r+0x492>
 800474e:	ed90 6b00 	vldr	d6, [r0]
 8004752:	3201      	adds	r2, #1
 8004754:	2401      	movs	r4, #1
 8004756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800475a:	1049      	asrs	r1, r1, #1
 800475c:	3008      	adds	r0, #8
 800475e:	e7ed      	b.n	800473c <_dtoa_r+0x474>
 8004760:	2202      	movs	r2, #2
 8004762:	e759      	b.n	8004618 <_dtoa_r+0x350>
 8004764:	465f      	mov	r7, fp
 8004766:	4648      	mov	r0, r9
 8004768:	e775      	b.n	8004656 <_dtoa_r+0x38e>
 800476a:	ec42 1b17 	vmov	d7, r1, r2
 800476e:	4a5c      	ldr	r2, [pc, #368]	; (80048e0 <_dtoa_r+0x618>)
 8004770:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004774:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004778:	9a01      	ldr	r2, [sp, #4]
 800477a:	1814      	adds	r4, r2, r0
 800477c:	9a07      	ldr	r2, [sp, #28]
 800477e:	b352      	cbz	r2, 80047d6 <_dtoa_r+0x50e>
 8004780:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004784:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800478c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004790:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004794:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004798:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800479c:	ee14 2a90 	vmov	r2, s9
 80047a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80047a4:	3230      	adds	r2, #48	; 0x30
 80047a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80047aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	f808 2b01 	strb.w	r2, [r8], #1
 80047b6:	d439      	bmi.n	800482c <_dtoa_r+0x564>
 80047b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80047bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d472      	bmi.n	80048ac <_dtoa_r+0x5e4>
 80047c6:	45a0      	cmp	r8, r4
 80047c8:	f43f af6b 	beq.w	80046a2 <_dtoa_r+0x3da>
 80047cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80047d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80047d4:	e7e0      	b.n	8004798 <_dtoa_r+0x4d0>
 80047d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80047da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80047de:	4621      	mov	r1, r4
 80047e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80047e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80047e8:	ee14 2a90 	vmov	r2, s9
 80047ec:	3230      	adds	r2, #48	; 0x30
 80047ee:	f808 2b01 	strb.w	r2, [r8], #1
 80047f2:	45a0      	cmp	r8, r4
 80047f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80047f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80047fc:	d118      	bne.n	8004830 <_dtoa_r+0x568>
 80047fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004802:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004806:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	dc4d      	bgt.n	80048ac <_dtoa_r+0x5e4>
 8004810:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481c:	f57f af41 	bpl.w	80046a2 <_dtoa_r+0x3da>
 8004820:	4688      	mov	r8, r1
 8004822:	3901      	subs	r1, #1
 8004824:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d0f9      	beq.n	8004820 <_dtoa_r+0x558>
 800482c:	46bb      	mov	fp, r7
 800482e:	e02a      	b.n	8004886 <_dtoa_r+0x5be>
 8004830:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004834:	e7d6      	b.n	80047e4 <_dtoa_r+0x51c>
 8004836:	ed9d 7b02 	vldr	d7, [sp, #8]
 800483a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800483e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004842:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004846:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800484a:	ee15 3a10 	vmov	r3, s10
 800484e:	3330      	adds	r3, #48	; 0x30
 8004850:	f808 3b01 	strb.w	r3, [r8], #1
 8004854:	9b01      	ldr	r3, [sp, #4]
 8004856:	eba8 0303 	sub.w	r3, r8, r3
 800485a:	4599      	cmp	r9, r3
 800485c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004860:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004864:	d133      	bne.n	80048ce <_dtoa_r+0x606>
 8004866:	ee37 7b07 	vadd.f64	d7, d7, d7
 800486a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004872:	dc1a      	bgt.n	80048aa <_dtoa_r+0x5e2>
 8004874:	eeb4 7b46 	vcmp.f64	d7, d6
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d103      	bne.n	8004886 <_dtoa_r+0x5be>
 800487e:	ee15 3a10 	vmov	r3, s10
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	d411      	bmi.n	80048aa <_dtoa_r+0x5e2>
 8004886:	4629      	mov	r1, r5
 8004888:	4630      	mov	r0, r6
 800488a:	f000 fae5 	bl	8004e58 <_Bfree>
 800488e:	2300      	movs	r3, #0
 8004890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004892:	f888 3000 	strb.w	r3, [r8]
 8004896:	f10b 0301 	add.w	r3, fp, #1
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f43f ad61 	beq.w	8004366 <_dtoa_r+0x9e>
 80048a4:	f8c3 8000 	str.w	r8, [r3]
 80048a8:	e55d      	b.n	8004366 <_dtoa_r+0x9e>
 80048aa:	465f      	mov	r7, fp
 80048ac:	4643      	mov	r3, r8
 80048ae:	4698      	mov	r8, r3
 80048b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048b4:	2a39      	cmp	r2, #57	; 0x39
 80048b6:	d106      	bne.n	80048c6 <_dtoa_r+0x5fe>
 80048b8:	9a01      	ldr	r2, [sp, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d1f7      	bne.n	80048ae <_dtoa_r+0x5e6>
 80048be:	9901      	ldr	r1, [sp, #4]
 80048c0:	2230      	movs	r2, #48	; 0x30
 80048c2:	3701      	adds	r7, #1
 80048c4:	700a      	strb	r2, [r1, #0]
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	3201      	adds	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e7ae      	b.n	800482c <_dtoa_r+0x564>
 80048ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80048d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d1b2      	bne.n	8004842 <_dtoa_r+0x57a>
 80048dc:	e7d3      	b.n	8004886 <_dtoa_r+0x5be>
 80048de:	bf00      	nop
 80048e0:	08006708 	.word	0x08006708
 80048e4:	080066e0 	.word	0x080066e0
 80048e8:	9907      	ldr	r1, [sp, #28]
 80048ea:	2900      	cmp	r1, #0
 80048ec:	f000 80d0 	beq.w	8004a90 <_dtoa_r+0x7c8>
 80048f0:	9906      	ldr	r1, [sp, #24]
 80048f2:	2901      	cmp	r1, #1
 80048f4:	f300 80b4 	bgt.w	8004a60 <_dtoa_r+0x798>
 80048f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048fa:	2900      	cmp	r1, #0
 80048fc:	f000 80ac 	beq.w	8004a58 <_dtoa_r+0x790>
 8004900:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004904:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004908:	461c      	mov	r4, r3
 800490a:	930a      	str	r3, [sp, #40]	; 0x28
 800490c:	9b04      	ldr	r3, [sp, #16]
 800490e:	4413      	add	r3, r2
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	9b05      	ldr	r3, [sp, #20]
 8004914:	2101      	movs	r1, #1
 8004916:	4413      	add	r3, r2
 8004918:	4630      	mov	r0, r6
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	f000 fb54 	bl	8004fc8 <__i2b>
 8004920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004922:	4607      	mov	r7, r0
 8004924:	f1b8 0f00 	cmp.w	r8, #0
 8004928:	dd0d      	ble.n	8004946 <_dtoa_r+0x67e>
 800492a:	9a05      	ldr	r2, [sp, #20]
 800492c:	2a00      	cmp	r2, #0
 800492e:	dd0a      	ble.n	8004946 <_dtoa_r+0x67e>
 8004930:	4542      	cmp	r2, r8
 8004932:	9904      	ldr	r1, [sp, #16]
 8004934:	bfa8      	it	ge
 8004936:	4642      	movge	r2, r8
 8004938:	1a89      	subs	r1, r1, r2
 800493a:	9104      	str	r1, [sp, #16]
 800493c:	9905      	ldr	r1, [sp, #20]
 800493e:	eba8 0802 	sub.w	r8, r8, r2
 8004942:	1a8a      	subs	r2, r1, r2
 8004944:	9205      	str	r2, [sp, #20]
 8004946:	b303      	cbz	r3, 800498a <_dtoa_r+0x6c2>
 8004948:	9a07      	ldr	r2, [sp, #28]
 800494a:	2a00      	cmp	r2, #0
 800494c:	f000 80a5 	beq.w	8004a9a <_dtoa_r+0x7d2>
 8004950:	2c00      	cmp	r4, #0
 8004952:	dd13      	ble.n	800497c <_dtoa_r+0x6b4>
 8004954:	4639      	mov	r1, r7
 8004956:	4622      	mov	r2, r4
 8004958:	4630      	mov	r0, r6
 800495a:	930d      	str	r3, [sp, #52]	; 0x34
 800495c:	f000 fbf4 	bl	8005148 <__pow5mult>
 8004960:	462a      	mov	r2, r5
 8004962:	4601      	mov	r1, r0
 8004964:	4607      	mov	r7, r0
 8004966:	4630      	mov	r0, r6
 8004968:	f000 fb44 	bl	8004ff4 <__multiply>
 800496c:	4629      	mov	r1, r5
 800496e:	900a      	str	r0, [sp, #40]	; 0x28
 8004970:	4630      	mov	r0, r6
 8004972:	f000 fa71 	bl	8004e58 <_Bfree>
 8004976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800497a:	4615      	mov	r5, r2
 800497c:	1b1a      	subs	r2, r3, r4
 800497e:	d004      	beq.n	800498a <_dtoa_r+0x6c2>
 8004980:	4629      	mov	r1, r5
 8004982:	4630      	mov	r0, r6
 8004984:	f000 fbe0 	bl	8005148 <__pow5mult>
 8004988:	4605      	mov	r5, r0
 800498a:	2101      	movs	r1, #1
 800498c:	4630      	mov	r0, r6
 800498e:	f000 fb1b 	bl	8004fc8 <__i2b>
 8004992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	f340 8081 	ble.w	8004a9e <_dtoa_r+0x7d6>
 800499c:	461a      	mov	r2, r3
 800499e:	4601      	mov	r1, r0
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 fbd1 	bl	8005148 <__pow5mult>
 80049a6:	9b06      	ldr	r3, [sp, #24]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	4604      	mov	r4, r0
 80049ac:	dd7a      	ble.n	8004aa4 <_dtoa_r+0x7dc>
 80049ae:	2300      	movs	r3, #0
 80049b0:	930a      	str	r3, [sp, #40]	; 0x28
 80049b2:	6922      	ldr	r2, [r4, #16]
 80049b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80049b8:	6910      	ldr	r0, [r2, #16]
 80049ba:	f000 fab5 	bl	8004f28 <__hi0bits>
 80049be:	f1c0 0020 	rsb	r0, r0, #32
 80049c2:	9b05      	ldr	r3, [sp, #20]
 80049c4:	4418      	add	r0, r3
 80049c6:	f010 001f 	ands.w	r0, r0, #31
 80049ca:	f000 808c 	beq.w	8004ae6 <_dtoa_r+0x81e>
 80049ce:	f1c0 0220 	rsb	r2, r0, #32
 80049d2:	2a04      	cmp	r2, #4
 80049d4:	f340 8085 	ble.w	8004ae2 <_dtoa_r+0x81a>
 80049d8:	f1c0 001c 	rsb	r0, r0, #28
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	4403      	add	r3, r0
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	9b05      	ldr	r3, [sp, #20]
 80049e4:	4403      	add	r3, r0
 80049e6:	4480      	add	r8, r0
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	9b04      	ldr	r3, [sp, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dd05      	ble.n	80049fc <_dtoa_r+0x734>
 80049f0:	4629      	mov	r1, r5
 80049f2:	461a      	mov	r2, r3
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 fc01 	bl	80051fc <__lshift>
 80049fa:	4605      	mov	r5, r0
 80049fc:	9b05      	ldr	r3, [sp, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dd05      	ble.n	8004a0e <_dtoa_r+0x746>
 8004a02:	4621      	mov	r1, r4
 8004a04:	461a      	mov	r2, r3
 8004a06:	4630      	mov	r0, r6
 8004a08:	f000 fbf8 	bl	80051fc <__lshift>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d06a      	beq.n	8004aea <_dtoa_r+0x822>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 fc60 	bl	80052dc <__mcmp>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	da64      	bge.n	8004aea <_dtoa_r+0x822>
 8004a20:	2300      	movs	r3, #0
 8004a22:	4629      	mov	r1, r5
 8004a24:	220a      	movs	r2, #10
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 fa38 	bl	8004e9c <__multadd>
 8004a2c:	9b07      	ldr	r3, [sp, #28]
 8004a2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a32:	4605      	mov	r5, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8191 	beq.w	8004d5c <_dtoa_r+0xa94>
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	220a      	movs	r2, #10
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 fa2b 	bl	8004e9c <__multadd>
 8004a46:	f1ba 0f00 	cmp.w	sl, #0
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	f300 808d 	bgt.w	8004b6a <_dtoa_r+0x8a2>
 8004a50:	9b06      	ldr	r3, [sp, #24]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	dc50      	bgt.n	8004af8 <_dtoa_r+0x830>
 8004a56:	e088      	b.n	8004b6a <_dtoa_r+0x8a2>
 8004a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004a5e:	e751      	b.n	8004904 <_dtoa_r+0x63c>
 8004a60:	f109 34ff 	add.w	r4, r9, #4294967295
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	bfbf      	itttt	lt
 8004a68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8004a6a:	1ae3      	sublt	r3, r4, r3
 8004a6c:	18d2      	addlt	r2, r2, r3
 8004a6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8004a70:	bfb6      	itet	lt
 8004a72:	4623      	movlt	r3, r4
 8004a74:	1b1c      	subge	r4, r3, r4
 8004a76:	2400      	movlt	r4, #0
 8004a78:	f1b9 0f00 	cmp.w	r9, #0
 8004a7c:	bfb5      	itete	lt
 8004a7e:	9a04      	ldrlt	r2, [sp, #16]
 8004a80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8004a84:	eba2 0809 	sublt.w	r8, r2, r9
 8004a88:	464a      	movge	r2, r9
 8004a8a:	bfb8      	it	lt
 8004a8c:	2200      	movlt	r2, #0
 8004a8e:	e73c      	b.n	800490a <_dtoa_r+0x642>
 8004a90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004a94:	9f07      	ldr	r7, [sp, #28]
 8004a96:	461c      	mov	r4, r3
 8004a98:	e744      	b.n	8004924 <_dtoa_r+0x65c>
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	e770      	b.n	8004980 <_dtoa_r+0x6b8>
 8004a9e:	9b06      	ldr	r3, [sp, #24]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	dc18      	bgt.n	8004ad6 <_dtoa_r+0x80e>
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	b9b3      	cbnz	r3, 8004ad6 <_dtoa_r+0x80e>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004aae:	b9a2      	cbnz	r2, 8004ada <_dtoa_r+0x812>
 8004ab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ab4:	0d12      	lsrs	r2, r2, #20
 8004ab6:	0512      	lsls	r2, r2, #20
 8004ab8:	b18a      	cbz	r2, 8004ade <_dtoa_r+0x816>
 8004aba:	9b04      	ldr	r3, [sp, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	9b05      	ldr	r3, [sp, #20]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8004aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af70 	bne.w	80049b2 <_dtoa_r+0x6ea>
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	e775      	b.n	80049c2 <_dtoa_r+0x6fa>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e7f6      	b.n	8004ac8 <_dtoa_r+0x800>
 8004ada:	9b02      	ldr	r3, [sp, #8]
 8004adc:	e7f4      	b.n	8004ac8 <_dtoa_r+0x800>
 8004ade:	920a      	str	r2, [sp, #40]	; 0x28
 8004ae0:	e7f3      	b.n	8004aca <_dtoa_r+0x802>
 8004ae2:	d082      	beq.n	80049ea <_dtoa_r+0x722>
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	301c      	adds	r0, #28
 8004ae8:	e778      	b.n	80049dc <_dtoa_r+0x714>
 8004aea:	f1b9 0f00 	cmp.w	r9, #0
 8004aee:	dc37      	bgt.n	8004b60 <_dtoa_r+0x898>
 8004af0:	9b06      	ldr	r3, [sp, #24]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	dd34      	ble.n	8004b60 <_dtoa_r+0x898>
 8004af6:	46ca      	mov	sl, r9
 8004af8:	f1ba 0f00 	cmp.w	sl, #0
 8004afc:	d10d      	bne.n	8004b1a <_dtoa_r+0x852>
 8004afe:	4621      	mov	r1, r4
 8004b00:	4653      	mov	r3, sl
 8004b02:	2205      	movs	r2, #5
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f9c9 	bl	8004e9c <__multadd>
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fbe4 	bl	80052dc <__mcmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	f73f adeb 	bgt.w	80046f0 <_dtoa_r+0x428>
 8004b1a:	9b08      	ldr	r3, [sp, #32]
 8004b1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b20:	ea6f 0b03 	mvn.w	fp, r3
 8004b24:	f04f 0900 	mov.w	r9, #0
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 f994 	bl	8004e58 <_Bfree>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	f43f aea8 	beq.w	8004886 <_dtoa_r+0x5be>
 8004b36:	f1b9 0f00 	cmp.w	r9, #0
 8004b3a:	d005      	beq.n	8004b48 <_dtoa_r+0x880>
 8004b3c:	45b9      	cmp	r9, r7
 8004b3e:	d003      	beq.n	8004b48 <_dtoa_r+0x880>
 8004b40:	4649      	mov	r1, r9
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 f988 	bl	8004e58 <_Bfree>
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 f984 	bl	8004e58 <_Bfree>
 8004b50:	e699      	b.n	8004886 <_dtoa_r+0x5be>
 8004b52:	2400      	movs	r4, #0
 8004b54:	4627      	mov	r7, r4
 8004b56:	e7e0      	b.n	8004b1a <_dtoa_r+0x852>
 8004b58:	46bb      	mov	fp, r7
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	e5c7      	b.n	80046f0 <_dtoa_r+0x428>
 8004b60:	9b07      	ldr	r3, [sp, #28]
 8004b62:	46ca      	mov	sl, r9
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8100 	beq.w	8004d6a <_dtoa_r+0xaa2>
 8004b6a:	f1b8 0f00 	cmp.w	r8, #0
 8004b6e:	dd05      	ble.n	8004b7c <_dtoa_r+0x8b4>
 8004b70:	4639      	mov	r1, r7
 8004b72:	4642      	mov	r2, r8
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 fb41 	bl	80051fc <__lshift>
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d05d      	beq.n	8004c3e <_dtoa_r+0x976>
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f927 	bl	8004dd8 <_Balloc>
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	b928      	cbnz	r0, 8004b9a <_dtoa_r+0x8d2>
 8004b8e:	4b82      	ldr	r3, [pc, #520]	; (8004d98 <_dtoa_r+0xad0>)
 8004b90:	4602      	mov	r2, r0
 8004b92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b96:	f7ff bbaf 	b.w	80042f8 <_dtoa_r+0x30>
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	3202      	adds	r2, #2
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	f107 010c 	add.w	r1, r7, #12
 8004ba4:	300c      	adds	r0, #12
 8004ba6:	f000 f909 	bl	8004dbc <memcpy>
 8004baa:	2201      	movs	r2, #1
 8004bac:	4641      	mov	r1, r8
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f000 fb24 	bl	80051fc <__lshift>
 8004bb4:	9b01      	ldr	r3, [sp, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	4453      	add	r3, sl
 8004bbe:	9308      	str	r3, [sp, #32]
 8004bc0:	9b02      	ldr	r3, [sp, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	46b9      	mov	r9, r7
 8004bc8:	9307      	str	r3, [sp, #28]
 8004bca:	4607      	mov	r7, r0
 8004bcc:	9b04      	ldr	r3, [sp, #16]
 8004bce:	4621      	mov	r1, r4
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	9302      	str	r3, [sp, #8]
 8004bd6:	f7ff fae9 	bl	80041ac <quorem>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	3330      	adds	r3, #48	; 0x30
 8004bde:	9005      	str	r0, [sp, #20]
 8004be0:	4649      	mov	r1, r9
 8004be2:	4628      	mov	r0, r5
 8004be4:	9309      	str	r3, [sp, #36]	; 0x24
 8004be6:	f000 fb79 	bl	80052dc <__mcmp>
 8004bea:	463a      	mov	r2, r7
 8004bec:	4682      	mov	sl, r0
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 fb8f 	bl	8005314 <__mdiff>
 8004bf6:	68c2      	ldr	r2, [r0, #12]
 8004bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	bb0a      	cbnz	r2, 8004c42 <_dtoa_r+0x97a>
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 fb6b 	bl	80052dc <__mcmp>
 8004c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8004c12:	f000 f921 	bl	8004e58 <_Bfree>
 8004c16:	9b06      	ldr	r3, [sp, #24]
 8004c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004c1e:	ea43 0102 	orr.w	r1, r3, r2
 8004c22:	9b07      	ldr	r3, [sp, #28]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	d10d      	bne.n	8004c46 <_dtoa_r+0x97e>
 8004c2a:	2b39      	cmp	r3, #57	; 0x39
 8004c2c:	d029      	beq.n	8004c82 <_dtoa_r+0x9ba>
 8004c2e:	f1ba 0f00 	cmp.w	sl, #0
 8004c32:	dd01      	ble.n	8004c38 <_dtoa_r+0x970>
 8004c34:	9b05      	ldr	r3, [sp, #20]
 8004c36:	3331      	adds	r3, #49	; 0x31
 8004c38:	9a02      	ldr	r2, [sp, #8]
 8004c3a:	7013      	strb	r3, [r2, #0]
 8004c3c:	e774      	b.n	8004b28 <_dtoa_r+0x860>
 8004c3e:	4638      	mov	r0, r7
 8004c40:	e7b8      	b.n	8004bb4 <_dtoa_r+0x8ec>
 8004c42:	2201      	movs	r2, #1
 8004c44:	e7e1      	b.n	8004c0a <_dtoa_r+0x942>
 8004c46:	f1ba 0f00 	cmp.w	sl, #0
 8004c4a:	db06      	blt.n	8004c5a <_dtoa_r+0x992>
 8004c4c:	9906      	ldr	r1, [sp, #24]
 8004c4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8004c52:	9907      	ldr	r1, [sp, #28]
 8004c54:	ea5a 0101 	orrs.w	r1, sl, r1
 8004c58:	d120      	bne.n	8004c9c <_dtoa_r+0x9d4>
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	ddec      	ble.n	8004c38 <_dtoa_r+0x970>
 8004c5e:	4629      	mov	r1, r5
 8004c60:	2201      	movs	r2, #1
 8004c62:	4630      	mov	r0, r6
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	f000 fac9 	bl	80051fc <__lshift>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	f000 fb35 	bl	80052dc <__mcmp>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	9b04      	ldr	r3, [sp, #16]
 8004c76:	dc02      	bgt.n	8004c7e <_dtoa_r+0x9b6>
 8004c78:	d1de      	bne.n	8004c38 <_dtoa_r+0x970>
 8004c7a:	07da      	lsls	r2, r3, #31
 8004c7c:	d5dc      	bpl.n	8004c38 <_dtoa_r+0x970>
 8004c7e:	2b39      	cmp	r3, #57	; 0x39
 8004c80:	d1d8      	bne.n	8004c34 <_dtoa_r+0x96c>
 8004c82:	9a02      	ldr	r2, [sp, #8]
 8004c84:	2339      	movs	r3, #57	; 0x39
 8004c86:	7013      	strb	r3, [r2, #0]
 8004c88:	4643      	mov	r3, r8
 8004c8a:	4698      	mov	r8, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004c92:	2a39      	cmp	r2, #57	; 0x39
 8004c94:	d051      	beq.n	8004d3a <_dtoa_r+0xa72>
 8004c96:	3201      	adds	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e745      	b.n	8004b28 <_dtoa_r+0x860>
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	dd03      	ble.n	8004ca8 <_dtoa_r+0x9e0>
 8004ca0:	2b39      	cmp	r3, #57	; 0x39
 8004ca2:	d0ee      	beq.n	8004c82 <_dtoa_r+0x9ba>
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	e7c7      	b.n	8004c38 <_dtoa_r+0x970>
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	9908      	ldr	r1, [sp, #32]
 8004cac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d02b      	beq.n	8004d0c <_dtoa_r+0xa44>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	220a      	movs	r2, #10
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 f8ee 	bl	8004e9c <__multadd>
 8004cc0:	45b9      	cmp	r9, r7
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	f04f 020a 	mov.w	r2, #10
 8004ccc:	4649      	mov	r1, r9
 8004cce:	4630      	mov	r0, r6
 8004cd0:	d107      	bne.n	8004ce2 <_dtoa_r+0xa1a>
 8004cd2:	f000 f8e3 	bl	8004e9c <__multadd>
 8004cd6:	4681      	mov	r9, r0
 8004cd8:	4607      	mov	r7, r0
 8004cda:	9b04      	ldr	r3, [sp, #16]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	9304      	str	r3, [sp, #16]
 8004ce0:	e774      	b.n	8004bcc <_dtoa_r+0x904>
 8004ce2:	f000 f8db 	bl	8004e9c <__multadd>
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4681      	mov	r9, r0
 8004cea:	2300      	movs	r3, #0
 8004cec:	220a      	movs	r2, #10
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 f8d4 	bl	8004e9c <__multadd>
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	e7f0      	b.n	8004cda <_dtoa_r+0xa12>
 8004cf8:	f1ba 0f00 	cmp.w	sl, #0
 8004cfc:	9a01      	ldr	r2, [sp, #4]
 8004cfe:	bfcc      	ite	gt
 8004d00:	46d0      	movgt	r8, sl
 8004d02:	f04f 0801 	movle.w	r8, #1
 8004d06:	4490      	add	r8, r2
 8004d08:	f04f 0900 	mov.w	r9, #0
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4630      	mov	r0, r6
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	f000 fa72 	bl	80051fc <__lshift>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	f000 fade 	bl	80052dc <__mcmp>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	dcb1      	bgt.n	8004c88 <_dtoa_r+0x9c0>
 8004d24:	d102      	bne.n	8004d2c <_dtoa_r+0xa64>
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	07db      	lsls	r3, r3, #31
 8004d2a:	d4ad      	bmi.n	8004c88 <_dtoa_r+0x9c0>
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	4698      	mov	r8, r3
 8004d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d34:	2a30      	cmp	r2, #48	; 0x30
 8004d36:	d0fa      	beq.n	8004d2e <_dtoa_r+0xa66>
 8004d38:	e6f6      	b.n	8004b28 <_dtoa_r+0x860>
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d1a4      	bne.n	8004c8a <_dtoa_r+0x9c2>
 8004d40:	f10b 0b01 	add.w	fp, fp, #1
 8004d44:	2331      	movs	r3, #49	; 0x31
 8004d46:	e778      	b.n	8004c3a <_dtoa_r+0x972>
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <_dtoa_r+0xad4>)
 8004d4a:	f7ff bb27 	b.w	800439c <_dtoa_r+0xd4>
 8004d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f ab03 	bne.w	800435c <_dtoa_r+0x94>
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <_dtoa_r+0xad8>)
 8004d58:	f7ff bb20 	b.w	800439c <_dtoa_r+0xd4>
 8004d5c:	f1ba 0f00 	cmp.w	sl, #0
 8004d60:	dc03      	bgt.n	8004d6a <_dtoa_r+0xaa2>
 8004d62:	9b06      	ldr	r3, [sp, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f73f aec7 	bgt.w	8004af8 <_dtoa_r+0x830>
 8004d6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f7ff fa1b 	bl	80041ac <quorem>
 8004d76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004d7a:	f808 3b01 	strb.w	r3, [r8], #1
 8004d7e:	9a01      	ldr	r2, [sp, #4]
 8004d80:	eba8 0202 	sub.w	r2, r8, r2
 8004d84:	4592      	cmp	sl, r2
 8004d86:	ddb7      	ble.n	8004cf8 <_dtoa_r+0xa30>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	220a      	movs	r2, #10
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 f884 	bl	8004e9c <__multadd>
 8004d94:	4605      	mov	r5, r0
 8004d96:	e7ea      	b.n	8004d6e <_dtoa_r+0xaa6>
 8004d98:	08006673 	.word	0x08006673
 8004d9c:	080065d0 	.word	0x080065d0
 8004da0:	080065f4 	.word	0x080065f4

08004da4 <_localeconv_r>:
 8004da4:	4800      	ldr	r0, [pc, #0]	; (8004da8 <_localeconv_r+0x4>)
 8004da6:	4770      	bx	lr
 8004da8:	20000160 	.word	0x20000160

08004dac <malloc>:
 8004dac:	4b02      	ldr	r3, [pc, #8]	; (8004db8 <malloc+0xc>)
 8004dae:	4601      	mov	r1, r0
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	f000 bc17 	b.w	80055e4 <_malloc_r>
 8004db6:	bf00      	nop
 8004db8:	2000000c 	.word	0x2000000c

08004dbc <memcpy>:
 8004dbc:	440a      	add	r2, r1
 8004dbe:	4291      	cmp	r1, r2
 8004dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc4:	d100      	bne.n	8004dc8 <memcpy+0xc>
 8004dc6:	4770      	bx	lr
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dd2:	4291      	cmp	r1, r2
 8004dd4:	d1f9      	bne.n	8004dca <memcpy+0xe>
 8004dd6:	bd10      	pop	{r4, pc}

08004dd8 <_Balloc>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ddc:	4604      	mov	r4, r0
 8004dde:	460d      	mov	r5, r1
 8004de0:	b976      	cbnz	r6, 8004e00 <_Balloc+0x28>
 8004de2:	2010      	movs	r0, #16
 8004de4:	f7ff ffe2 	bl	8004dac <malloc>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6260      	str	r0, [r4, #36]	; 0x24
 8004dec:	b920      	cbnz	r0, 8004df8 <_Balloc+0x20>
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <_Balloc+0x78>)
 8004df0:	4818      	ldr	r0, [pc, #96]	; (8004e54 <_Balloc+0x7c>)
 8004df2:	2166      	movs	r1, #102	; 0x66
 8004df4:	f000 fdd6 	bl	80059a4 <__assert_func>
 8004df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dfc:	6006      	str	r6, [r0, #0]
 8004dfe:	60c6      	str	r6, [r0, #12]
 8004e00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e02:	68f3      	ldr	r3, [r6, #12]
 8004e04:	b183      	cbz	r3, 8004e28 <_Balloc+0x50>
 8004e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e0e:	b9b8      	cbnz	r0, 8004e40 <_Balloc+0x68>
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f605 	lsl.w	r6, r1, r5
 8004e16:	1d72      	adds	r2, r6, #5
 8004e18:	0092      	lsls	r2, r2, #2
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fb60 	bl	80054e0 <_calloc_r>
 8004e20:	b160      	cbz	r0, 8004e3c <_Balloc+0x64>
 8004e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e26:	e00e      	b.n	8004e46 <_Balloc+0x6e>
 8004e28:	2221      	movs	r2, #33	; 0x21
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 fb57 	bl	80054e0 <_calloc_r>
 8004e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e34:	60f0      	str	r0, [r6, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e4      	bne.n	8004e06 <_Balloc+0x2e>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	6802      	ldr	r2, [r0, #0]
 8004e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e46:	2300      	movs	r3, #0
 8004e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e4c:	e7f7      	b.n	8004e3e <_Balloc+0x66>
 8004e4e:	bf00      	nop
 8004e50:	08006601 	.word	0x08006601
 8004e54:	08006684 	.word	0x08006684

08004e58 <_Bfree>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	b976      	cbnz	r6, 8004e80 <_Bfree+0x28>
 8004e62:	2010      	movs	r0, #16
 8004e64:	f7ff ffa2 	bl	8004dac <malloc>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6268      	str	r0, [r5, #36]	; 0x24
 8004e6c:	b920      	cbnz	r0, 8004e78 <_Bfree+0x20>
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <_Bfree+0x3c>)
 8004e70:	4809      	ldr	r0, [pc, #36]	; (8004e98 <_Bfree+0x40>)
 8004e72:	218a      	movs	r1, #138	; 0x8a
 8004e74:	f000 fd96 	bl	80059a4 <__assert_func>
 8004e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e7c:	6006      	str	r6, [r0, #0]
 8004e7e:	60c6      	str	r6, [r0, #12]
 8004e80:	b13c      	cbz	r4, 8004e92 <_Bfree+0x3a>
 8004e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e8c:	6021      	str	r1, [r4, #0]
 8004e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	08006601 	.word	0x08006601
 8004e98:	08006684 	.word	0x08006684

08004e9c <__multadd>:
 8004e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	690d      	ldr	r5, [r1, #16]
 8004ea2:	4607      	mov	r7, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	461e      	mov	r6, r3
 8004ea8:	f101 0c14 	add.w	ip, r1, #20
 8004eac:	2000      	movs	r0, #0
 8004eae:	f8dc 3000 	ldr.w	r3, [ip]
 8004eb2:	b299      	uxth	r1, r3
 8004eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8004eb8:	0c1e      	lsrs	r6, r3, #16
 8004eba:	0c0b      	lsrs	r3, r1, #16
 8004ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8004ec0:	b289      	uxth	r1, r1
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ec8:	4285      	cmp	r5, r0
 8004eca:	f84c 1b04 	str.w	r1, [ip], #4
 8004ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ed2:	dcec      	bgt.n	8004eae <__multadd+0x12>
 8004ed4:	b30e      	cbz	r6, 8004f1a <__multadd+0x7e>
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	dc19      	bgt.n	8004f10 <__multadd+0x74>
 8004edc:	6861      	ldr	r1, [r4, #4]
 8004ede:	4638      	mov	r0, r7
 8004ee0:	3101      	adds	r1, #1
 8004ee2:	f7ff ff79 	bl	8004dd8 <_Balloc>
 8004ee6:	4680      	mov	r8, r0
 8004ee8:	b928      	cbnz	r0, 8004ef6 <__multadd+0x5a>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <__multadd+0x84>)
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <__multadd+0x88>)
 8004ef0:	21b5      	movs	r1, #181	; 0xb5
 8004ef2:	f000 fd57 	bl	80059a4 <__assert_func>
 8004ef6:	6922      	ldr	r2, [r4, #16]
 8004ef8:	3202      	adds	r2, #2
 8004efa:	f104 010c 	add.w	r1, r4, #12
 8004efe:	0092      	lsls	r2, r2, #2
 8004f00:	300c      	adds	r0, #12
 8004f02:	f7ff ff5b 	bl	8004dbc <memcpy>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ffa5 	bl	8004e58 <_Bfree>
 8004f0e:	4644      	mov	r4, r8
 8004f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f14:	3501      	adds	r5, #1
 8004f16:	615e      	str	r6, [r3, #20]
 8004f18:	6125      	str	r5, [r4, #16]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	08006673 	.word	0x08006673
 8004f24:	08006684 	.word	0x08006684

08004f28 <__hi0bits>:
 8004f28:	0c03      	lsrs	r3, r0, #16
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	b9d3      	cbnz	r3, 8004f64 <__hi0bits+0x3c>
 8004f2e:	0400      	lsls	r0, r0, #16
 8004f30:	2310      	movs	r3, #16
 8004f32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f36:	bf04      	itt	eq
 8004f38:	0200      	lsleq	r0, r0, #8
 8004f3a:	3308      	addeq	r3, #8
 8004f3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f40:	bf04      	itt	eq
 8004f42:	0100      	lsleq	r0, r0, #4
 8004f44:	3304      	addeq	r3, #4
 8004f46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f4a:	bf04      	itt	eq
 8004f4c:	0080      	lsleq	r0, r0, #2
 8004f4e:	3302      	addeq	r3, #2
 8004f50:	2800      	cmp	r0, #0
 8004f52:	db05      	blt.n	8004f60 <__hi0bits+0x38>
 8004f54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f58:	f103 0301 	add.w	r3, r3, #1
 8004f5c:	bf08      	it	eq
 8004f5e:	2320      	moveq	r3, #32
 8004f60:	4618      	mov	r0, r3
 8004f62:	4770      	bx	lr
 8004f64:	2300      	movs	r3, #0
 8004f66:	e7e4      	b.n	8004f32 <__hi0bits+0xa>

08004f68 <__lo0bits>:
 8004f68:	6803      	ldr	r3, [r0, #0]
 8004f6a:	f013 0207 	ands.w	r2, r3, #7
 8004f6e:	4601      	mov	r1, r0
 8004f70:	d00b      	beq.n	8004f8a <__lo0bits+0x22>
 8004f72:	07da      	lsls	r2, r3, #31
 8004f74:	d423      	bmi.n	8004fbe <__lo0bits+0x56>
 8004f76:	0798      	lsls	r0, r3, #30
 8004f78:	bf49      	itett	mi
 8004f7a:	085b      	lsrmi	r3, r3, #1
 8004f7c:	089b      	lsrpl	r3, r3, #2
 8004f7e:	2001      	movmi	r0, #1
 8004f80:	600b      	strmi	r3, [r1, #0]
 8004f82:	bf5c      	itt	pl
 8004f84:	600b      	strpl	r3, [r1, #0]
 8004f86:	2002      	movpl	r0, #2
 8004f88:	4770      	bx	lr
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	b9a8      	cbnz	r0, 8004fba <__lo0bits+0x52>
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	2010      	movs	r0, #16
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	b90a      	cbnz	r2, 8004f9a <__lo0bits+0x32>
 8004f96:	3008      	adds	r0, #8
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	071a      	lsls	r2, r3, #28
 8004f9c:	bf04      	itt	eq
 8004f9e:	091b      	lsreq	r3, r3, #4
 8004fa0:	3004      	addeq	r0, #4
 8004fa2:	079a      	lsls	r2, r3, #30
 8004fa4:	bf04      	itt	eq
 8004fa6:	089b      	lsreq	r3, r3, #2
 8004fa8:	3002      	addeq	r0, #2
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d403      	bmi.n	8004fb6 <__lo0bits+0x4e>
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	f100 0001 	add.w	r0, r0, #1
 8004fb4:	d005      	beq.n	8004fc2 <__lo0bits+0x5a>
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	4770      	bx	lr
 8004fba:	4610      	mov	r0, r2
 8004fbc:	e7e9      	b.n	8004f92 <__lo0bits+0x2a>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	4770      	bx	lr
 8004fc2:	2020      	movs	r0, #32
 8004fc4:	4770      	bx	lr
	...

08004fc8 <__i2b>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	460c      	mov	r4, r1
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f7ff ff03 	bl	8004dd8 <_Balloc>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	b928      	cbnz	r0, 8004fe2 <__i2b+0x1a>
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <__i2b+0x24>)
 8004fd8:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <__i2b+0x28>)
 8004fda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fde:	f000 fce1 	bl	80059a4 <__assert_func>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	6144      	str	r4, [r0, #20]
 8004fe6:	6103      	str	r3, [r0, #16]
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	bf00      	nop
 8004fec:	08006673 	.word	0x08006673
 8004ff0:	08006684 	.word	0x08006684

08004ff4 <__multiply>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	4691      	mov	r9, r2
 8004ffa:	690a      	ldr	r2, [r1, #16]
 8004ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005000:	429a      	cmp	r2, r3
 8005002:	bfb8      	it	lt
 8005004:	460b      	movlt	r3, r1
 8005006:	460c      	mov	r4, r1
 8005008:	bfbc      	itt	lt
 800500a:	464c      	movlt	r4, r9
 800500c:	4699      	movlt	r9, r3
 800500e:	6927      	ldr	r7, [r4, #16]
 8005010:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	6861      	ldr	r1, [r4, #4]
 8005018:	eb07 060a 	add.w	r6, r7, sl
 800501c:	42b3      	cmp	r3, r6
 800501e:	b085      	sub	sp, #20
 8005020:	bfb8      	it	lt
 8005022:	3101      	addlt	r1, #1
 8005024:	f7ff fed8 	bl	8004dd8 <_Balloc>
 8005028:	b930      	cbnz	r0, 8005038 <__multiply+0x44>
 800502a:	4602      	mov	r2, r0
 800502c:	4b44      	ldr	r3, [pc, #272]	; (8005140 <__multiply+0x14c>)
 800502e:	4845      	ldr	r0, [pc, #276]	; (8005144 <__multiply+0x150>)
 8005030:	f240 115d 	movw	r1, #349	; 0x15d
 8005034:	f000 fcb6 	bl	80059a4 <__assert_func>
 8005038:	f100 0514 	add.w	r5, r0, #20
 800503c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005040:	462b      	mov	r3, r5
 8005042:	2200      	movs	r2, #0
 8005044:	4543      	cmp	r3, r8
 8005046:	d321      	bcc.n	800508c <__multiply+0x98>
 8005048:	f104 0314 	add.w	r3, r4, #20
 800504c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005050:	f109 0314 	add.w	r3, r9, #20
 8005054:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005058:	9202      	str	r2, [sp, #8]
 800505a:	1b3a      	subs	r2, r7, r4
 800505c:	3a15      	subs	r2, #21
 800505e:	f022 0203 	bic.w	r2, r2, #3
 8005062:	3204      	adds	r2, #4
 8005064:	f104 0115 	add.w	r1, r4, #21
 8005068:	428f      	cmp	r7, r1
 800506a:	bf38      	it	cc
 800506c:	2204      	movcc	r2, #4
 800506e:	9201      	str	r2, [sp, #4]
 8005070:	9a02      	ldr	r2, [sp, #8]
 8005072:	9303      	str	r3, [sp, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	d80c      	bhi.n	8005092 <__multiply+0x9e>
 8005078:	2e00      	cmp	r6, #0
 800507a:	dd03      	ble.n	8005084 <__multiply+0x90>
 800507c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05a      	beq.n	800513a <__multiply+0x146>
 8005084:	6106      	str	r6, [r0, #16]
 8005086:	b005      	add	sp, #20
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	f843 2b04 	str.w	r2, [r3], #4
 8005090:	e7d8      	b.n	8005044 <__multiply+0x50>
 8005092:	f8b3 a000 	ldrh.w	sl, [r3]
 8005096:	f1ba 0f00 	cmp.w	sl, #0
 800509a:	d024      	beq.n	80050e6 <__multiply+0xf2>
 800509c:	f104 0e14 	add.w	lr, r4, #20
 80050a0:	46a9      	mov	r9, r5
 80050a2:	f04f 0c00 	mov.w	ip, #0
 80050a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80050aa:	f8d9 1000 	ldr.w	r1, [r9]
 80050ae:	fa1f fb82 	uxth.w	fp, r2
 80050b2:	b289      	uxth	r1, r1
 80050b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80050b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80050bc:	f8d9 2000 	ldr.w	r2, [r9]
 80050c0:	4461      	add	r1, ip
 80050c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80050ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80050ce:	b289      	uxth	r1, r1
 80050d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050d4:	4577      	cmp	r7, lr
 80050d6:	f849 1b04 	str.w	r1, [r9], #4
 80050da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050de:	d8e2      	bhi.n	80050a6 <__multiply+0xb2>
 80050e0:	9a01      	ldr	r2, [sp, #4]
 80050e2:	f845 c002 	str.w	ip, [r5, r2]
 80050e6:	9a03      	ldr	r2, [sp, #12]
 80050e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050ec:	3304      	adds	r3, #4
 80050ee:	f1b9 0f00 	cmp.w	r9, #0
 80050f2:	d020      	beq.n	8005136 <__multiply+0x142>
 80050f4:	6829      	ldr	r1, [r5, #0]
 80050f6:	f104 0c14 	add.w	ip, r4, #20
 80050fa:	46ae      	mov	lr, r5
 80050fc:	f04f 0a00 	mov.w	sl, #0
 8005100:	f8bc b000 	ldrh.w	fp, [ip]
 8005104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005108:	fb09 220b 	mla	r2, r9, fp, r2
 800510c:	4492      	add	sl, r2
 800510e:	b289      	uxth	r1, r1
 8005110:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005114:	f84e 1b04 	str.w	r1, [lr], #4
 8005118:	f85c 2b04 	ldr.w	r2, [ip], #4
 800511c:	f8be 1000 	ldrh.w	r1, [lr]
 8005120:	0c12      	lsrs	r2, r2, #16
 8005122:	fb09 1102 	mla	r1, r9, r2, r1
 8005126:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800512a:	4567      	cmp	r7, ip
 800512c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005130:	d8e6      	bhi.n	8005100 <__multiply+0x10c>
 8005132:	9a01      	ldr	r2, [sp, #4]
 8005134:	50a9      	str	r1, [r5, r2]
 8005136:	3504      	adds	r5, #4
 8005138:	e79a      	b.n	8005070 <__multiply+0x7c>
 800513a:	3e01      	subs	r6, #1
 800513c:	e79c      	b.n	8005078 <__multiply+0x84>
 800513e:	bf00      	nop
 8005140:	08006673 	.word	0x08006673
 8005144:	08006684 	.word	0x08006684

08005148 <__pow5mult>:
 8005148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514c:	4615      	mov	r5, r2
 800514e:	f012 0203 	ands.w	r2, r2, #3
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	d007      	beq.n	8005168 <__pow5mult+0x20>
 8005158:	4c25      	ldr	r4, [pc, #148]	; (80051f0 <__pow5mult+0xa8>)
 800515a:	3a01      	subs	r2, #1
 800515c:	2300      	movs	r3, #0
 800515e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005162:	f7ff fe9b 	bl	8004e9c <__multadd>
 8005166:	4607      	mov	r7, r0
 8005168:	10ad      	asrs	r5, r5, #2
 800516a:	d03d      	beq.n	80051e8 <__pow5mult+0xa0>
 800516c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800516e:	b97c      	cbnz	r4, 8005190 <__pow5mult+0x48>
 8005170:	2010      	movs	r0, #16
 8005172:	f7ff fe1b 	bl	8004dac <malloc>
 8005176:	4602      	mov	r2, r0
 8005178:	6270      	str	r0, [r6, #36]	; 0x24
 800517a:	b928      	cbnz	r0, 8005188 <__pow5mult+0x40>
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <__pow5mult+0xac>)
 800517e:	481e      	ldr	r0, [pc, #120]	; (80051f8 <__pow5mult+0xb0>)
 8005180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005184:	f000 fc0e 	bl	80059a4 <__assert_func>
 8005188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800518c:	6004      	str	r4, [r0, #0]
 800518e:	60c4      	str	r4, [r0, #12]
 8005190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005198:	b94c      	cbnz	r4, 80051ae <__pow5mult+0x66>
 800519a:	f240 2171 	movw	r1, #625	; 0x271
 800519e:	4630      	mov	r0, r6
 80051a0:	f7ff ff12 	bl	8004fc8 <__i2b>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80051aa:	4604      	mov	r4, r0
 80051ac:	6003      	str	r3, [r0, #0]
 80051ae:	f04f 0900 	mov.w	r9, #0
 80051b2:	07eb      	lsls	r3, r5, #31
 80051b4:	d50a      	bpl.n	80051cc <__pow5mult+0x84>
 80051b6:	4639      	mov	r1, r7
 80051b8:	4622      	mov	r2, r4
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ff1a 	bl	8004ff4 <__multiply>
 80051c0:	4639      	mov	r1, r7
 80051c2:	4680      	mov	r8, r0
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff fe47 	bl	8004e58 <_Bfree>
 80051ca:	4647      	mov	r7, r8
 80051cc:	106d      	asrs	r5, r5, #1
 80051ce:	d00b      	beq.n	80051e8 <__pow5mult+0xa0>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	b938      	cbnz	r0, 80051e4 <__pow5mult+0x9c>
 80051d4:	4622      	mov	r2, r4
 80051d6:	4621      	mov	r1, r4
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff ff0b 	bl	8004ff4 <__multiply>
 80051de:	6020      	str	r0, [r4, #0]
 80051e0:	f8c0 9000 	str.w	r9, [r0]
 80051e4:	4604      	mov	r4, r0
 80051e6:	e7e4      	b.n	80051b2 <__pow5mult+0x6a>
 80051e8:	4638      	mov	r0, r7
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	bf00      	nop
 80051f0:	080067d0 	.word	0x080067d0
 80051f4:	08006601 	.word	0x08006601
 80051f8:	08006684 	.word	0x08006684

080051fc <__lshift>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	460c      	mov	r4, r1
 8005202:	6849      	ldr	r1, [r1, #4]
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800520a:	68a3      	ldr	r3, [r4, #8]
 800520c:	4607      	mov	r7, r0
 800520e:	4691      	mov	r9, r2
 8005210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005214:	f108 0601 	add.w	r6, r8, #1
 8005218:	42b3      	cmp	r3, r6
 800521a:	db0b      	blt.n	8005234 <__lshift+0x38>
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff fddb 	bl	8004dd8 <_Balloc>
 8005222:	4605      	mov	r5, r0
 8005224:	b948      	cbnz	r0, 800523a <__lshift+0x3e>
 8005226:	4602      	mov	r2, r0
 8005228:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <__lshift+0xd8>)
 800522a:	482b      	ldr	r0, [pc, #172]	; (80052d8 <__lshift+0xdc>)
 800522c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005230:	f000 fbb8 	bl	80059a4 <__assert_func>
 8005234:	3101      	adds	r1, #1
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	e7ee      	b.n	8005218 <__lshift+0x1c>
 800523a:	2300      	movs	r3, #0
 800523c:	f100 0114 	add.w	r1, r0, #20
 8005240:	f100 0210 	add.w	r2, r0, #16
 8005244:	4618      	mov	r0, r3
 8005246:	4553      	cmp	r3, sl
 8005248:	db37      	blt.n	80052ba <__lshift+0xbe>
 800524a:	6920      	ldr	r0, [r4, #16]
 800524c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005250:	f104 0314 	add.w	r3, r4, #20
 8005254:	f019 091f 	ands.w	r9, r9, #31
 8005258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800525c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005260:	d02f      	beq.n	80052c2 <__lshift+0xc6>
 8005262:	f1c9 0e20 	rsb	lr, r9, #32
 8005266:	468a      	mov	sl, r1
 8005268:	f04f 0c00 	mov.w	ip, #0
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	fa02 f209 	lsl.w	r2, r2, r9
 8005272:	ea42 020c 	orr.w	r2, r2, ip
 8005276:	f84a 2b04 	str.w	r2, [sl], #4
 800527a:	f853 2b04 	ldr.w	r2, [r3], #4
 800527e:	4298      	cmp	r0, r3
 8005280:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005284:	d8f2      	bhi.n	800526c <__lshift+0x70>
 8005286:	1b03      	subs	r3, r0, r4
 8005288:	3b15      	subs	r3, #21
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	3304      	adds	r3, #4
 8005290:	f104 0215 	add.w	r2, r4, #21
 8005294:	4290      	cmp	r0, r2
 8005296:	bf38      	it	cc
 8005298:	2304      	movcc	r3, #4
 800529a:	f841 c003 	str.w	ip, [r1, r3]
 800529e:	f1bc 0f00 	cmp.w	ip, #0
 80052a2:	d001      	beq.n	80052a8 <__lshift+0xac>
 80052a4:	f108 0602 	add.w	r6, r8, #2
 80052a8:	3e01      	subs	r6, #1
 80052aa:	4638      	mov	r0, r7
 80052ac:	612e      	str	r6, [r5, #16]
 80052ae:	4621      	mov	r1, r4
 80052b0:	f7ff fdd2 	bl	8004e58 <_Bfree>
 80052b4:	4628      	mov	r0, r5
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80052be:	3301      	adds	r3, #1
 80052c0:	e7c1      	b.n	8005246 <__lshift+0x4a>
 80052c2:	3904      	subs	r1, #4
 80052c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80052cc:	4298      	cmp	r0, r3
 80052ce:	d8f9      	bhi.n	80052c4 <__lshift+0xc8>
 80052d0:	e7ea      	b.n	80052a8 <__lshift+0xac>
 80052d2:	bf00      	nop
 80052d4:	08006673 	.word	0x08006673
 80052d8:	08006684 	.word	0x08006684

080052dc <__mcmp>:
 80052dc:	b530      	push	{r4, r5, lr}
 80052de:	6902      	ldr	r2, [r0, #16]
 80052e0:	690c      	ldr	r4, [r1, #16]
 80052e2:	1b12      	subs	r2, r2, r4
 80052e4:	d10e      	bne.n	8005304 <__mcmp+0x28>
 80052e6:	f100 0314 	add.w	r3, r0, #20
 80052ea:	3114      	adds	r1, #20
 80052ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052fc:	42a5      	cmp	r5, r4
 80052fe:	d003      	beq.n	8005308 <__mcmp+0x2c>
 8005300:	d305      	bcc.n	800530e <__mcmp+0x32>
 8005302:	2201      	movs	r2, #1
 8005304:	4610      	mov	r0, r2
 8005306:	bd30      	pop	{r4, r5, pc}
 8005308:	4283      	cmp	r3, r0
 800530a:	d3f3      	bcc.n	80052f4 <__mcmp+0x18>
 800530c:	e7fa      	b.n	8005304 <__mcmp+0x28>
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	e7f7      	b.n	8005304 <__mcmp+0x28>

08005314 <__mdiff>:
 8005314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	460c      	mov	r4, r1
 800531a:	4606      	mov	r6, r0
 800531c:	4611      	mov	r1, r2
 800531e:	4620      	mov	r0, r4
 8005320:	4690      	mov	r8, r2
 8005322:	f7ff ffdb 	bl	80052dc <__mcmp>
 8005326:	1e05      	subs	r5, r0, #0
 8005328:	d110      	bne.n	800534c <__mdiff+0x38>
 800532a:	4629      	mov	r1, r5
 800532c:	4630      	mov	r0, r6
 800532e:	f7ff fd53 	bl	8004dd8 <_Balloc>
 8005332:	b930      	cbnz	r0, 8005342 <__mdiff+0x2e>
 8005334:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <__mdiff+0x10c>)
 8005336:	4602      	mov	r2, r0
 8005338:	f240 2132 	movw	r1, #562	; 0x232
 800533c:	4839      	ldr	r0, [pc, #228]	; (8005424 <__mdiff+0x110>)
 800533e:	f000 fb31 	bl	80059a4 <__assert_func>
 8005342:	2301      	movs	r3, #1
 8005344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	bfa4      	itt	ge
 800534e:	4643      	movge	r3, r8
 8005350:	46a0      	movge	r8, r4
 8005352:	4630      	mov	r0, r6
 8005354:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005358:	bfa6      	itte	ge
 800535a:	461c      	movge	r4, r3
 800535c:	2500      	movge	r5, #0
 800535e:	2501      	movlt	r5, #1
 8005360:	f7ff fd3a 	bl	8004dd8 <_Balloc>
 8005364:	b920      	cbnz	r0, 8005370 <__mdiff+0x5c>
 8005366:	4b2e      	ldr	r3, [pc, #184]	; (8005420 <__mdiff+0x10c>)
 8005368:	4602      	mov	r2, r0
 800536a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800536e:	e7e5      	b.n	800533c <__mdiff+0x28>
 8005370:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005374:	6926      	ldr	r6, [r4, #16]
 8005376:	60c5      	str	r5, [r0, #12]
 8005378:	f104 0914 	add.w	r9, r4, #20
 800537c:	f108 0514 	add.w	r5, r8, #20
 8005380:	f100 0e14 	add.w	lr, r0, #20
 8005384:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800538c:	f108 0210 	add.w	r2, r8, #16
 8005390:	46f2      	mov	sl, lr
 8005392:	2100      	movs	r1, #0
 8005394:	f859 3b04 	ldr.w	r3, [r9], #4
 8005398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800539c:	fa1f f883 	uxth.w	r8, r3
 80053a0:	fa11 f18b 	uxtah	r1, r1, fp
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	eba1 0808 	sub.w	r8, r1, r8
 80053aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80053ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80053b2:	fa1f f888 	uxth.w	r8, r8
 80053b6:	1419      	asrs	r1, r3, #16
 80053b8:	454e      	cmp	r6, r9
 80053ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80053be:	f84a 3b04 	str.w	r3, [sl], #4
 80053c2:	d8e7      	bhi.n	8005394 <__mdiff+0x80>
 80053c4:	1b33      	subs	r3, r6, r4
 80053c6:	3b15      	subs	r3, #21
 80053c8:	f023 0303 	bic.w	r3, r3, #3
 80053cc:	3304      	adds	r3, #4
 80053ce:	3415      	adds	r4, #21
 80053d0:	42a6      	cmp	r6, r4
 80053d2:	bf38      	it	cc
 80053d4:	2304      	movcc	r3, #4
 80053d6:	441d      	add	r5, r3
 80053d8:	4473      	add	r3, lr
 80053da:	469e      	mov	lr, r3
 80053dc:	462e      	mov	r6, r5
 80053de:	4566      	cmp	r6, ip
 80053e0:	d30e      	bcc.n	8005400 <__mdiff+0xec>
 80053e2:	f10c 0203 	add.w	r2, ip, #3
 80053e6:	1b52      	subs	r2, r2, r5
 80053e8:	f022 0203 	bic.w	r2, r2, #3
 80053ec:	3d03      	subs	r5, #3
 80053ee:	45ac      	cmp	ip, r5
 80053f0:	bf38      	it	cc
 80053f2:	2200      	movcc	r2, #0
 80053f4:	441a      	add	r2, r3
 80053f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80053fa:	b17b      	cbz	r3, 800541c <__mdiff+0x108>
 80053fc:	6107      	str	r7, [r0, #16]
 80053fe:	e7a3      	b.n	8005348 <__mdiff+0x34>
 8005400:	f856 8b04 	ldr.w	r8, [r6], #4
 8005404:	fa11 f288 	uxtah	r2, r1, r8
 8005408:	1414      	asrs	r4, r2, #16
 800540a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800540e:	b292      	uxth	r2, r2
 8005410:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005414:	f84e 2b04 	str.w	r2, [lr], #4
 8005418:	1421      	asrs	r1, r4, #16
 800541a:	e7e0      	b.n	80053de <__mdiff+0xca>
 800541c:	3f01      	subs	r7, #1
 800541e:	e7ea      	b.n	80053f6 <__mdiff+0xe2>
 8005420:	08006673 	.word	0x08006673
 8005424:	08006684 	.word	0x08006684

08005428 <__d2b>:
 8005428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4689      	mov	r9, r1
 800542e:	2101      	movs	r1, #1
 8005430:	ec57 6b10 	vmov	r6, r7, d0
 8005434:	4690      	mov	r8, r2
 8005436:	f7ff fccf 	bl	8004dd8 <_Balloc>
 800543a:	4604      	mov	r4, r0
 800543c:	b930      	cbnz	r0, 800544c <__d2b+0x24>
 800543e:	4602      	mov	r2, r0
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <__d2b+0xb0>)
 8005442:	4826      	ldr	r0, [pc, #152]	; (80054dc <__d2b+0xb4>)
 8005444:	f240 310a 	movw	r1, #778	; 0x30a
 8005448:	f000 faac 	bl	80059a4 <__assert_func>
 800544c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005454:	bb35      	cbnz	r5, 80054a4 <__d2b+0x7c>
 8005456:	2e00      	cmp	r6, #0
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	d028      	beq.n	80054ae <__d2b+0x86>
 800545c:	4668      	mov	r0, sp
 800545e:	9600      	str	r6, [sp, #0]
 8005460:	f7ff fd82 	bl	8004f68 <__lo0bits>
 8005464:	9900      	ldr	r1, [sp, #0]
 8005466:	b300      	cbz	r0, 80054aa <__d2b+0x82>
 8005468:	9a01      	ldr	r2, [sp, #4]
 800546a:	f1c0 0320 	rsb	r3, r0, #32
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	430b      	orrs	r3, r1
 8005474:	40c2      	lsrs	r2, r0
 8005476:	6163      	str	r3, [r4, #20]
 8005478:	9201      	str	r2, [sp, #4]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	61a3      	str	r3, [r4, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf14      	ite	ne
 8005482:	2202      	movne	r2, #2
 8005484:	2201      	moveq	r2, #1
 8005486:	6122      	str	r2, [r4, #16]
 8005488:	b1d5      	cbz	r5, 80054c0 <__d2b+0x98>
 800548a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800548e:	4405      	add	r5, r0
 8005490:	f8c9 5000 	str.w	r5, [r9]
 8005494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005498:	f8c8 0000 	str.w	r0, [r8]
 800549c:	4620      	mov	r0, r4
 800549e:	b003      	add	sp, #12
 80054a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a8:	e7d5      	b.n	8005456 <__d2b+0x2e>
 80054aa:	6161      	str	r1, [r4, #20]
 80054ac:	e7e5      	b.n	800547a <__d2b+0x52>
 80054ae:	a801      	add	r0, sp, #4
 80054b0:	f7ff fd5a 	bl	8004f68 <__lo0bits>
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	6163      	str	r3, [r4, #20]
 80054b8:	2201      	movs	r2, #1
 80054ba:	6122      	str	r2, [r4, #16]
 80054bc:	3020      	adds	r0, #32
 80054be:	e7e3      	b.n	8005488 <__d2b+0x60>
 80054c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054c8:	f8c9 0000 	str.w	r0, [r9]
 80054cc:	6918      	ldr	r0, [r3, #16]
 80054ce:	f7ff fd2b 	bl	8004f28 <__hi0bits>
 80054d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054d6:	e7df      	b.n	8005498 <__d2b+0x70>
 80054d8:	08006673 	.word	0x08006673
 80054dc:	08006684 	.word	0x08006684

080054e0 <_calloc_r>:
 80054e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e2:	fba1 2402 	umull	r2, r4, r1, r2
 80054e6:	b94c      	cbnz	r4, 80054fc <_calloc_r+0x1c>
 80054e8:	4611      	mov	r1, r2
 80054ea:	9201      	str	r2, [sp, #4]
 80054ec:	f000 f87a 	bl	80055e4 <_malloc_r>
 80054f0:	9a01      	ldr	r2, [sp, #4]
 80054f2:	4605      	mov	r5, r0
 80054f4:	b930      	cbnz	r0, 8005504 <_calloc_r+0x24>
 80054f6:	4628      	mov	r0, r5
 80054f8:	b003      	add	sp, #12
 80054fa:	bd30      	pop	{r4, r5, pc}
 80054fc:	220c      	movs	r2, #12
 80054fe:	6002      	str	r2, [r0, #0]
 8005500:	2500      	movs	r5, #0
 8005502:	e7f8      	b.n	80054f6 <_calloc_r+0x16>
 8005504:	4621      	mov	r1, r4
 8005506:	f7fe f9e5 	bl	80038d4 <memset>
 800550a:	e7f4      	b.n	80054f6 <_calloc_r+0x16>

0800550c <_free_r>:
 800550c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800550e:	2900      	cmp	r1, #0
 8005510:	d044      	beq.n	800559c <_free_r+0x90>
 8005512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005516:	9001      	str	r0, [sp, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f1a1 0404 	sub.w	r4, r1, #4
 800551e:	bfb8      	it	lt
 8005520:	18e4      	addlt	r4, r4, r3
 8005522:	f000 fa9b 	bl	8005a5c <__malloc_lock>
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <_free_r+0x94>)
 8005528:	9801      	ldr	r0, [sp, #4]
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	b933      	cbnz	r3, 800553c <_free_r+0x30>
 800552e:	6063      	str	r3, [r4, #4]
 8005530:	6014      	str	r4, [r2, #0]
 8005532:	b003      	add	sp, #12
 8005534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005538:	f000 ba96 	b.w	8005a68 <__malloc_unlock>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d908      	bls.n	8005552 <_free_r+0x46>
 8005540:	6825      	ldr	r5, [r4, #0]
 8005542:	1961      	adds	r1, r4, r5
 8005544:	428b      	cmp	r3, r1
 8005546:	bf01      	itttt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	1949      	addeq	r1, r1, r5
 800554e:	6021      	streq	r1, [r4, #0]
 8005550:	e7ed      	b.n	800552e <_free_r+0x22>
 8005552:	461a      	mov	r2, r3
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b10b      	cbz	r3, 800555c <_free_r+0x50>
 8005558:	42a3      	cmp	r3, r4
 800555a:	d9fa      	bls.n	8005552 <_free_r+0x46>
 800555c:	6811      	ldr	r1, [r2, #0]
 800555e:	1855      	adds	r5, r2, r1
 8005560:	42a5      	cmp	r5, r4
 8005562:	d10b      	bne.n	800557c <_free_r+0x70>
 8005564:	6824      	ldr	r4, [r4, #0]
 8005566:	4421      	add	r1, r4
 8005568:	1854      	adds	r4, r2, r1
 800556a:	42a3      	cmp	r3, r4
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	d1e0      	bne.n	8005532 <_free_r+0x26>
 8005570:	681c      	ldr	r4, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	6053      	str	r3, [r2, #4]
 8005576:	4421      	add	r1, r4
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	e7da      	b.n	8005532 <_free_r+0x26>
 800557c:	d902      	bls.n	8005584 <_free_r+0x78>
 800557e:	230c      	movs	r3, #12
 8005580:	6003      	str	r3, [r0, #0]
 8005582:	e7d6      	b.n	8005532 <_free_r+0x26>
 8005584:	6825      	ldr	r5, [r4, #0]
 8005586:	1961      	adds	r1, r4, r5
 8005588:	428b      	cmp	r3, r1
 800558a:	bf04      	itt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	bf04      	itt	eq
 8005594:	1949      	addeq	r1, r1, r5
 8005596:	6021      	streq	r1, [r4, #0]
 8005598:	6054      	str	r4, [r2, #4]
 800559a:	e7ca      	b.n	8005532 <_free_r+0x26>
 800559c:	b003      	add	sp, #12
 800559e:	bd30      	pop	{r4, r5, pc}
 80055a0:	20000414 	.word	0x20000414

080055a4 <sbrk_aligned>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4e0e      	ldr	r6, [pc, #56]	; (80055e0 <sbrk_aligned+0x3c>)
 80055a8:	460c      	mov	r4, r1
 80055aa:	6831      	ldr	r1, [r6, #0]
 80055ac:	4605      	mov	r5, r0
 80055ae:	b911      	cbnz	r1, 80055b6 <sbrk_aligned+0x12>
 80055b0:	f000 f9e8 	bl	8005984 <_sbrk_r>
 80055b4:	6030      	str	r0, [r6, #0]
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 f9e3 	bl	8005984 <_sbrk_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d00a      	beq.n	80055d8 <sbrk_aligned+0x34>
 80055c2:	1cc4      	adds	r4, r0, #3
 80055c4:	f024 0403 	bic.w	r4, r4, #3
 80055c8:	42a0      	cmp	r0, r4
 80055ca:	d007      	beq.n	80055dc <sbrk_aligned+0x38>
 80055cc:	1a21      	subs	r1, r4, r0
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f9d8 	bl	8005984 <_sbrk_r>
 80055d4:	3001      	adds	r0, #1
 80055d6:	d101      	bne.n	80055dc <sbrk_aligned+0x38>
 80055d8:	f04f 34ff 	mov.w	r4, #4294967295
 80055dc:	4620      	mov	r0, r4
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	20000418 	.word	0x20000418

080055e4 <_malloc_r>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	1ccd      	adds	r5, r1, #3
 80055ea:	f025 0503 	bic.w	r5, r5, #3
 80055ee:	3508      	adds	r5, #8
 80055f0:	2d0c      	cmp	r5, #12
 80055f2:	bf38      	it	cc
 80055f4:	250c      	movcc	r5, #12
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	4607      	mov	r7, r0
 80055fa:	db01      	blt.n	8005600 <_malloc_r+0x1c>
 80055fc:	42a9      	cmp	r1, r5
 80055fe:	d905      	bls.n	800560c <_malloc_r+0x28>
 8005600:	230c      	movs	r3, #12
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	2600      	movs	r6, #0
 8005606:	4630      	mov	r0, r6
 8005608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800560c:	4e2e      	ldr	r6, [pc, #184]	; (80056c8 <_malloc_r+0xe4>)
 800560e:	f000 fa25 	bl	8005a5c <__malloc_lock>
 8005612:	6833      	ldr	r3, [r6, #0]
 8005614:	461c      	mov	r4, r3
 8005616:	bb34      	cbnz	r4, 8005666 <_malloc_r+0x82>
 8005618:	4629      	mov	r1, r5
 800561a:	4638      	mov	r0, r7
 800561c:	f7ff ffc2 	bl	80055a4 <sbrk_aligned>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	4604      	mov	r4, r0
 8005624:	d14d      	bne.n	80056c2 <_malloc_r+0xde>
 8005626:	6834      	ldr	r4, [r6, #0]
 8005628:	4626      	mov	r6, r4
 800562a:	2e00      	cmp	r6, #0
 800562c:	d140      	bne.n	80056b0 <_malloc_r+0xcc>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	4631      	mov	r1, r6
 8005632:	4638      	mov	r0, r7
 8005634:	eb04 0803 	add.w	r8, r4, r3
 8005638:	f000 f9a4 	bl	8005984 <_sbrk_r>
 800563c:	4580      	cmp	r8, r0
 800563e:	d13a      	bne.n	80056b6 <_malloc_r+0xd2>
 8005640:	6821      	ldr	r1, [r4, #0]
 8005642:	3503      	adds	r5, #3
 8005644:	1a6d      	subs	r5, r5, r1
 8005646:	f025 0503 	bic.w	r5, r5, #3
 800564a:	3508      	adds	r5, #8
 800564c:	2d0c      	cmp	r5, #12
 800564e:	bf38      	it	cc
 8005650:	250c      	movcc	r5, #12
 8005652:	4629      	mov	r1, r5
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ffa5 	bl	80055a4 <sbrk_aligned>
 800565a:	3001      	adds	r0, #1
 800565c:	d02b      	beq.n	80056b6 <_malloc_r+0xd2>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	442b      	add	r3, r5
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e00e      	b.n	8005684 <_malloc_r+0xa0>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	1b52      	subs	r2, r2, r5
 800566a:	d41e      	bmi.n	80056aa <_malloc_r+0xc6>
 800566c:	2a0b      	cmp	r2, #11
 800566e:	d916      	bls.n	800569e <_malloc_r+0xba>
 8005670:	1961      	adds	r1, r4, r5
 8005672:	42a3      	cmp	r3, r4
 8005674:	6025      	str	r5, [r4, #0]
 8005676:	bf18      	it	ne
 8005678:	6059      	strne	r1, [r3, #4]
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	bf08      	it	eq
 800567e:	6031      	streq	r1, [r6, #0]
 8005680:	5162      	str	r2, [r4, r5]
 8005682:	604b      	str	r3, [r1, #4]
 8005684:	4638      	mov	r0, r7
 8005686:	f104 060b 	add.w	r6, r4, #11
 800568a:	f000 f9ed 	bl	8005a68 <__malloc_unlock>
 800568e:	f026 0607 	bic.w	r6, r6, #7
 8005692:	1d23      	adds	r3, r4, #4
 8005694:	1af2      	subs	r2, r6, r3
 8005696:	d0b6      	beq.n	8005606 <_malloc_r+0x22>
 8005698:	1b9b      	subs	r3, r3, r6
 800569a:	50a3      	str	r3, [r4, r2]
 800569c:	e7b3      	b.n	8005606 <_malloc_r+0x22>
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	bf0c      	ite	eq
 80056a4:	6032      	streq	r2, [r6, #0]
 80056a6:	605a      	strne	r2, [r3, #4]
 80056a8:	e7ec      	b.n	8005684 <_malloc_r+0xa0>
 80056aa:	4623      	mov	r3, r4
 80056ac:	6864      	ldr	r4, [r4, #4]
 80056ae:	e7b2      	b.n	8005616 <_malloc_r+0x32>
 80056b0:	4634      	mov	r4, r6
 80056b2:	6876      	ldr	r6, [r6, #4]
 80056b4:	e7b9      	b.n	800562a <_malloc_r+0x46>
 80056b6:	230c      	movs	r3, #12
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4638      	mov	r0, r7
 80056bc:	f000 f9d4 	bl	8005a68 <__malloc_unlock>
 80056c0:	e7a1      	b.n	8005606 <_malloc_r+0x22>
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	e7de      	b.n	8005684 <_malloc_r+0xa0>
 80056c6:	bf00      	nop
 80056c8:	20000414 	.word	0x20000414

080056cc <__ssputs_r>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	688e      	ldr	r6, [r1, #8]
 80056d2:	429e      	cmp	r6, r3
 80056d4:	4682      	mov	sl, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4690      	mov	r8, r2
 80056da:	461f      	mov	r7, r3
 80056dc:	d838      	bhi.n	8005750 <__ssputs_r+0x84>
 80056de:	898a      	ldrh	r2, [r1, #12]
 80056e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056e4:	d032      	beq.n	800574c <__ssputs_r+0x80>
 80056e6:	6825      	ldr	r5, [r4, #0]
 80056e8:	6909      	ldr	r1, [r1, #16]
 80056ea:	eba5 0901 	sub.w	r9, r5, r1
 80056ee:	6965      	ldr	r5, [r4, #20]
 80056f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056f8:	3301      	adds	r3, #1
 80056fa:	444b      	add	r3, r9
 80056fc:	106d      	asrs	r5, r5, #1
 80056fe:	429d      	cmp	r5, r3
 8005700:	bf38      	it	cc
 8005702:	461d      	movcc	r5, r3
 8005704:	0553      	lsls	r3, r2, #21
 8005706:	d531      	bpl.n	800576c <__ssputs_r+0xa0>
 8005708:	4629      	mov	r1, r5
 800570a:	f7ff ff6b 	bl	80055e4 <_malloc_r>
 800570e:	4606      	mov	r6, r0
 8005710:	b950      	cbnz	r0, 8005728 <__ssputs_r+0x5c>
 8005712:	230c      	movs	r3, #12
 8005714:	f8ca 3000 	str.w	r3, [sl]
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	6921      	ldr	r1, [r4, #16]
 800572a:	464a      	mov	r2, r9
 800572c:	f7ff fb46 	bl	8004dbc <memcpy>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	6126      	str	r6, [r4, #16]
 800573e:	6165      	str	r5, [r4, #20]
 8005740:	444e      	add	r6, r9
 8005742:	eba5 0509 	sub.w	r5, r5, r9
 8005746:	6026      	str	r6, [r4, #0]
 8005748:	60a5      	str	r5, [r4, #8]
 800574a:	463e      	mov	r6, r7
 800574c:	42be      	cmp	r6, r7
 800574e:	d900      	bls.n	8005752 <__ssputs_r+0x86>
 8005750:	463e      	mov	r6, r7
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	4632      	mov	r2, r6
 8005756:	4641      	mov	r1, r8
 8005758:	f000 f966 	bl	8005a28 <memmove>
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	1b9b      	subs	r3, r3, r6
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	4433      	add	r3, r6
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	2000      	movs	r0, #0
 800576a:	e7db      	b.n	8005724 <__ssputs_r+0x58>
 800576c:	462a      	mov	r2, r5
 800576e:	f000 f981 	bl	8005a74 <_realloc_r>
 8005772:	4606      	mov	r6, r0
 8005774:	2800      	cmp	r0, #0
 8005776:	d1e1      	bne.n	800573c <__ssputs_r+0x70>
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	4650      	mov	r0, sl
 800577c:	f7ff fec6 	bl	800550c <_free_r>
 8005780:	e7c7      	b.n	8005712 <__ssputs_r+0x46>
	...

08005784 <_svfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	4698      	mov	r8, r3
 800578a:	898b      	ldrh	r3, [r1, #12]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	b09d      	sub	sp, #116	; 0x74
 8005790:	4607      	mov	r7, r0
 8005792:	460d      	mov	r5, r1
 8005794:	4614      	mov	r4, r2
 8005796:	d50e      	bpl.n	80057b6 <_svfiprintf_r+0x32>
 8005798:	690b      	ldr	r3, [r1, #16]
 800579a:	b963      	cbnz	r3, 80057b6 <_svfiprintf_r+0x32>
 800579c:	2140      	movs	r1, #64	; 0x40
 800579e:	f7ff ff21 	bl	80055e4 <_malloc_r>
 80057a2:	6028      	str	r0, [r5, #0]
 80057a4:	6128      	str	r0, [r5, #16]
 80057a6:	b920      	cbnz	r0, 80057b2 <_svfiprintf_r+0x2e>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e0d1      	b.n	8005956 <_svfiprintf_r+0x1d2>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	616b      	str	r3, [r5, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ba:	2320      	movs	r3, #32
 80057bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057c4:	2330      	movs	r3, #48	; 0x30
 80057c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005970 <_svfiprintf_r+0x1ec>
 80057ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ce:	f04f 0901 	mov.w	r9, #1
 80057d2:	4623      	mov	r3, r4
 80057d4:	469a      	mov	sl, r3
 80057d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057da:	b10a      	cbz	r2, 80057e0 <_svfiprintf_r+0x5c>
 80057dc:	2a25      	cmp	r2, #37	; 0x25
 80057de:	d1f9      	bne.n	80057d4 <_svfiprintf_r+0x50>
 80057e0:	ebba 0b04 	subs.w	fp, sl, r4
 80057e4:	d00b      	beq.n	80057fe <_svfiprintf_r+0x7a>
 80057e6:	465b      	mov	r3, fp
 80057e8:	4622      	mov	r2, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ff6d 	bl	80056cc <__ssputs_r>
 80057f2:	3001      	adds	r0, #1
 80057f4:	f000 80aa 	beq.w	800594c <_svfiprintf_r+0x1c8>
 80057f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057fa:	445a      	add	r2, fp
 80057fc:	9209      	str	r2, [sp, #36]	; 0x24
 80057fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80a2 	beq.w	800594c <_svfiprintf_r+0x1c8>
 8005808:	2300      	movs	r3, #0
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005812:	f10a 0a01 	add.w	sl, sl, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	9307      	str	r3, [sp, #28]
 800581a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800581e:	931a      	str	r3, [sp, #104]	; 0x68
 8005820:	4654      	mov	r4, sl
 8005822:	2205      	movs	r2, #5
 8005824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005828:	4851      	ldr	r0, [pc, #324]	; (8005970 <_svfiprintf_r+0x1ec>)
 800582a:	f7fa fd11 	bl	8000250 <memchr>
 800582e:	9a04      	ldr	r2, [sp, #16]
 8005830:	b9d8      	cbnz	r0, 800586a <_svfiprintf_r+0xe6>
 8005832:	06d0      	lsls	r0, r2, #27
 8005834:	bf44      	itt	mi
 8005836:	2320      	movmi	r3, #32
 8005838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800583c:	0711      	lsls	r1, r2, #28
 800583e:	bf44      	itt	mi
 8005840:	232b      	movmi	r3, #43	; 0x2b
 8005842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005846:	f89a 3000 	ldrb.w	r3, [sl]
 800584a:	2b2a      	cmp	r3, #42	; 0x2a
 800584c:	d015      	beq.n	800587a <_svfiprintf_r+0xf6>
 800584e:	9a07      	ldr	r2, [sp, #28]
 8005850:	4654      	mov	r4, sl
 8005852:	2000      	movs	r0, #0
 8005854:	f04f 0c0a 	mov.w	ip, #10
 8005858:	4621      	mov	r1, r4
 800585a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800585e:	3b30      	subs	r3, #48	; 0x30
 8005860:	2b09      	cmp	r3, #9
 8005862:	d94e      	bls.n	8005902 <_svfiprintf_r+0x17e>
 8005864:	b1b0      	cbz	r0, 8005894 <_svfiprintf_r+0x110>
 8005866:	9207      	str	r2, [sp, #28]
 8005868:	e014      	b.n	8005894 <_svfiprintf_r+0x110>
 800586a:	eba0 0308 	sub.w	r3, r0, r8
 800586e:	fa09 f303 	lsl.w	r3, r9, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	9304      	str	r3, [sp, #16]
 8005876:	46a2      	mov	sl, r4
 8005878:	e7d2      	b.n	8005820 <_svfiprintf_r+0x9c>
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	1d19      	adds	r1, r3, #4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	9103      	str	r1, [sp, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfbb      	ittet	lt
 8005886:	425b      	neglt	r3, r3
 8005888:	f042 0202 	orrlt.w	r2, r2, #2
 800588c:	9307      	strge	r3, [sp, #28]
 800588e:	9307      	strlt	r3, [sp, #28]
 8005890:	bfb8      	it	lt
 8005892:	9204      	strlt	r2, [sp, #16]
 8005894:	7823      	ldrb	r3, [r4, #0]
 8005896:	2b2e      	cmp	r3, #46	; 0x2e
 8005898:	d10c      	bne.n	80058b4 <_svfiprintf_r+0x130>
 800589a:	7863      	ldrb	r3, [r4, #1]
 800589c:	2b2a      	cmp	r3, #42	; 0x2a
 800589e:	d135      	bne.n	800590c <_svfiprintf_r+0x188>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9203      	str	r2, [sp, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfb8      	it	lt
 80058ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80058b0:	3402      	adds	r4, #2
 80058b2:	9305      	str	r3, [sp, #20]
 80058b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005980 <_svfiprintf_r+0x1fc>
 80058b8:	7821      	ldrb	r1, [r4, #0]
 80058ba:	2203      	movs	r2, #3
 80058bc:	4650      	mov	r0, sl
 80058be:	f7fa fcc7 	bl	8000250 <memchr>
 80058c2:	b140      	cbz	r0, 80058d6 <_svfiprintf_r+0x152>
 80058c4:	2340      	movs	r3, #64	; 0x40
 80058c6:	eba0 000a 	sub.w	r0, r0, sl
 80058ca:	fa03 f000 	lsl.w	r0, r3, r0
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	4303      	orrs	r3, r0
 80058d2:	3401      	adds	r4, #1
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058da:	4826      	ldr	r0, [pc, #152]	; (8005974 <_svfiprintf_r+0x1f0>)
 80058dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058e0:	2206      	movs	r2, #6
 80058e2:	f7fa fcb5 	bl	8000250 <memchr>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d038      	beq.n	800595c <_svfiprintf_r+0x1d8>
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <_svfiprintf_r+0x1f4>)
 80058ec:	bb1b      	cbnz	r3, 8005936 <_svfiprintf_r+0x1b2>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	3307      	adds	r3, #7
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	3308      	adds	r3, #8
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	4433      	add	r3, r6
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	e767      	b.n	80057d2 <_svfiprintf_r+0x4e>
 8005902:	fb0c 3202 	mla	r2, ip, r2, r3
 8005906:	460c      	mov	r4, r1
 8005908:	2001      	movs	r0, #1
 800590a:	e7a5      	b.n	8005858 <_svfiprintf_r+0xd4>
 800590c:	2300      	movs	r3, #0
 800590e:	3401      	adds	r4, #1
 8005910:	9305      	str	r3, [sp, #20]
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0c0a 	mov.w	ip, #10
 8005918:	4620      	mov	r0, r4
 800591a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800591e:	3a30      	subs	r2, #48	; 0x30
 8005920:	2a09      	cmp	r2, #9
 8005922:	d903      	bls.n	800592c <_svfiprintf_r+0x1a8>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0c5      	beq.n	80058b4 <_svfiprintf_r+0x130>
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	e7c3      	b.n	80058b4 <_svfiprintf_r+0x130>
 800592c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005930:	4604      	mov	r4, r0
 8005932:	2301      	movs	r3, #1
 8005934:	e7f0      	b.n	8005918 <_svfiprintf_r+0x194>
 8005936:	ab03      	add	r3, sp, #12
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	462a      	mov	r2, r5
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <_svfiprintf_r+0x1f8>)
 800593e:	a904      	add	r1, sp, #16
 8005940:	4638      	mov	r0, r7
 8005942:	f7fe f861 	bl	8003a08 <_printf_float>
 8005946:	1c42      	adds	r2, r0, #1
 8005948:	4606      	mov	r6, r0
 800594a:	d1d6      	bne.n	80058fa <_svfiprintf_r+0x176>
 800594c:	89ab      	ldrh	r3, [r5, #12]
 800594e:	065b      	lsls	r3, r3, #25
 8005950:	f53f af2c 	bmi.w	80057ac <_svfiprintf_r+0x28>
 8005954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005956:	b01d      	add	sp, #116	; 0x74
 8005958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	ab03      	add	r3, sp, #12
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	462a      	mov	r2, r5
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <_svfiprintf_r+0x1f8>)
 8005964:	a904      	add	r1, sp, #16
 8005966:	4638      	mov	r0, r7
 8005968:	f7fe fada 	bl	8003f20 <_printf_i>
 800596c:	e7eb      	b.n	8005946 <_svfiprintf_r+0x1c2>
 800596e:	bf00      	nop
 8005970:	080067dc 	.word	0x080067dc
 8005974:	080067e6 	.word	0x080067e6
 8005978:	08003a09 	.word	0x08003a09
 800597c:	080056cd 	.word	0x080056cd
 8005980:	080067e2 	.word	0x080067e2

08005984 <_sbrk_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	; (80059a0 <_sbrk_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb f9a6 	bl	8000ce0 <_sbrk>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_sbrk_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_sbrk_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	2000041c 	.word	0x2000041c

080059a4 <__assert_func>:
 80059a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059a6:	4614      	mov	r4, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <__assert_func+0x2c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4605      	mov	r5, r0
 80059b0:	68d8      	ldr	r0, [r3, #12]
 80059b2:	b14c      	cbz	r4, 80059c8 <__assert_func+0x24>
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <__assert_func+0x30>)
 80059b6:	9100      	str	r1, [sp, #0]
 80059b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059bc:	4906      	ldr	r1, [pc, #24]	; (80059d8 <__assert_func+0x34>)
 80059be:	462b      	mov	r3, r5
 80059c0:	f000 f80e 	bl	80059e0 <fiprintf>
 80059c4:	f000 faac 	bl	8005f20 <abort>
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <__assert_func+0x38>)
 80059ca:	461c      	mov	r4, r3
 80059cc:	e7f3      	b.n	80059b6 <__assert_func+0x12>
 80059ce:	bf00      	nop
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	080067ed 	.word	0x080067ed
 80059d8:	080067fa 	.word	0x080067fa
 80059dc:	08006828 	.word	0x08006828

080059e0 <fiprintf>:
 80059e0:	b40e      	push	{r1, r2, r3}
 80059e2:	b503      	push	{r0, r1, lr}
 80059e4:	4601      	mov	r1, r0
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	4805      	ldr	r0, [pc, #20]	; (8005a00 <fiprintf+0x20>)
 80059ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ee:	6800      	ldr	r0, [r0, #0]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	f000 f897 	bl	8005b24 <_vfiprintf_r>
 80059f6:	b002      	add	sp, #8
 80059f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059fc:	b003      	add	sp, #12
 80059fe:	4770      	bx	lr
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <__ascii_mbtowc>:
 8005a04:	b082      	sub	sp, #8
 8005a06:	b901      	cbnz	r1, 8005a0a <__ascii_mbtowc+0x6>
 8005a08:	a901      	add	r1, sp, #4
 8005a0a:	b142      	cbz	r2, 8005a1e <__ascii_mbtowc+0x1a>
 8005a0c:	b14b      	cbz	r3, 8005a22 <__ascii_mbtowc+0x1e>
 8005a0e:	7813      	ldrb	r3, [r2, #0]
 8005a10:	600b      	str	r3, [r1, #0]
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	1e10      	subs	r0, r2, #0
 8005a16:	bf18      	it	ne
 8005a18:	2001      	movne	r0, #1
 8005a1a:	b002      	add	sp, #8
 8005a1c:	4770      	bx	lr
 8005a1e:	4610      	mov	r0, r2
 8005a20:	e7fb      	b.n	8005a1a <__ascii_mbtowc+0x16>
 8005a22:	f06f 0001 	mvn.w	r0, #1
 8005a26:	e7f8      	b.n	8005a1a <__ascii_mbtowc+0x16>

08005a28 <memmove>:
 8005a28:	4288      	cmp	r0, r1
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	eb01 0402 	add.w	r4, r1, r2
 8005a30:	d902      	bls.n	8005a38 <memmove+0x10>
 8005a32:	4284      	cmp	r4, r0
 8005a34:	4623      	mov	r3, r4
 8005a36:	d807      	bhi.n	8005a48 <memmove+0x20>
 8005a38:	1e43      	subs	r3, r0, #1
 8005a3a:	42a1      	cmp	r1, r4
 8005a3c:	d008      	beq.n	8005a50 <memmove+0x28>
 8005a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a46:	e7f8      	b.n	8005a3a <memmove+0x12>
 8005a48:	4402      	add	r2, r0
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	d100      	bne.n	8005a52 <memmove+0x2a>
 8005a50:	bd10      	pop	{r4, pc}
 8005a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a5a:	e7f7      	b.n	8005a4c <memmove+0x24>

08005a5c <__malloc_lock>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__malloc_lock+0x8>)
 8005a5e:	f000 bc1f 	b.w	80062a0 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000420 	.word	0x20000420

08005a68 <__malloc_unlock>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__malloc_unlock+0x8>)
 8005a6a:	f000 bc1a 	b.w	80062a2 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000420 	.word	0x20000420

08005a74 <_realloc_r>:
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	4680      	mov	r8, r0
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	b921      	cbnz	r1, 8005a8a <_realloc_r+0x16>
 8005a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	4611      	mov	r1, r2
 8005a86:	f7ff bdad 	b.w	80055e4 <_malloc_r>
 8005a8a:	b92a      	cbnz	r2, 8005a98 <_realloc_r+0x24>
 8005a8c:	f7ff fd3e 	bl	800550c <_free_r>
 8005a90:	4625      	mov	r5, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a98:	f000 fc6a 	bl	8006370 <_malloc_usable_size_r>
 8005a9c:	4284      	cmp	r4, r0
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	d802      	bhi.n	8005aa8 <_realloc_r+0x34>
 8005aa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aa6:	d812      	bhi.n	8005ace <_realloc_r+0x5a>
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4640      	mov	r0, r8
 8005aac:	f7ff fd9a 	bl	80055e4 <_malloc_r>
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d0ed      	beq.n	8005a92 <_realloc_r+0x1e>
 8005ab6:	42bc      	cmp	r4, r7
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4631      	mov	r1, r6
 8005abc:	bf28      	it	cs
 8005abe:	463a      	movcs	r2, r7
 8005ac0:	f7ff f97c 	bl	8004dbc <memcpy>
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f7ff fd20 	bl	800550c <_free_r>
 8005acc:	e7e1      	b.n	8005a92 <_realloc_r+0x1e>
 8005ace:	4635      	mov	r5, r6
 8005ad0:	e7df      	b.n	8005a92 <_realloc_r+0x1e>

08005ad2 <__sfputc_r>:
 8005ad2:	6893      	ldr	r3, [r2, #8]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	b410      	push	{r4}
 8005ada:	6093      	str	r3, [r2, #8]
 8005adc:	da08      	bge.n	8005af0 <__sfputc_r+0x1e>
 8005ade:	6994      	ldr	r4, [r2, #24]
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	db01      	blt.n	8005ae8 <__sfputc_r+0x16>
 8005ae4:	290a      	cmp	r1, #10
 8005ae6:	d103      	bne.n	8005af0 <__sfputc_r+0x1e>
 8005ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aec:	f000 b94a 	b.w	8005d84 <__swbuf_r>
 8005af0:	6813      	ldr	r3, [r2, #0]
 8005af2:	1c58      	adds	r0, r3, #1
 8005af4:	6010      	str	r0, [r2, #0]
 8005af6:	7019      	strb	r1, [r3, #0]
 8005af8:	4608      	mov	r0, r1
 8005afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <__sfputs_r>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	4614      	mov	r4, r2
 8005b08:	18d5      	adds	r5, r2, r3
 8005b0a:	42ac      	cmp	r4, r5
 8005b0c:	d101      	bne.n	8005b12 <__sfputs_r+0x12>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e007      	b.n	8005b22 <__sfputs_r+0x22>
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	463a      	mov	r2, r7
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ffda 	bl	8005ad2 <__sfputc_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d1f3      	bne.n	8005b0a <__sfputs_r+0xa>
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b24 <_vfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	460d      	mov	r5, r1
 8005b2a:	b09d      	sub	sp, #116	; 0x74
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	4698      	mov	r8, r3
 8005b30:	4606      	mov	r6, r0
 8005b32:	b118      	cbz	r0, 8005b3c <_vfiprintf_r+0x18>
 8005b34:	6983      	ldr	r3, [r0, #24]
 8005b36:	b90b      	cbnz	r3, 8005b3c <_vfiprintf_r+0x18>
 8005b38:	f000 fb14 	bl	8006164 <__sinit>
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <_vfiprintf_r+0x240>)
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	d11b      	bne.n	8005b7a <_vfiprintf_r+0x56>
 8005b42:	6875      	ldr	r5, [r6, #4]
 8005b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d405      	bmi.n	8005b56 <_vfiprintf_r+0x32>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_vfiprintf_r+0x32>
 8005b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b52:	f000 fba5 	bl	80062a0 <__retarget_lock_acquire_recursive>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	d501      	bpl.n	8005b60 <_vfiprintf_r+0x3c>
 8005b5c:	692b      	ldr	r3, [r5, #16]
 8005b5e:	b9eb      	cbnz	r3, 8005b9c <_vfiprintf_r+0x78>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 f96e 	bl	8005e44 <__swsetup_r>
 8005b68:	b1c0      	cbz	r0, 8005b9c <_vfiprintf_r+0x78>
 8005b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b6c:	07dc      	lsls	r4, r3, #31
 8005b6e:	d50e      	bpl.n	8005b8e <_vfiprintf_r+0x6a>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	b01d      	add	sp, #116	; 0x74
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <_vfiprintf_r+0x244>)
 8005b7c:	429d      	cmp	r5, r3
 8005b7e:	d101      	bne.n	8005b84 <_vfiprintf_r+0x60>
 8005b80:	68b5      	ldr	r5, [r6, #8]
 8005b82:	e7df      	b.n	8005b44 <_vfiprintf_r+0x20>
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <_vfiprintf_r+0x248>)
 8005b86:	429d      	cmp	r5, r3
 8005b88:	bf08      	it	eq
 8005b8a:	68f5      	ldreq	r5, [r6, #12]
 8005b8c:	e7da      	b.n	8005b44 <_vfiprintf_r+0x20>
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	0598      	lsls	r0, r3, #22
 8005b92:	d4ed      	bmi.n	8005b70 <_vfiprintf_r+0x4c>
 8005b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b96:	f000 fb84 	bl	80062a2 <__retarget_lock_release_recursive>
 8005b9a:	e7e9      	b.n	8005b70 <_vfiprintf_r+0x4c>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005baa:	2330      	movs	r3, #48	; 0x30
 8005bac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d70 <_vfiprintf_r+0x24c>
 8005bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb4:	f04f 0901 	mov.w	r9, #1
 8005bb8:	4623      	mov	r3, r4
 8005bba:	469a      	mov	sl, r3
 8005bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_vfiprintf_r+0xa2>
 8005bc2:	2a25      	cmp	r2, #37	; 0x25
 8005bc4:	d1f9      	bne.n	8005bba <_vfiprintf_r+0x96>
 8005bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005bca:	d00b      	beq.n	8005be4 <_vfiprintf_r+0xc0>
 8005bcc:	465b      	mov	r3, fp
 8005bce:	4622      	mov	r2, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ff94 	bl	8005b00 <__sfputs_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f000 80aa 	beq.w	8005d32 <_vfiprintf_r+0x20e>
 8005bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be0:	445a      	add	r2, fp
 8005be2:	9209      	str	r2, [sp, #36]	; 0x24
 8005be4:	f89a 3000 	ldrb.w	r3, [sl]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a2 	beq.w	8005d32 <_vfiprintf_r+0x20e>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf8:	f10a 0a01 	add.w	sl, sl, #1
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c04:	931a      	str	r3, [sp, #104]	; 0x68
 8005c06:	4654      	mov	r4, sl
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0e:	4858      	ldr	r0, [pc, #352]	; (8005d70 <_vfiprintf_r+0x24c>)
 8005c10:	f7fa fb1e 	bl	8000250 <memchr>
 8005c14:	9a04      	ldr	r2, [sp, #16]
 8005c16:	b9d8      	cbnz	r0, 8005c50 <_vfiprintf_r+0x12c>
 8005c18:	06d1      	lsls	r1, r2, #27
 8005c1a:	bf44      	itt	mi
 8005c1c:	2320      	movmi	r3, #32
 8005c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c22:	0713      	lsls	r3, r2, #28
 8005c24:	bf44      	itt	mi
 8005c26:	232b      	movmi	r3, #43	; 0x2b
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c30:	2b2a      	cmp	r3, #42	; 0x2a
 8005c32:	d015      	beq.n	8005c60 <_vfiprintf_r+0x13c>
 8005c34:	9a07      	ldr	r2, [sp, #28]
 8005c36:	4654      	mov	r4, sl
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f04f 0c0a 	mov.w	ip, #10
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c44:	3b30      	subs	r3, #48	; 0x30
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d94e      	bls.n	8005ce8 <_vfiprintf_r+0x1c4>
 8005c4a:	b1b0      	cbz	r0, 8005c7a <_vfiprintf_r+0x156>
 8005c4c:	9207      	str	r2, [sp, #28]
 8005c4e:	e014      	b.n	8005c7a <_vfiprintf_r+0x156>
 8005c50:	eba0 0308 	sub.w	r3, r0, r8
 8005c54:	fa09 f303 	lsl.w	r3, r9, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	46a2      	mov	sl, r4
 8005c5e:	e7d2      	b.n	8005c06 <_vfiprintf_r+0xe2>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d19      	adds	r1, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfbb      	ittet	lt
 8005c6c:	425b      	neglt	r3, r3
 8005c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c72:	9307      	strge	r3, [sp, #28]
 8005c74:	9307      	strlt	r3, [sp, #28]
 8005c76:	bfb8      	it	lt
 8005c78:	9204      	strlt	r2, [sp, #16]
 8005c7a:	7823      	ldrb	r3, [r4, #0]
 8005c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7e:	d10c      	bne.n	8005c9a <_vfiprintf_r+0x176>
 8005c80:	7863      	ldrb	r3, [r4, #1]
 8005c82:	2b2a      	cmp	r3, #42	; 0x2a
 8005c84:	d135      	bne.n	8005cf2 <_vfiprintf_r+0x1ce>
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	9203      	str	r2, [sp, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfb8      	it	lt
 8005c92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c96:	3402      	adds	r4, #2
 8005c98:	9305      	str	r3, [sp, #20]
 8005c9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d80 <_vfiprintf_r+0x25c>
 8005c9e:	7821      	ldrb	r1, [r4, #0]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	f7fa fad4 	bl	8000250 <memchr>
 8005ca8:	b140      	cbz	r0, 8005cbc <_vfiprintf_r+0x198>
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	eba0 000a 	sub.w	r0, r0, sl
 8005cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	4303      	orrs	r3, r0
 8005cb8:	3401      	adds	r4, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	482c      	ldr	r0, [pc, #176]	; (8005d74 <_vfiprintf_r+0x250>)
 8005cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc6:	2206      	movs	r2, #6
 8005cc8:	f7fa fac2 	bl	8000250 <memchr>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d03f      	beq.n	8005d50 <_vfiprintf_r+0x22c>
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <_vfiprintf_r+0x254>)
 8005cd2:	bb1b      	cbnz	r3, 8005d1c <_vfiprintf_r+0x1f8>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	3307      	adds	r3, #7
 8005cd8:	f023 0307 	bic.w	r3, r3, #7
 8005cdc:	3308      	adds	r3, #8
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	443b      	add	r3, r7
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	e767      	b.n	8005bb8 <_vfiprintf_r+0x94>
 8005ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cec:	460c      	mov	r4, r1
 8005cee:	2001      	movs	r0, #1
 8005cf0:	e7a5      	b.n	8005c3e <_vfiprintf_r+0x11a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	3401      	adds	r4, #1
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f04f 0c0a 	mov.w	ip, #10
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d04:	3a30      	subs	r2, #48	; 0x30
 8005d06:	2a09      	cmp	r2, #9
 8005d08:	d903      	bls.n	8005d12 <_vfiprintf_r+0x1ee>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0c5      	beq.n	8005c9a <_vfiprintf_r+0x176>
 8005d0e:	9105      	str	r1, [sp, #20]
 8005d10:	e7c3      	b.n	8005c9a <_vfiprintf_r+0x176>
 8005d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d16:	4604      	mov	r4, r0
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e7f0      	b.n	8005cfe <_vfiprintf_r+0x1da>
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <_vfiprintf_r+0x258>)
 8005d24:	a904      	add	r1, sp, #16
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7fd fe6e 	bl	8003a08 <_printf_float>
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	1c78      	adds	r0, r7, #1
 8005d30:	d1d6      	bne.n	8005ce0 <_vfiprintf_r+0x1bc>
 8005d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d34:	07d9      	lsls	r1, r3, #31
 8005d36:	d405      	bmi.n	8005d44 <_vfiprintf_r+0x220>
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	059a      	lsls	r2, r3, #22
 8005d3c:	d402      	bmi.n	8005d44 <_vfiprintf_r+0x220>
 8005d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d40:	f000 faaf 	bl	80062a2 <__retarget_lock_release_recursive>
 8005d44:	89ab      	ldrh	r3, [r5, #12]
 8005d46:	065b      	lsls	r3, r3, #25
 8005d48:	f53f af12 	bmi.w	8005b70 <_vfiprintf_r+0x4c>
 8005d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4e:	e711      	b.n	8005b74 <_vfiprintf_r+0x50>
 8005d50:	ab03      	add	r3, sp, #12
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	462a      	mov	r2, r5
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_vfiprintf_r+0x258>)
 8005d58:	a904      	add	r1, sp, #16
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f7fe f8e0 	bl	8003f20 <_printf_i>
 8005d60:	e7e4      	b.n	8005d2c <_vfiprintf_r+0x208>
 8005d62:	bf00      	nop
 8005d64:	08006954 	.word	0x08006954
 8005d68:	08006974 	.word	0x08006974
 8005d6c:	08006934 	.word	0x08006934
 8005d70:	080067dc 	.word	0x080067dc
 8005d74:	080067e6 	.word	0x080067e6
 8005d78:	08003a09 	.word	0x08003a09
 8005d7c:	08005b01 	.word	0x08005b01
 8005d80:	080067e2 	.word	0x080067e2

08005d84 <__swbuf_r>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	460e      	mov	r6, r1
 8005d88:	4614      	mov	r4, r2
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	b118      	cbz	r0, 8005d96 <__swbuf_r+0x12>
 8005d8e:	6983      	ldr	r3, [r0, #24]
 8005d90:	b90b      	cbnz	r3, 8005d96 <__swbuf_r+0x12>
 8005d92:	f000 f9e7 	bl	8006164 <__sinit>
 8005d96:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <__swbuf_r+0x98>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d12b      	bne.n	8005df4 <__swbuf_r+0x70>
 8005d9c:	686c      	ldr	r4, [r5, #4]
 8005d9e:	69a3      	ldr	r3, [r4, #24]
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	071a      	lsls	r2, r3, #28
 8005da6:	d52f      	bpl.n	8005e08 <__swbuf_r+0x84>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	b36b      	cbz	r3, 8005e08 <__swbuf_r+0x84>
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	6820      	ldr	r0, [r4, #0]
 8005db0:	1ac0      	subs	r0, r0, r3
 8005db2:	6963      	ldr	r3, [r4, #20]
 8005db4:	b2f6      	uxtb	r6, r6
 8005db6:	4283      	cmp	r3, r0
 8005db8:	4637      	mov	r7, r6
 8005dba:	dc04      	bgt.n	8005dc6 <__swbuf_r+0x42>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f93c 	bl	800603c <_fflush_r>
 8005dc4:	bb30      	cbnz	r0, 8005e14 <__swbuf_r+0x90>
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	701e      	strb	r6, [r3, #0]
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	4283      	cmp	r3, r0
 8005dda:	d004      	beq.n	8005de6 <__swbuf_r+0x62>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	07db      	lsls	r3, r3, #31
 8005de0:	d506      	bpl.n	8005df0 <__swbuf_r+0x6c>
 8005de2:	2e0a      	cmp	r6, #10
 8005de4:	d104      	bne.n	8005df0 <__swbuf_r+0x6c>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 f927 	bl	800603c <_fflush_r>
 8005dee:	b988      	cbnz	r0, 8005e14 <__swbuf_r+0x90>
 8005df0:	4638      	mov	r0, r7
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <__swbuf_r+0x9c>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d101      	bne.n	8005dfe <__swbuf_r+0x7a>
 8005dfa:	68ac      	ldr	r4, [r5, #8]
 8005dfc:	e7cf      	b.n	8005d9e <__swbuf_r+0x1a>
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <__swbuf_r+0xa0>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	bf08      	it	eq
 8005e04:	68ec      	ldreq	r4, [r5, #12]
 8005e06:	e7ca      	b.n	8005d9e <__swbuf_r+0x1a>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 f81a 	bl	8005e44 <__swsetup_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d0cb      	beq.n	8005dac <__swbuf_r+0x28>
 8005e14:	f04f 37ff 	mov.w	r7, #4294967295
 8005e18:	e7ea      	b.n	8005df0 <__swbuf_r+0x6c>
 8005e1a:	bf00      	nop
 8005e1c:	08006954 	.word	0x08006954
 8005e20:	08006974 	.word	0x08006974
 8005e24:	08006934 	.word	0x08006934

08005e28 <__ascii_wctomb>:
 8005e28:	b149      	cbz	r1, 8005e3e <__ascii_wctomb+0x16>
 8005e2a:	2aff      	cmp	r2, #255	; 0xff
 8005e2c:	bf85      	ittet	hi
 8005e2e:	238a      	movhi	r3, #138	; 0x8a
 8005e30:	6003      	strhi	r3, [r0, #0]
 8005e32:	700a      	strbls	r2, [r1, #0]
 8005e34:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e38:	bf98      	it	ls
 8005e3a:	2001      	movls	r0, #1
 8005e3c:	4770      	bx	lr
 8005e3e:	4608      	mov	r0, r1
 8005e40:	4770      	bx	lr
	...

08005e44 <__swsetup_r>:
 8005e44:	4b32      	ldr	r3, [pc, #200]	; (8005f10 <__swsetup_r+0xcc>)
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b125      	cbz	r5, 8005e5a <__swsetup_r+0x16>
 8005e50:	69ab      	ldr	r3, [r5, #24]
 8005e52:	b913      	cbnz	r3, 8005e5a <__swsetup_r+0x16>
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 f985 	bl	8006164 <__sinit>
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <__swsetup_r+0xd0>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d10f      	bne.n	8005e80 <__swsetup_r+0x3c>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e68:	0719      	lsls	r1, r3, #28
 8005e6a:	d42c      	bmi.n	8005ec6 <__swsetup_r+0x82>
 8005e6c:	06dd      	lsls	r5, r3, #27
 8005e6e:	d411      	bmi.n	8005e94 <__swsetup_r+0x50>
 8005e70:	2309      	movs	r3, #9
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	e03e      	b.n	8005efe <__swsetup_r+0xba>
 8005e80:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <__swsetup_r+0xd4>)
 8005e82:	429c      	cmp	r4, r3
 8005e84:	d101      	bne.n	8005e8a <__swsetup_r+0x46>
 8005e86:	68ac      	ldr	r4, [r5, #8]
 8005e88:	e7eb      	b.n	8005e62 <__swsetup_r+0x1e>
 8005e8a:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <__swsetup_r+0xd8>)
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	bf08      	it	eq
 8005e90:	68ec      	ldreq	r4, [r5, #12]
 8005e92:	e7e6      	b.n	8005e62 <__swsetup_r+0x1e>
 8005e94:	0758      	lsls	r0, r3, #29
 8005e96:	d512      	bpl.n	8005ebe <__swsetup_r+0x7a>
 8005e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e9a:	b141      	cbz	r1, 8005eae <__swsetup_r+0x6a>
 8005e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	d002      	beq.n	8005eaa <__swsetup_r+0x66>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff fb31 	bl	800550c <_free_r>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6363      	str	r3, [r4, #52]	; 0x34
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	b94b      	cbnz	r3, 8005ede <__swsetup_r+0x9a>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed4:	d003      	beq.n	8005ede <__swsetup_r+0x9a>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 fa09 	bl	80062f0 <__smakebuf_r>
 8005ede:	89a0      	ldrh	r0, [r4, #12]
 8005ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee4:	f010 0301 	ands.w	r3, r0, #1
 8005ee8:	d00a      	beq.n	8005f00 <__swsetup_r+0xbc>
 8005eea:	2300      	movs	r3, #0
 8005eec:	60a3      	str	r3, [r4, #8]
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	61a3      	str	r3, [r4, #24]
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	b943      	cbnz	r3, 8005f0a <__swsetup_r+0xc6>
 8005ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005efc:	d1ba      	bne.n	8005e74 <__swsetup_r+0x30>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	0781      	lsls	r1, r0, #30
 8005f02:	bf58      	it	pl
 8005f04:	6963      	ldrpl	r3, [r4, #20]
 8005f06:	60a3      	str	r3, [r4, #8]
 8005f08:	e7f4      	b.n	8005ef4 <__swsetup_r+0xb0>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7f7      	b.n	8005efe <__swsetup_r+0xba>
 8005f0e:	bf00      	nop
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	08006954 	.word	0x08006954
 8005f18:	08006974 	.word	0x08006974
 8005f1c:	08006934 	.word	0x08006934

08005f20 <abort>:
 8005f20:	b508      	push	{r3, lr}
 8005f22:	2006      	movs	r0, #6
 8005f24:	f000 fa54 	bl	80063d0 <raise>
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f7fa fe61 	bl	8000bf0 <_exit>
	...

08005f30 <__sflush_r>:
 8005f30:	898a      	ldrh	r2, [r1, #12]
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	4605      	mov	r5, r0
 8005f38:	0710      	lsls	r0, r2, #28
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	d458      	bmi.n	8005ff0 <__sflush_r+0xc0>
 8005f3e:	684b      	ldr	r3, [r1, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dc05      	bgt.n	8005f50 <__sflush_r+0x20>
 8005f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dc02      	bgt.n	8005f50 <__sflush_r+0x20>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d0f9      	beq.n	8005f4a <__sflush_r+0x1a>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f5c:	682f      	ldr	r7, [r5, #0]
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	d032      	beq.n	8005fc8 <__sflush_r+0x98>
 8005f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	075a      	lsls	r2, r3, #29
 8005f68:	d505      	bpl.n	8005f76 <__sflush_r+0x46>
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	1ac0      	subs	r0, r0, r3
 8005f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f70:	b10b      	cbz	r3, 8005f76 <__sflush_r+0x46>
 8005f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f74:	1ac0      	subs	r0, r0, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7c:	6a21      	ldr	r1, [r4, #32]
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b0      	blx	r6
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	d106      	bne.n	8005f96 <__sflush_r+0x66>
 8005f88:	6829      	ldr	r1, [r5, #0]
 8005f8a:	291d      	cmp	r1, #29
 8005f8c:	d82c      	bhi.n	8005fe8 <__sflush_r+0xb8>
 8005f8e:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <__sflush_r+0x108>)
 8005f90:	40ca      	lsrs	r2, r1
 8005f92:	07d6      	lsls	r6, r2, #31
 8005f94:	d528      	bpl.n	8005fe8 <__sflush_r+0xb8>
 8005f96:	2200      	movs	r2, #0
 8005f98:	6062      	str	r2, [r4, #4]
 8005f9a:	04d9      	lsls	r1, r3, #19
 8005f9c:	6922      	ldr	r2, [r4, #16]
 8005f9e:	6022      	str	r2, [r4, #0]
 8005fa0:	d504      	bpl.n	8005fac <__sflush_r+0x7c>
 8005fa2:	1c42      	adds	r2, r0, #1
 8005fa4:	d101      	bne.n	8005faa <__sflush_r+0x7a>
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	b903      	cbnz	r3, 8005fac <__sflush_r+0x7c>
 8005faa:	6560      	str	r0, [r4, #84]	; 0x54
 8005fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fae:	602f      	str	r7, [r5, #0]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d0ca      	beq.n	8005f4a <__sflush_r+0x1a>
 8005fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	d002      	beq.n	8005fc2 <__sflush_r+0x92>
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f7ff faa5 	bl	800550c <_free_r>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8005fc6:	e7c1      	b.n	8005f4c <__sflush_r+0x1c>
 8005fc8:	6a21      	ldr	r1, [r4, #32]
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b0      	blx	r6
 8005fd0:	1c41      	adds	r1, r0, #1
 8005fd2:	d1c7      	bne.n	8005f64 <__sflush_r+0x34>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0c4      	beq.n	8005f64 <__sflush_r+0x34>
 8005fda:	2b1d      	cmp	r3, #29
 8005fdc:	d001      	beq.n	8005fe2 <__sflush_r+0xb2>
 8005fde:	2b16      	cmp	r3, #22
 8005fe0:	d101      	bne.n	8005fe6 <__sflush_r+0xb6>
 8005fe2:	602f      	str	r7, [r5, #0]
 8005fe4:	e7b1      	b.n	8005f4a <__sflush_r+0x1a>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	e7ad      	b.n	8005f4c <__sflush_r+0x1c>
 8005ff0:	690f      	ldr	r7, [r1, #16]
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	d0a9      	beq.n	8005f4a <__sflush_r+0x1a>
 8005ff6:	0793      	lsls	r3, r2, #30
 8005ff8:	680e      	ldr	r6, [r1, #0]
 8005ffa:	bf08      	it	eq
 8005ffc:	694b      	ldreq	r3, [r1, #20]
 8005ffe:	600f      	str	r7, [r1, #0]
 8006000:	bf18      	it	ne
 8006002:	2300      	movne	r3, #0
 8006004:	eba6 0807 	sub.w	r8, r6, r7
 8006008:	608b      	str	r3, [r1, #8]
 800600a:	f1b8 0f00 	cmp.w	r8, #0
 800600e:	dd9c      	ble.n	8005f4a <__sflush_r+0x1a>
 8006010:	6a21      	ldr	r1, [r4, #32]
 8006012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006014:	4643      	mov	r3, r8
 8006016:	463a      	mov	r2, r7
 8006018:	4628      	mov	r0, r5
 800601a:	47b0      	blx	r6
 800601c:	2800      	cmp	r0, #0
 800601e:	dc06      	bgt.n	800602e <__sflush_r+0xfe>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	e78e      	b.n	8005f4c <__sflush_r+0x1c>
 800602e:	4407      	add	r7, r0
 8006030:	eba8 0800 	sub.w	r8, r8, r0
 8006034:	e7e9      	b.n	800600a <__sflush_r+0xda>
 8006036:	bf00      	nop
 8006038:	20400001 	.word	0x20400001

0800603c <_fflush_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	4605      	mov	r5, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b913      	cbnz	r3, 800604c <_fflush_r+0x10>
 8006046:	2500      	movs	r5, #0
 8006048:	4628      	mov	r0, r5
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	b118      	cbz	r0, 8006056 <_fflush_r+0x1a>
 800604e:	6983      	ldr	r3, [r0, #24]
 8006050:	b90b      	cbnz	r3, 8006056 <_fflush_r+0x1a>
 8006052:	f000 f887 	bl	8006164 <__sinit>
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <_fflush_r+0x6c>)
 8006058:	429c      	cmp	r4, r3
 800605a:	d11b      	bne.n	8006094 <_fflush_r+0x58>
 800605c:	686c      	ldr	r4, [r5, #4]
 800605e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0ef      	beq.n	8006046 <_fflush_r+0xa>
 8006066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006068:	07d0      	lsls	r0, r2, #31
 800606a:	d404      	bmi.n	8006076 <_fflush_r+0x3a>
 800606c:	0599      	lsls	r1, r3, #22
 800606e:	d402      	bmi.n	8006076 <_fflush_r+0x3a>
 8006070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006072:	f000 f915 	bl	80062a0 <__retarget_lock_acquire_recursive>
 8006076:	4628      	mov	r0, r5
 8006078:	4621      	mov	r1, r4
 800607a:	f7ff ff59 	bl	8005f30 <__sflush_r>
 800607e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006080:	07da      	lsls	r2, r3, #31
 8006082:	4605      	mov	r5, r0
 8006084:	d4e0      	bmi.n	8006048 <_fflush_r+0xc>
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	059b      	lsls	r3, r3, #22
 800608a:	d4dd      	bmi.n	8006048 <_fflush_r+0xc>
 800608c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608e:	f000 f908 	bl	80062a2 <__retarget_lock_release_recursive>
 8006092:	e7d9      	b.n	8006048 <_fflush_r+0xc>
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <_fflush_r+0x70>)
 8006096:	429c      	cmp	r4, r3
 8006098:	d101      	bne.n	800609e <_fflush_r+0x62>
 800609a:	68ac      	ldr	r4, [r5, #8]
 800609c:	e7df      	b.n	800605e <_fflush_r+0x22>
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <_fflush_r+0x74>)
 80060a0:	429c      	cmp	r4, r3
 80060a2:	bf08      	it	eq
 80060a4:	68ec      	ldreq	r4, [r5, #12]
 80060a6:	e7da      	b.n	800605e <_fflush_r+0x22>
 80060a8:	08006954 	.word	0x08006954
 80060ac:	08006974 	.word	0x08006974
 80060b0:	08006934 	.word	0x08006934

080060b4 <std>:
 80060b4:	2300      	movs	r3, #0
 80060b6:	b510      	push	{r4, lr}
 80060b8:	4604      	mov	r4, r0
 80060ba:	e9c0 3300 	strd	r3, r3, [r0]
 80060be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060c2:	6083      	str	r3, [r0, #8]
 80060c4:	8181      	strh	r1, [r0, #12]
 80060c6:	6643      	str	r3, [r0, #100]	; 0x64
 80060c8:	81c2      	strh	r2, [r0, #14]
 80060ca:	6183      	str	r3, [r0, #24]
 80060cc:	4619      	mov	r1, r3
 80060ce:	2208      	movs	r2, #8
 80060d0:	305c      	adds	r0, #92	; 0x5c
 80060d2:	f7fd fbff 	bl	80038d4 <memset>
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <std+0x38>)
 80060d8:	6263      	str	r3, [r4, #36]	; 0x24
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <std+0x3c>)
 80060dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <std+0x40>)
 80060e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <std+0x44>)
 80060e4:	6224      	str	r4, [r4, #32]
 80060e6:	6323      	str	r3, [r4, #48]	; 0x30
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop
 80060ec:	08006409 	.word	0x08006409
 80060f0:	0800642b 	.word	0x0800642b
 80060f4:	08006463 	.word	0x08006463
 80060f8:	08006487 	.word	0x08006487

080060fc <_cleanup_r>:
 80060fc:	4901      	ldr	r1, [pc, #4]	; (8006104 <_cleanup_r+0x8>)
 80060fe:	f000 b8af 	b.w	8006260 <_fwalk_reent>
 8006102:	bf00      	nop
 8006104:	0800603d 	.word	0x0800603d

08006108 <__sfmoreglue>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	2268      	movs	r2, #104	; 0x68
 800610c:	1e4d      	subs	r5, r1, #1
 800610e:	4355      	muls	r5, r2
 8006110:	460e      	mov	r6, r1
 8006112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006116:	f7ff fa65 	bl	80055e4 <_malloc_r>
 800611a:	4604      	mov	r4, r0
 800611c:	b140      	cbz	r0, 8006130 <__sfmoreglue+0x28>
 800611e:	2100      	movs	r1, #0
 8006120:	e9c0 1600 	strd	r1, r6, [r0]
 8006124:	300c      	adds	r0, #12
 8006126:	60a0      	str	r0, [r4, #8]
 8006128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800612c:	f7fd fbd2 	bl	80038d4 <memset>
 8006130:	4620      	mov	r0, r4
 8006132:	bd70      	pop	{r4, r5, r6, pc}

08006134 <__sfp_lock_acquire>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__sfp_lock_acquire+0x8>)
 8006136:	f000 b8b3 	b.w	80062a0 <__retarget_lock_acquire_recursive>
 800613a:	bf00      	nop
 800613c:	20000421 	.word	0x20000421

08006140 <__sfp_lock_release>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__sfp_lock_release+0x8>)
 8006142:	f000 b8ae 	b.w	80062a2 <__retarget_lock_release_recursive>
 8006146:	bf00      	nop
 8006148:	20000421 	.word	0x20000421

0800614c <__sinit_lock_acquire>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__sinit_lock_acquire+0x8>)
 800614e:	f000 b8a7 	b.w	80062a0 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	20000422 	.word	0x20000422

08006158 <__sinit_lock_release>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sinit_lock_release+0x8>)
 800615a:	f000 b8a2 	b.w	80062a2 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	20000422 	.word	0x20000422

08006164 <__sinit>:
 8006164:	b510      	push	{r4, lr}
 8006166:	4604      	mov	r4, r0
 8006168:	f7ff fff0 	bl	800614c <__sinit_lock_acquire>
 800616c:	69a3      	ldr	r3, [r4, #24]
 800616e:	b11b      	cbz	r3, 8006178 <__sinit+0x14>
 8006170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006174:	f7ff bff0 	b.w	8006158 <__sinit_lock_release>
 8006178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800617c:	6523      	str	r3, [r4, #80]	; 0x50
 800617e:	4b13      	ldr	r3, [pc, #76]	; (80061cc <__sinit+0x68>)
 8006180:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <__sinit+0x6c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	62a2      	str	r2, [r4, #40]	; 0x28
 8006186:	42a3      	cmp	r3, r4
 8006188:	bf04      	itt	eq
 800618a:	2301      	moveq	r3, #1
 800618c:	61a3      	streq	r3, [r4, #24]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f820 	bl	80061d4 <__sfp>
 8006194:	6060      	str	r0, [r4, #4]
 8006196:	4620      	mov	r0, r4
 8006198:	f000 f81c 	bl	80061d4 <__sfp>
 800619c:	60a0      	str	r0, [r4, #8]
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 f818 	bl	80061d4 <__sfp>
 80061a4:	2200      	movs	r2, #0
 80061a6:	60e0      	str	r0, [r4, #12]
 80061a8:	2104      	movs	r1, #4
 80061aa:	6860      	ldr	r0, [r4, #4]
 80061ac:	f7ff ff82 	bl	80060b4 <std>
 80061b0:	68a0      	ldr	r0, [r4, #8]
 80061b2:	2201      	movs	r2, #1
 80061b4:	2109      	movs	r1, #9
 80061b6:	f7ff ff7d 	bl	80060b4 <std>
 80061ba:	68e0      	ldr	r0, [r4, #12]
 80061bc:	2202      	movs	r2, #2
 80061be:	2112      	movs	r1, #18
 80061c0:	f7ff ff78 	bl	80060b4 <std>
 80061c4:	2301      	movs	r3, #1
 80061c6:	61a3      	str	r3, [r4, #24]
 80061c8:	e7d2      	b.n	8006170 <__sinit+0xc>
 80061ca:	bf00      	nop
 80061cc:	080065bc 	.word	0x080065bc
 80061d0:	080060fd 	.word	0x080060fd

080061d4 <__sfp>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	4607      	mov	r7, r0
 80061d8:	f7ff ffac 	bl	8006134 <__sfp_lock_acquire>
 80061dc:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <__sfp+0x84>)
 80061de:	681e      	ldr	r6, [r3, #0]
 80061e0:	69b3      	ldr	r3, [r6, #24]
 80061e2:	b913      	cbnz	r3, 80061ea <__sfp+0x16>
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ffbd 	bl	8006164 <__sinit>
 80061ea:	3648      	adds	r6, #72	; 0x48
 80061ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	d503      	bpl.n	80061fc <__sfp+0x28>
 80061f4:	6833      	ldr	r3, [r6, #0]
 80061f6:	b30b      	cbz	r3, 800623c <__sfp+0x68>
 80061f8:	6836      	ldr	r6, [r6, #0]
 80061fa:	e7f7      	b.n	80061ec <__sfp+0x18>
 80061fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006200:	b9d5      	cbnz	r5, 8006238 <__sfp+0x64>
 8006202:	4b16      	ldr	r3, [pc, #88]	; (800625c <__sfp+0x88>)
 8006204:	60e3      	str	r3, [r4, #12]
 8006206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800620a:	6665      	str	r5, [r4, #100]	; 0x64
 800620c:	f000 f847 	bl	800629e <__retarget_lock_init_recursive>
 8006210:	f7ff ff96 	bl	8006140 <__sfp_lock_release>
 8006214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800621c:	6025      	str	r5, [r4, #0]
 800621e:	61a5      	str	r5, [r4, #24]
 8006220:	2208      	movs	r2, #8
 8006222:	4629      	mov	r1, r5
 8006224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006228:	f7fd fb54 	bl	80038d4 <memset>
 800622c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006234:	4620      	mov	r0, r4
 8006236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006238:	3468      	adds	r4, #104	; 0x68
 800623a:	e7d9      	b.n	80061f0 <__sfp+0x1c>
 800623c:	2104      	movs	r1, #4
 800623e:	4638      	mov	r0, r7
 8006240:	f7ff ff62 	bl	8006108 <__sfmoreglue>
 8006244:	4604      	mov	r4, r0
 8006246:	6030      	str	r0, [r6, #0]
 8006248:	2800      	cmp	r0, #0
 800624a:	d1d5      	bne.n	80061f8 <__sfp+0x24>
 800624c:	f7ff ff78 	bl	8006140 <__sfp_lock_release>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	e7ee      	b.n	8006234 <__sfp+0x60>
 8006256:	bf00      	nop
 8006258:	080065bc 	.word	0x080065bc
 800625c:	ffff0001 	.word	0xffff0001

08006260 <_fwalk_reent>:
 8006260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006264:	4606      	mov	r6, r0
 8006266:	4688      	mov	r8, r1
 8006268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800626c:	2700      	movs	r7, #0
 800626e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006272:	f1b9 0901 	subs.w	r9, r9, #1
 8006276:	d505      	bpl.n	8006284 <_fwalk_reent+0x24>
 8006278:	6824      	ldr	r4, [r4, #0]
 800627a:	2c00      	cmp	r4, #0
 800627c:	d1f7      	bne.n	800626e <_fwalk_reent+0xe>
 800627e:	4638      	mov	r0, r7
 8006280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006284:	89ab      	ldrh	r3, [r5, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d907      	bls.n	800629a <_fwalk_reent+0x3a>
 800628a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800628e:	3301      	adds	r3, #1
 8006290:	d003      	beq.n	800629a <_fwalk_reent+0x3a>
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	47c0      	blx	r8
 8006298:	4307      	orrs	r7, r0
 800629a:	3568      	adds	r5, #104	; 0x68
 800629c:	e7e9      	b.n	8006272 <_fwalk_reent+0x12>

0800629e <__retarget_lock_init_recursive>:
 800629e:	4770      	bx	lr

080062a0 <__retarget_lock_acquire_recursive>:
 80062a0:	4770      	bx	lr

080062a2 <__retarget_lock_release_recursive>:
 80062a2:	4770      	bx	lr

080062a4 <__swhatbuf_r>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	460e      	mov	r6, r1
 80062a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ac:	2900      	cmp	r1, #0
 80062ae:	b096      	sub	sp, #88	; 0x58
 80062b0:	4614      	mov	r4, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	da08      	bge.n	80062c8 <__swhatbuf_r+0x24>
 80062b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	602a      	str	r2, [r5, #0]
 80062be:	061a      	lsls	r2, r3, #24
 80062c0:	d410      	bmi.n	80062e4 <__swhatbuf_r+0x40>
 80062c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c6:	e00e      	b.n	80062e6 <__swhatbuf_r+0x42>
 80062c8:	466a      	mov	r2, sp
 80062ca:	f000 f903 	bl	80064d4 <_fstat_r>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	dbf1      	blt.n	80062b6 <__swhatbuf_r+0x12>
 80062d2:	9a01      	ldr	r2, [sp, #4]
 80062d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062dc:	425a      	negs	r2, r3
 80062de:	415a      	adcs	r2, r3
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	e7ee      	b.n	80062c2 <__swhatbuf_r+0x1e>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	2000      	movs	r0, #0
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	b016      	add	sp, #88	; 0x58
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080062f0 <__smakebuf_r>:
 80062f0:	898b      	ldrh	r3, [r1, #12]
 80062f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062f4:	079d      	lsls	r5, r3, #30
 80062f6:	4606      	mov	r6, r0
 80062f8:	460c      	mov	r4, r1
 80062fa:	d507      	bpl.n	800630c <__smakebuf_r+0x1c>
 80062fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	2301      	movs	r3, #1
 8006306:	6163      	str	r3, [r4, #20]
 8006308:	b002      	add	sp, #8
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	ab01      	add	r3, sp, #4
 800630e:	466a      	mov	r2, sp
 8006310:	f7ff ffc8 	bl	80062a4 <__swhatbuf_r>
 8006314:	9900      	ldr	r1, [sp, #0]
 8006316:	4605      	mov	r5, r0
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff f963 	bl	80055e4 <_malloc_r>
 800631e:	b948      	cbnz	r0, 8006334 <__smakebuf_r+0x44>
 8006320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d4ef      	bmi.n	8006308 <__smakebuf_r+0x18>
 8006328:	f023 0303 	bic.w	r3, r3, #3
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	e7e3      	b.n	80062fc <__smakebuf_r+0xc>
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <__smakebuf_r+0x7c>)
 8006336:	62b3      	str	r3, [r6, #40]	; 0x28
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	6163      	str	r3, [r4, #20]
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	6120      	str	r0, [r4, #16]
 800634a:	b15b      	cbz	r3, 8006364 <__smakebuf_r+0x74>
 800634c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006350:	4630      	mov	r0, r6
 8006352:	f000 f8d1 	bl	80064f8 <_isatty_r>
 8006356:	b128      	cbz	r0, 8006364 <__smakebuf_r+0x74>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	89a0      	ldrh	r0, [r4, #12]
 8006366:	4305      	orrs	r5, r0
 8006368:	81a5      	strh	r5, [r4, #12]
 800636a:	e7cd      	b.n	8006308 <__smakebuf_r+0x18>
 800636c:	080060fd 	.word	0x080060fd

08006370 <_malloc_usable_size_r>:
 8006370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006374:	1f18      	subs	r0, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfbc      	itt	lt
 800637a:	580b      	ldrlt	r3, [r1, r0]
 800637c:	18c0      	addlt	r0, r0, r3
 800637e:	4770      	bx	lr

08006380 <_raise_r>:
 8006380:	291f      	cmp	r1, #31
 8006382:	b538      	push	{r3, r4, r5, lr}
 8006384:	4604      	mov	r4, r0
 8006386:	460d      	mov	r5, r1
 8006388:	d904      	bls.n	8006394 <_raise_r+0x14>
 800638a:	2316      	movs	r3, #22
 800638c:	6003      	str	r3, [r0, #0]
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006396:	b112      	cbz	r2, 800639e <_raise_r+0x1e>
 8006398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800639c:	b94b      	cbnz	r3, 80063b2 <_raise_r+0x32>
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f830 	bl	8006404 <_getpid_r>
 80063a4:	462a      	mov	r2, r5
 80063a6:	4601      	mov	r1, r0
 80063a8:	4620      	mov	r0, r4
 80063aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ae:	f000 b817 	b.w	80063e0 <_kill_r>
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d00a      	beq.n	80063cc <_raise_r+0x4c>
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	d103      	bne.n	80063c2 <_raise_r+0x42>
 80063ba:	2316      	movs	r3, #22
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	2001      	movs	r0, #1
 80063c0:	e7e7      	b.n	8006392 <_raise_r+0x12>
 80063c2:	2400      	movs	r4, #0
 80063c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063c8:	4628      	mov	r0, r5
 80063ca:	4798      	blx	r3
 80063cc:	2000      	movs	r0, #0
 80063ce:	e7e0      	b.n	8006392 <_raise_r+0x12>

080063d0 <raise>:
 80063d0:	4b02      	ldr	r3, [pc, #8]	; (80063dc <raise+0xc>)
 80063d2:	4601      	mov	r1, r0
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f7ff bfd3 	b.w	8006380 <_raise_r>
 80063da:	bf00      	nop
 80063dc:	2000000c 	.word	0x2000000c

080063e0 <_kill_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4d07      	ldr	r5, [pc, #28]	; (8006400 <_kill_r+0x20>)
 80063e4:	2300      	movs	r3, #0
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	f7fa fbef 	bl	8000bd0 <_kill>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d102      	bne.n	80063fc <_kill_r+0x1c>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	b103      	cbz	r3, 80063fc <_kill_r+0x1c>
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	2000041c 	.word	0x2000041c

08006404 <_getpid_r>:
 8006404:	f7fa bbdc 	b.w	8000bc0 <_getpid>

08006408 <__sread>:
 8006408:	b510      	push	{r4, lr}
 800640a:	460c      	mov	r4, r1
 800640c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006410:	f000 f894 	bl	800653c <_read_r>
 8006414:	2800      	cmp	r0, #0
 8006416:	bfab      	itete	ge
 8006418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641a:	89a3      	ldrhlt	r3, [r4, #12]
 800641c:	181b      	addge	r3, r3, r0
 800641e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006422:	bfac      	ite	ge
 8006424:	6563      	strge	r3, [r4, #84]	; 0x54
 8006426:	81a3      	strhlt	r3, [r4, #12]
 8006428:	bd10      	pop	{r4, pc}

0800642a <__swrite>:
 800642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642e:	461f      	mov	r7, r3
 8006430:	898b      	ldrh	r3, [r1, #12]
 8006432:	05db      	lsls	r3, r3, #23
 8006434:	4605      	mov	r5, r0
 8006436:	460c      	mov	r4, r1
 8006438:	4616      	mov	r6, r2
 800643a:	d505      	bpl.n	8006448 <__swrite+0x1e>
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	2302      	movs	r3, #2
 8006442:	2200      	movs	r2, #0
 8006444:	f000 f868 	bl	8006518 <_lseek_r>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800644e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	4632      	mov	r2, r6
 8006456:	463b      	mov	r3, r7
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	f000 b817 	b.w	8006490 <_write_r>

08006462 <__sseek>:
 8006462:	b510      	push	{r4, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646a:	f000 f855 	bl	8006518 <_lseek_r>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	bf15      	itete	ne
 8006474:	6560      	strne	r0, [r4, #84]	; 0x54
 8006476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800647e:	81a3      	strheq	r3, [r4, #12]
 8006480:	bf18      	it	ne
 8006482:	81a3      	strhne	r3, [r4, #12]
 8006484:	bd10      	pop	{r4, pc}

08006486 <__sclose>:
 8006486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648a:	f000 b813 	b.w	80064b4 <_close_r>
	...

08006490 <_write_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <_write_r+0x20>)
 8006494:	4604      	mov	r4, r0
 8006496:	4608      	mov	r0, r1
 8006498:	4611      	mov	r1, r2
 800649a:	2200      	movs	r2, #0
 800649c:	602a      	str	r2, [r5, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	f7fa fbcd 	bl	8000c3e <_write>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_write_r+0x1e>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_write_r+0x1e>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	2000041c 	.word	0x2000041c

080064b4 <_close_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_close_r+0x1c>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	f7fa fbd9 	bl	8000c76 <_close>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_close_r+0x1a>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_close_r+0x1a>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	2000041c 	.word	0x2000041c

080064d4 <_fstat_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_fstat_r+0x20>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f7fa fbd4 	bl	8000c8e <_fstat>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d102      	bne.n	80064f0 <_fstat_r+0x1c>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b103      	cbz	r3, 80064f0 <_fstat_r+0x1c>
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	bf00      	nop
 80064f4:	2000041c 	.word	0x2000041c

080064f8 <_isatty_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_isatty_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa fbd3 	bl	8000cae <_isatty>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_isatty_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_isatty_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	2000041c 	.word	0x2000041c

08006518 <_lseek_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	; (8006538 <_lseek_r+0x20>)
 800651c:	4604      	mov	r4, r0
 800651e:	4608      	mov	r0, r1
 8006520:	4611      	mov	r1, r2
 8006522:	2200      	movs	r2, #0
 8006524:	602a      	str	r2, [r5, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	f7fa fbcc 	bl	8000cc4 <_lseek>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_lseek_r+0x1e>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_lseek_r+0x1e>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	2000041c 	.word	0x2000041c

0800653c <_read_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_read_r+0x20>)
 8006540:	4604      	mov	r4, r0
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	2200      	movs	r2, #0
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	f7fa fb5a 	bl	8000c04 <_read>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_read_r+0x1e>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_read_r+0x1e>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	2000041c 	.word	0x2000041c

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
