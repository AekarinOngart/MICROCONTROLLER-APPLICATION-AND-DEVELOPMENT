
Lab-special.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d2c  08003d2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d34  08003d34  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000078  08003db4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08003db4  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d45  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171b  00000000  00000000  00029deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b1c  00000000  00000000  0002c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aad3  00000000  00000000  00052dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f02bc  00000000  00000000  0005d87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014db3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  0014db8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c44 	.word	0x08003c44

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08003c44 	.word	0x08003c44

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_GPIO_Init+0x44>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_GPIO_Init+0x44>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_GPIO_Init+0x44>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_GPIO_Init+0x44>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <MX_GPIO_Init+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_GPIO_Init+0x44>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000640:	f000 fa20 	bl	8000a84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc87 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f9c0 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff ffd2 	bl	80005f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000650:	f000 fae0 	bl	8000c14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000654:	f000 fb0e 	bl	8000c74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000658:	f000 fb3c 	bl	8000cd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800065c:	bf00      	nop
 800065e:	4ba3      	ldr	r3, [pc, #652]	; (80008ec <main+0x2b0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000668:	2b40      	cmp	r3, #64	; 0x40
 800066a:	d1f8      	bne.n	800065e <main+0x22>
  HAL_UART_Transmit(&huart3, (uint32_t*)"\r\nMan From U.A.R.T.1!\n\rQuit PRESS q", 35, 1000);
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	2223      	movs	r2, #35	; 0x23
 8000672:	499f      	ldr	r1, [pc, #636]	; (80008f0 <main+0x2b4>)
 8000674:	489d      	ldr	r0, [pc, #628]	; (80008ec <main+0x2b0>)
 8000676:	f002 f8e3 	bl	8002840 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */


	  if (state1 == 1 ){
 800067a:	4b9e      	ldr	r3, [pc, #632]	; (80008f4 <main+0x2b8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d146      	bne.n	8000710 <main+0xd4>
	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000682:	bf00      	nop
 8000684:	4b99      	ldr	r3, [pc, #612]	; (80008ec <main+0x2b0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	2b40      	cmp	r3, #64	; 0x40
 8000690:	d1f8      	bne.n	8000684 <main+0x48>
	  	 	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\tName : ", 10, 1000);
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	220a      	movs	r2, #10
 8000698:	4997      	ldr	r1, [pc, #604]	; (80008f8 <main+0x2bc>)
 800069a:	4894      	ldr	r0, [pc, #592]	; (80008ec <main+0x2b0>)
 800069c:	f002 f8d0 	bl	8002840 <HAL_UART_Transmit>


	  	 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 80006a0:	bf00      	nop
 80006a2:	4b92      	ldr	r3, [pc, #584]	; (80008ec <main+0x2b0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	2b20      	cmp	r3, #32
 80006ae:	d1f8      	bne.n	80006a2 <main+0x66>
	  	 	 HAL_UART_Receive(&huart3, (uint32_t*)&username, 100,1000);
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	2264      	movs	r2, #100	; 0x64
 80006b6:	4991      	ldr	r1, [pc, #580]	; (80008fc <main+0x2c0>)
 80006b8:	488c      	ldr	r0, [pc, #560]	; (80008ec <main+0x2b0>)
 80006ba:	f002 f944 	bl	8002946 <HAL_UART_Receive>


	  	if (username[0] != '\000'){
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <main+0x2c0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d021      	beq.n	800070a <main+0xce>
	  		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006c6:	bf00      	nop
 80006c8:	4b88      	ldr	r3, [pc, #544]	; (80008ec <main+0x2b0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	2b40      	cmp	r3, #64	; 0x40
 80006d4:	d1f8      	bne.n	80006c8 <main+0x8c>
	  		HAL_UART_Transmit(&huart3, (uint32_t*)&username, 100, 1000);
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	2264      	movs	r2, #100	; 0x64
 80006dc:	4987      	ldr	r1, [pc, #540]	; (80008fc <main+0x2c0>)
 80006de:	4883      	ldr	r0, [pc, #524]	; (80008ec <main+0x2b0>)
 80006e0:	f002 f8ae 	bl	8002840 <HAL_UART_Transmit>
	  		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80006e4:	bf00      	nop
 80006e6:	4b86      	ldr	r3, [pc, #536]	; (8000900 <main+0x2c4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f0:	2b40      	cmp	r3, #64	; 0x40
 80006f2:	d1f8      	bne.n	80006e6 <main+0xaa>
	  		HAL_UART_Transmit(&huart2, (uint32_t*)&username, strlen(username), 1000);}
 80006f4:	4881      	ldr	r0, [pc, #516]	; (80008fc <main+0x2c0>)
 80006f6:	f7ff fda3 	bl	8000240 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	497e      	ldr	r1, [pc, #504]	; (80008fc <main+0x2c0>)
 8000704:	487e      	ldr	r0, [pc, #504]	; (8000900 <main+0x2c4>)
 8000706:	f002 f89b 	bl	8002840 <HAL_UART_Transmit>

	  	    state1 = 0;
 800070a:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <main+0x2b8>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
	  }


	  if (state2 == 1){
 8000710:	4b7c      	ldr	r3, [pc, #496]	; (8000904 <main+0x2c8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d144      	bne.n	80007a2 <main+0x166>

				  while(name[0] == '\000'){
 8000718:	e013      	b.n	8000742 <main+0x106>
					  memset(name,0,sizeof(name));
 800071a:	2264      	movs	r2, #100	; 0x64
 800071c:	2100      	movs	r1, #0
 800071e:	487a      	ldr	r0, [pc, #488]	; (8000908 <main+0x2cc>)
 8000720:	f002 fe1a 	bl	8003358 <memset>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 8000724:	bf00      	nop
 8000726:	4b76      	ldr	r3, [pc, #472]	; (8000900 <main+0x2c4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0320 	and.w	r3, r3, #32
 8000730:	2b20      	cmp	r3, #32
 8000732:	d1f8      	bne.n	8000726 <main+0xea>
					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	2264      	movs	r2, #100	; 0x64
 800073a:	4973      	ldr	r1, [pc, #460]	; (8000908 <main+0x2cc>)
 800073c:	4870      	ldr	r0, [pc, #448]	; (8000900 <main+0x2c4>)
 800073e:	f002 f902 	bl	8002946 <HAL_UART_Receive>
				  while(name[0] == '\000'){
 8000742:	4b71      	ldr	r3, [pc, #452]	; (8000908 <main+0x2cc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0e7      	beq.n	800071a <main+0xde>
				  }

				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800074a:	bf00      	nop
 800074c:	4b67      	ldr	r3, [pc, #412]	; (80008ec <main+0x2b0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	2b40      	cmp	r3, #64	; 0x40
 8000758:	d1f8      	bne.n	800074c <main+0x110>
				  HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 800075a:	23c8      	movs	r3, #200	; 0xc8
 800075c:	2204      	movs	r2, #4
 800075e:	496b      	ldr	r1, [pc, #428]	; (800090c <main+0x2d0>)
 8000760:	4862      	ldr	r0, [pc, #392]	; (80008ec <main+0x2b0>)
 8000762:	f002 f86d 	bl	8002840 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 8000766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076a:	2264      	movs	r2, #100	; 0x64
 800076c:	4966      	ldr	r1, [pc, #408]	; (8000908 <main+0x2cc>)
 800076e:	485f      	ldr	r0, [pc, #380]	; (80008ec <main+0x2b0>)
 8000770:	f002 f866 	bl	8002840 <HAL_UART_Transmit>

				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000774:	bf00      	nop
 8000776:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <main+0x2b0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d1f8      	bne.n	8000776 <main+0x13a>
				  HAL_UART_Transmit(&huart3, (uint32_t*)" is Ready!", 10, 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	220a      	movs	r2, #10
 800078a:	4961      	ldr	r1, [pc, #388]	; (8000910 <main+0x2d4>)
 800078c:	4857      	ldr	r0, [pc, #348]	; (80008ec <main+0x2b0>)
 800078e:	f002 f857 	bl	8002840 <HAL_UART_Transmit>
				  memset(name,0,sizeof(name));
 8000792:	2264      	movs	r2, #100	; 0x64
 8000794:	2100      	movs	r1, #0
 8000796:	485c      	ldr	r0, [pc, #368]	; (8000908 <main+0x2cc>)
 8000798:	f002 fdde 	bl	8003358 <memset>

	 		  state2 = 0;
 800079c:	4b59      	ldr	r3, [pc, #356]	; (8000904 <main+0x2c8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]

	 	}

	      memset(buffer,0,sizeof(buffer));
 80007a2:	2264      	movs	r2, #100	; 0x64
 80007a4:	2100      	movs	r1, #0
 80007a6:	485b      	ldr	r0, [pc, #364]	; (8000914 <main+0x2d8>)
 80007a8:	f002 fdd6 	bl	8003358 <memset>
	      memset(transmit,0,sizeof(transmit));
 80007ac:	2264      	movs	r2, #100	; 0x64
 80007ae:	2100      	movs	r1, #0
 80007b0:	4859      	ldr	r0, [pc, #356]	; (8000918 <main+0x2dc>)
 80007b2:	f002 fdd1 	bl	8003358 <memset>

	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007b6:	bf00      	nop
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <main+0x2b0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c2:	2b40      	cmp	r3, #64	; 0x40
 80007c4:	d1f8      	bne.n	80007b8 <main+0x17c>
	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"\r\n\t", 4, 200);
 80007c6:	23c8      	movs	r3, #200	; 0xc8
 80007c8:	2204      	movs	r2, #4
 80007ca:	4950      	ldr	r1, [pc, #320]	; (800090c <main+0x2d0>)
 80007cc:	4847      	ldr	r0, [pc, #284]	; (80008ec <main+0x2b0>)
 80007ce:	f002 f837 	bl	8002840 <HAL_UART_Transmit>
	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)&username, strlen(username), 1000);
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <main+0x2c0>)
 80007d4:	f7ff fd34 	bl	8000240 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	4946      	ldr	r1, [pc, #280]	; (80008fc <main+0x2c0>)
 80007e2:	4842      	ldr	r0, [pc, #264]	; (80008ec <main+0x2b0>)
 80007e4:	f002 f82c 	bl	8002840 <HAL_UART_Transmit>

	 	 		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007e8:	bf00      	nop
 80007ea:	4b40      	ldr	r3, [pc, #256]	; (80008ec <main+0x2b0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f4:	2b40      	cmp	r3, #64	; 0x40
 80007f6:	d1f8      	bne.n	80007ea <main+0x1ae>
	 	 		  	HAL_UART_Transmit(&huart3, (uint32_t*)"=>", 2, 1000);
 80007f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fc:	2202      	movs	r2, #2
 80007fe:	4947      	ldr	r1, [pc, #284]	; (800091c <main+0x2e0>)
 8000800:	483a      	ldr	r0, [pc, #232]	; (80008ec <main+0x2b0>)
 8000802:	f002 f81d 	bl	8002840 <HAL_UART_Transmit>

	 	 		 while(transmit[0] == '\000'){
 8000806:	e013      	b.n	8000830 <main+0x1f4>
					  memset(transmit,0,sizeof(transmit));
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	2100      	movs	r1, #0
 800080c:	4842      	ldr	r0, [pc, #264]	; (8000918 <main+0x2dc>)
 800080e:	f002 fda3 	bl	8003358 <memset>
					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 8000812:	bf00      	nop
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <main+0x2b0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	2b20      	cmp	r3, #32
 8000820:	d1f8      	bne.n	8000814 <main+0x1d8>
						HAL_UART_Receive(&huart3, (uint32_t*)&transmit, 100,1000);
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	2264      	movs	r2, #100	; 0x64
 8000828:	493b      	ldr	r1, [pc, #236]	; (8000918 <main+0x2dc>)
 800082a:	4830      	ldr	r0, [pc, #192]	; (80008ec <main+0x2b0>)
 800082c:	f002 f88b 	bl	8002946 <HAL_UART_Receive>
	 	 		 while(transmit[0] == '\000'){
 8000830:	4b39      	ldr	r3, [pc, #228]	; (8000918 <main+0x2dc>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0e7      	beq.n	8000808 <main+0x1cc>
	 	 		 }

	 	 		 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000838:	bf00      	nop
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <main+0x2b0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000844:	2b40      	cmp	r3, #64	; 0x40
 8000846:	d1f8      	bne.n	800083a <main+0x1fe>
	 	 		 HAL_UART_Transmit(&huart3, (uint32_t*)&transmit, 100, 1000);
 8000848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	4932      	ldr	r1, [pc, #200]	; (8000918 <main+0x2dc>)
 8000850:	4826      	ldr	r0, [pc, #152]	; (80008ec <main+0x2b0>)
 8000852:	f001 fff5 	bl	8002840 <HAL_UART_Transmit>

	 	 		if((transmit[0] == 'q'||transmit[0] == 'Q') && transmit[1] == '\000'){
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <main+0x2dc>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b71      	cmp	r3, #113	; 0x71
 800085c:	d003      	beq.n	8000866 <main+0x22a>
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <main+0x2dc>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b51      	cmp	r3, #81	; 0x51
 8000864:	d127      	bne.n	80008b6 <main+0x27a>
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <main+0x2dc>)
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d123      	bne.n	80008b6 <main+0x27a>

	 	 			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800086e:	bf00      	nop
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <main+0x2b0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d1f8      	bne.n	8000870 <main+0x234>
	 	 			HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER1 is disconected", 20, 1000);
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	2214      	movs	r2, #20
 8000884:	4926      	ldr	r1, [pc, #152]	; (8000920 <main+0x2e4>)
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <main+0x2b0>)
 8000888:	f001 ffda 	bl	8002840 <HAL_UART_Transmit>
	 	 			sprintf(buffer,"%s",transmit);
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <main+0x2dc>)
 800088e:	4925      	ldr	r1, [pc, #148]	; (8000924 <main+0x2e8>)
 8000890:	4820      	ldr	r0, [pc, #128]	; (8000914 <main+0x2d8>)
 8000892:	f002 fd69 	bl	8003368 <siprintf>
	 	 			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000896:	bf00      	nop
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <main+0x2c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	2b40      	cmp	r3, #64	; 0x40
 80008a4:	d1f8      	bne.n	8000898 <main+0x25c>
	 	 			HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	4919      	ldr	r1, [pc, #100]	; (8000914 <main+0x2d8>)
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <main+0x2c4>)
 80008b0:	f001 ffc6 	bl	8002840 <HAL_UART_Transmit>
	 	 			break;
 80008b4:	e07e      	b.n	80009b4 <main+0x378>

	 	 		}
	 	 		else{
	 	 		 sprintf(buffer,"\r\n\t%s : %s",username,transmit);
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <main+0x2dc>)
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <main+0x2c0>)
 80008ba:	491b      	ldr	r1, [pc, #108]	; (8000928 <main+0x2ec>)
 80008bc:	4815      	ldr	r0, [pc, #84]	; (8000914 <main+0x2d8>)
 80008be:	f002 fd53 	bl	8003368 <siprintf>
	 	 		  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008c2:	bf00      	nop
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <main+0x2c4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	2b40      	cmp	r3, #64	; 0x40
 80008d0:	d1f8      	bne.n	80008c4 <main+0x288>
	 	 		  HAL_UART_Transmit(&huart2, (uint32_t*)&buffer, 100, 1000);
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	2264      	movs	r2, #100	; 0x64
 80008d8:	490e      	ldr	r1, [pc, #56]	; (8000914 <main+0x2d8>)
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x2c4>)
 80008dc:	f001 ffb0 	bl	8002840 <HAL_UART_Transmit>
	 	 		}



		  memset(name,0,sizeof(name));
 80008e0:	2264      	movs	r2, #100	; 0x64
 80008e2:	2100      	movs	r1, #0
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <main+0x2cc>)
 80008e6:	f002 fd37 	bl	8003358 <memset>

				  while(name[0] == '\000'){
 80008ea:	e033      	b.n	8000954 <main+0x318>
 80008ec:	20000338 	.word	0x20000338
 80008f0:	08003c5c 	.word	0x08003c5c
 80008f4:	20000000 	.word	0x20000000
 80008f8:	08003c80 	.word	0x08003c80
 80008fc:	200000f8 	.word	0x200000f8
 8000900:	200002b0 	.word	0x200002b0
 8000904:	20000004 	.word	0x20000004
 8000908:	20000094 	.word	0x20000094
 800090c:	08003c8c 	.word	0x08003c8c
 8000910:	08003c90 	.word	0x08003c90
 8000914:	200001c0 	.word	0x200001c0
 8000918:	2000015c 	.word	0x2000015c
 800091c:	08003c9c 	.word	0x08003c9c
 8000920:	08003ca0 	.word	0x08003ca0
 8000924:	08003cb8 	.word	0x08003cb8
 8000928:	08003cbc 	.word	0x08003cbc
					  memset(name,0,sizeof(name));
 800092c:	2264      	movs	r2, #100	; 0x64
 800092e:	2100      	movs	r1, #0
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <main+0x380>)
 8000932:	f002 fd11 	bl	8003358 <memset>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)== RESET){}
 8000936:	bf00      	nop
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <main+0x384>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	2b20      	cmp	r3, #32
 8000944:	d1f8      	bne.n	8000938 <main+0x2fc>
					  HAL_UART_Receive(&huart2, (uint32_t)&name, 100,1000);
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	2264      	movs	r2, #100	; 0x64
 800094c:	491b      	ldr	r1, [pc, #108]	; (80009bc <main+0x380>)
 800094e:	481c      	ldr	r0, [pc, #112]	; (80009c0 <main+0x384>)
 8000950:	f001 fff9 	bl	8002946 <HAL_UART_Receive>
				  while(name[0] == '\000'){
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <main+0x380>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0e7      	beq.n	800092c <main+0x2f0>

				  }
				  if((name[0] == 'q'||name[0] == 'Q') && name[1] == '\000'){
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <main+0x380>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b71      	cmp	r3, #113	; 0x71
 8000962:	d003      	beq.n	800096c <main+0x330>
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <main+0x380>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b51      	cmp	r3, #81	; 0x51
 800096a:	d113      	bne.n	8000994 <main+0x358>
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <main+0x380>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10f      	bne.n	8000994 <main+0x358>
				  	state3 == 0;
				  	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000974:	bf00      	nop
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <main+0x388>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	2b40      	cmp	r3, #64	; 0x40
 8000982:	d1f8      	bne.n	8000976 <main+0x33a>
				  	HAL_UART_Transmit(&huart3, (uint32_t)"\r\nUSER2 is disconected", 20, 1000);
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	2214      	movs	r2, #20
 800098a:	490f      	ldr	r1, [pc, #60]	; (80009c8 <main+0x38c>)
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <main+0x388>)
 800098e:	f001 ff57 	bl	8002840 <HAL_UART_Transmit>
				  	break;
 8000992:	e00f      	b.n	80009b4 <main+0x378>
				  }
				  else{

					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000994:	bf00      	nop
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <main+0x388>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b40      	cmp	r3, #64	; 0x40
 80009a2:	d1f8      	bne.n	8000996 <main+0x35a>
					  HAL_UART_Transmit(&huart3, (uint32_t)&name, 100, 1000);
 80009a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	4904      	ldr	r1, [pc, #16]	; (80009bc <main+0x380>)
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <main+0x388>)
 80009ae:	f001 ff47 	bl	8002840 <HAL_UART_Transmit>
	  if (state1 == 1 ){
 80009b2:	e662      	b.n	800067a <main+0x3e>
 80009b4:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000094 	.word	0x20000094
 80009c0:	200002b0 	.word	0x200002b0
 80009c4:	20000338 	.word	0x20000338
 80009c8:	08003cc8 	.word	0x08003cc8

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fcbc 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <SystemClock_Config+0xb0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <SystemClock_Config+0xb0>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <SystemClock_Config+0xb0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <SystemClock_Config+0xb4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SystemClock_Config+0xb4>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <SystemClock_Config+0xb4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fdf7 	bl	800162c <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a44:	f000 f84a 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f890 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f835 	bl	8000adc <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3750      	adds	r7, #80	; 0x50
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a96:	f000 fba1 	bl	80011dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aa6:	231f      	movs	r3, #31
 8000aa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aaa:	2387      	movs	r3, #135	; 0x87
 8000aac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fbbf 	bl	800124c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ace:	2004      	movs	r0, #4
 8000ad0:	f000 fb9c 	bl	800120c <HAL_MPU_Enable>

}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x44>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 fa28 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f002 fba6 	bl	8003304 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20080000 	.word	0x20080000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000224 	.word	0x20000224
 8000bec:	200003d8 	.word	0x200003d8

08000bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART1_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c58:	f001 fda4 	bl	80027a4 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f7ff ff3b 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000228 	.word	0x20000228
 8000c70:	40011000 	.word	0x40011000

08000c74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_USART2_UART_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb8:	f001 fd74 	bl	80027a4 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f7ff ff0b 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200002b0 	.word	0x200002b0
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART3_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d18:	f001 fd44 	bl	80027a4 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f7ff fedb 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000338 	.word	0x20000338
 8000d30:	40004800 	.word	0x40004800

08000d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0b2      	sub	sp, #200	; 0xc8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	2290      	movs	r2, #144	; 0x90
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 faff 	bl	8003358 <memset>
  if(uartHandle->Instance==USART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a63      	ldr	r2, [pc, #396]	; (8000eec <HAL_UART_MspInit+0x1b8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d13c      	bne.n	8000dde <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 f8ef 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d7c:	f7ff feae 	bl	8000adc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	4b5b      	ldr	r3, [pc, #364]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4a5a      	ldr	r2, [pc, #360]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8c:	4b58      	ldr	r3, [pc, #352]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a54      	ldr	r2, [pc, #336]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b52      	ldr	r3, [pc, #328]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4847      	ldr	r0, [pc, #284]	; (8000ef4 <HAL_UART_MspInit+0x1c0>)
 8000dd8:	f000 fa7c 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ddc:	e082      	b.n	8000ee4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <HAL_UART_MspInit+0x1c4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d13b      	bne.n	8000e60 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 f8ad 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000e00:	f7ff fe6c 	bl	8000adc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4828      	ldr	r0, [pc, #160]	; (8000efc <HAL_UART_MspInit+0x1c8>)
 8000e5a:	f000 fa3b 	bl	80012d4 <HAL_GPIO_Init>
}
 8000e5e:	e041      	b.n	8000ee4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <HAL_UART_MspInit+0x1cc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d13c      	bne.n	8000ee4 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 f86b 	bl	8001f54 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x154>
      Error_Handler();
 8000e84:	f7ff fe2a 	bl	8000adc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x1bc>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <HAL_UART_MspInit+0x1c8>)
 8000ee0:	f000 f9f8 	bl	80012d4 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	37c8      	adds	r7, #200	; 0xc8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40004800 	.word	0x40004800

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f20:	4c0b      	ldr	r4, [pc, #44]	; (8000f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2e:	f7ff fe5f 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f002 f9ed 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fb81 	bl	800063c <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f48:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 8000f4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f50:	200003d4 	.word	0x200003d4

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>

08000f56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f90a 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f60:	200f      	movs	r0, #15
 8000f62:	f000 f805 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fdbf 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f917 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f8ed 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	2000000c 	.word	0x2000000c

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000010 	.word	0x20000010
 8000ff4:	200003c0 	.word	0x200003c0

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200003c0 	.word	0x200003c0

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5c 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb0 	bl	8001130 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011e0:	f3bf 8f5f 	dmb	sy
}
 80011e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_MPU_Disable+0x28>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_MPU_Disable+0x28>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_MPU_Disable+0x2c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000ed90 	.word	0xe000ed90

0800120c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_MPU_Enable+0x38>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_MPU_Enable+0x3c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_MPU_Enable+0x3c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800122a:	f3bf 8f4f 	dsb	sy
}
 800122e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001230:	f3bf 8f6f 	isb	sy
}
 8001234:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed90 	.word	0xe000ed90
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	785a      	ldrb	r2, [r3, #1]
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_MPU_ConfigRegion+0x84>)
 800125a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d029      	beq.n	80012b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_MPU_ConfigRegion+0x84>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7b1b      	ldrb	r3, [r3, #12]
 8001270:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7adb      	ldrb	r3, [r3, #11]
 8001276:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001278:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7a9b      	ldrb	r3, [r3, #10]
 800127e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001280:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7b5b      	ldrb	r3, [r3, #13]
 8001286:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001288:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7b9b      	ldrb	r3, [r3, #14]
 800128e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001290:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7bdb      	ldrb	r3, [r3, #15]
 8001296:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001298:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7a5b      	ldrb	r3, [r3, #9]
 800129e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a1b      	ldrb	r3, [r3, #8]
 80012a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012b6:	e005      	b.n	80012c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_MPU_ConfigRegion+0x84>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_MPU_ConfigRegion+0x84>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed90 	.word	0xe000ed90

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e175      	b.n	80015e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8164 	bne.w	80015da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x56>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80be 	beq.w	80015da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001476:	4a61      	ldr	r2, [pc, #388]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_GPIO_Init+0x32c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d037      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x330>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d031      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a56      	ldr	r2, [pc, #344]	; (8001608 <HAL_GPIO_Init+0x334>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_GPIO_Init+0x338>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d025      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_GPIO_Init+0x33c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01f      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a53      	ldr	r2, [pc, #332]	; (8001614 <HAL_GPIO_Init+0x340>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_GPIO_Init+0x344>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_GPIO_Init+0x348>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a50      	ldr	r2, [pc, #320]	; (8001620 <HAL_GPIO_Init+0x34c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x350>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x21a>
 80014ea:	2309      	movs	r3, #9
 80014ec:	e012      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014ee:	230a      	movs	r3, #10
 80014f0:	e010      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_GPIO_Init+0x354>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae86 	bls.w	80012f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40022000 	.word	0x40022000
 8001624:	40022400 	.word	0x40022400
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e29b      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8087 	beq.w	800175e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001650:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b04      	cmp	r3, #4
 800165a:	d00c      	beq.n	8001676 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165c:	4b93      	ldr	r3, [pc, #588]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d112      	bne.n	800168e <HAL_RCC_OscConfig+0x62>
 8001668:	4b90      	ldr	r3, [pc, #576]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001674:	d10b      	bne.n	800168e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d06c      	beq.n	800175c <HAL_RCC_OscConfig+0x130>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d168      	bne.n	800175c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e275      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x7a>
 8001698:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a83      	ldr	r2, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e02e      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x9c>
 80016ae:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7e      	ldr	r2, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7b      	ldr	r2, [pc, #492]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0xc0>
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a72      	ldr	r2, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6b      	ldr	r2, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fc74 	bl	8000ff8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fc70 	bl	8000ff8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e229      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xe8>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fc60 	bl	8000ff8 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fc5c 	bl	8000ff8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e215      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x110>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d069      	beq.n	800183e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x190>
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1e9      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	493d      	ldr	r1, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e040      	b.n	800183e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d023      	beq.n	800180c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc12 	bl	8000ff8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc0e 	bl	8000ff8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1c7      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4929      	ldr	r1, [pc, #164]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
 800180a:	e018      	b.n	800183e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fbee 	bl	8000ff8 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fbea 	bl	8000ff8 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1a3      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d038      	beq.n	80018bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d019      	beq.n	8001886 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fbcb 	bl	8000ff8 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fbc7 	bl	8000ff8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e180      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x23a>
 8001884:	e01a      	b.n	80018bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fbb1 	bl	8000ff8 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fbad 	bl	8000ff8 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d903      	bls.n	80018b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e166      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
 80018ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b92      	ldr	r3, [pc, #584]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a4 	beq.w	8001a12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a88      	ldr	r2, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b86      	ldr	r3, [pc, #536]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	4b83      	ldr	r3, [pc, #524]	; (8001b00 <HAL_RCC_OscConfig+0x4d4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018fe:	4b80      	ldr	r3, [pc, #512]	; (8001b00 <HAL_RCC_OscConfig+0x4d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7f      	ldr	r2, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190a:	f7ff fb75 	bl	8000ff8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff fb71 	bl	8000ff8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e12a      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4d4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x31a>
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	e02d      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x33c>
 800194e:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a67      	ldr	r2, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x35e>
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a61      	ldr	r2, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb25 	bl	8000ff8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb21 	bl	8000ff8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0d8      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x386>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb0f 	bl	8000ff8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fb0b 	bl	8000ff8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0c2      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80ae 	beq.w	8001b78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d06d      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d14b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fadc 	bl	8000ff8 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fad8 	bl	8000ff8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e091      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	071b      	lsls	r3, r3, #28
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff faaa 	bl	8000ff8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff faa6 	bl	8000ff8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e05f      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
 8001ac6:	e057      	b.n	8001b78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa90 	bl	8000ff8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa8c 	bl	8000ff8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e045      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x4b0>
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x54c>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x558>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d030      	beq.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d129      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d122      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d119      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10f      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0d0      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d910      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 020f 	bic.w	r2, r3, #15
 8001bb6:	4965      	ldr	r1, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d040      	beq.n	8001cac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e073      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06b      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f9bc 	bl	8000ff8 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff f9b8 	bl	8000ff8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e053      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d210      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 020f 	bic.w	r2, r3, #15
 8001cc2:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d0>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1d4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f918 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08003ce0 	.word	0x08003ce0
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	2000000c 	.word	0x2000000c

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d64:	b090      	sub	sp, #64	; 0x40
 8001d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d00d      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	f200 80a1 	bhi.w	8001ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d92:	e09b      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d98:	e09b      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9e:	e098      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d028      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dcc:	fb03 f201 	mul.w	r2, r3, r1
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	fb00 f303 	mul.w	r3, r0, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a43      	ldr	r2, [pc, #268]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dda:	fba0 1202 	umull	r1, r2, r0, r2
 8001dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001de0:	460a      	mov	r2, r1
 8001de2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de6:	4413      	add	r3, r2
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	2200      	movs	r2, #0
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	61fa      	str	r2, [r7, #28]
 8001df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dfa:	f7fe fa79 	bl	80002f0 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4613      	mov	r3, r2
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e06:	e053      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	617a      	str	r2, [r7, #20]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e1a:	f04f 0b00 	mov.w	fp, #0
 8001e1e:	4652      	mov	r2, sl
 8001e20:	465b      	mov	r3, fp
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	0159      	lsls	r1, r3, #5
 8001e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e30:	0150      	lsls	r0, r2, #5
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ebb2 080a 	subs.w	r8, r2, sl
 8001e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e52:	ebb2 0408 	subs.w	r4, r2, r8
 8001e56:	eb63 0509 	sbc.w	r5, r3, r9
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	00eb      	lsls	r3, r5, #3
 8001e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e68:	00e2      	lsls	r2, r4, #3
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	eb14 030a 	adds.w	r3, r4, sl
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	eb45 030b 	adc.w	r3, r5, fp
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e86:	4629      	mov	r1, r5
 8001e88:	028b      	lsls	r3, r1, #10
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e90:	4621      	mov	r1, r4
 8001e92:	028a      	lsls	r2, r1, #10
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea4:	f7fe fa24 	bl	80002f0 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3740      	adds	r7, #64	; 0x40
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	017d7840 	.word	0x017d7840

08001eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f08:	f7ff fff0 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0a9b      	lsrs	r3, r3, #10
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4903      	ldr	r1, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	08003cf0 	.word	0x08003cf0

08001f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f30:	f7ff ffdc 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0b5b      	lsrs	r3, r3, #13
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4903      	ldr	r1, [pc, #12]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08003cf0 	.word	0x08003cf0

08001f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d012      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f7c:	4b69      	ldr	r3, [pc, #420]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a68      	ldr	r2, [pc, #416]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	4964      	ldr	r1, [pc, #400]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	4959      	ldr	r1, [pc, #356]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d017      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	494a      	ldr	r1, [pc, #296]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d101      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 808b 	beq.w	800214e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800205c:	f7fe ffcc 	bl	8000ff8 <HAL_GetTick>
 8002060:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7fe ffc8 	bl	8000ff8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e38f      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002076:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d035      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d02e      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d114      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ff90 	bl	8000ff8 <HAL_GetTick>
 80020d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe ff8c 	bl	8000ff8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e351      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0ee      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800210a:	d111      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800211a:	400b      	ands	r3, r1
 800211c:	4901      	ldr	r1, [pc, #4]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
 8002122:	e00b      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000
 800212c:	0ffffcff 	.word	0x0ffffcff
 8002130:	4bac      	ldr	r3, [pc, #688]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4aab      	ldr	r2, [pc, #684]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	4ba9      	ldr	r3, [pc, #676]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	49a6      	ldr	r1, [pc, #664]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	4313      	orrs	r3, r2
 800214c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800215a:	4ba2      	ldr	r3, [pc, #648]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002160:	4aa0      	ldr	r2, [pc, #640]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800216a:	4b9e      	ldr	r3, [pc, #632]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	499b      	ldr	r1, [pc, #620]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002188:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002196:	4993      	ldr	r1, [pc, #588]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021aa:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b8:	498a      	ldr	r1, [pc, #552]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021cc:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021da:	4982      	ldr	r1, [pc, #520]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ee:	4b7d      	ldr	r3, [pc, #500]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4979      	ldr	r1, [pc, #484]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002210:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4971      	ldr	r1, [pc, #452]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002232:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f023 020c 	bic.w	r2, r3, #12
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002240:	4968      	ldr	r1, [pc, #416]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002254:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	4960      	ldr	r1, [pc, #384]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	4957      	ldr	r1, [pc, #348]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002298:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	494f      	ldr	r1, [pc, #316]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4946      	ldr	r1, [pc, #280]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	493e      	ldr	r1, [pc, #248]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	4935      	ldr	r1, [pc, #212]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232e:	492d      	ldr	r1, [pc, #180]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d011      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002350:	4924      	ldr	r1, [pc, #144]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800235c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002360:	d101      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002390:	4914      	ldr	r1, [pc, #80]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b4:	490b      	ldr	r1, [pc, #44]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	4902      	ldr	r1, [pc, #8]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e0:	e002      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023f4:	4b8a      	ldr	r3, [pc, #552]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	4986      	ldr	r1, [pc, #536]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002428:	497d      	ldr	r1, [pc, #500]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d006      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80d6 	beq.w	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002444:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800244e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe fdd2 	bl	8000ff8 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002458:	f7fe fdce 	bl	8000ff8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e195      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d021      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	0e1b      	lsrs	r3, r3, #24
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4958      	ldr	r1, [pc, #352]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02e      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f0:	d129      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002500:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002506:	0f1b      	lsrs	r3, r3, #28
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	019a      	lsls	r2, r3, #6
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	071b      	lsls	r3, r3, #28
 8002526:	493e      	ldr	r1, [pc, #248]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002534:	f023 021f 	bic.w	r2, r3, #31
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	3b01      	subs	r3, #1
 800253e:	4938      	ldr	r1, [pc, #224]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002558:	0e1b      	lsrs	r3, r3, #24
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002566:	0f1b      	lsrs	r3, r3, #28
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	019a      	lsls	r2, r3, #6
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	071b      	lsls	r3, r3, #28
 8002586:	4926      	ldr	r1, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	019a      	lsls	r2, r3, #6
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	071b      	lsls	r3, r3, #28
 80025b6:	491a      	ldr	r1, [pc, #104]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ca:	f7fe fd15 	bl	8000ff8 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025d2:	f7fe fd11 	bl	8000ff8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0d8      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	f040 80ce 	bne.w	8002794 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fcf8 	bl	8000ff8 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800260a:	e00b      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800260c:	f7fe fcf4 	bl	8000ff8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d904      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0bb      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002624:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002630:	d0ec      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02e      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d12a      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	0f1b      	lsrs	r3, r3, #28
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	019a      	lsls	r2, r3, #6
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	071b      	lsls	r3, r3, #28
 800268e:	4944      	ldr	r1, [pc, #272]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	493d      	ldr	r1, [pc, #244]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d022      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d11d      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	0f1b      	lsrs	r3, r3, #28
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4929      	ldr	r1, [pc, #164]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	0e1b      	lsrs	r3, r3, #24
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	071b      	lsls	r3, r3, #28
 8002742:	4917      	ldr	r1, [pc, #92]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4911      	ldr	r1, [pc, #68]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fc44 	bl	8000ff8 <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002774:	f7fe fc40 	bl	8000ff8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e007      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800278e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002792:	d1ef      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e040      	b.n	8002838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fab4 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f974 	bl	8002ad0 <UART_SetConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e022      	b.n	8002838 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fbcc 	bl	8002f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800280e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800281e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc53 	bl	80030dc <UART_CheckIdleState>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002854:	2b20      	cmp	r3, #32
 8002856:	d171      	bne.n	800293c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_UART_Transmit+0x24>
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e06a      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002876:	f7fe fbbf 	bl	8000ff8 <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002894:	d108      	bne.n	80028a8 <HAL_UART_Transmit+0x68>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e003      	b.n	80028b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028b0:	e02c      	b.n	800290c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fc5a 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e038      	b.n	800293e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3302      	adds	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	e007      	b.n	80028fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1cc      	bne.n	80028b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fc27 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e005      	b.n	800293e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	; 0x28
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 80b1 	bne.w	8002ac4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_Receive+0x28>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0a9      	b.n	8002ac6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2222      	movs	r2, #34	; 0x22
 800297e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002988:	f7fe fb36 	bl	8000ff8 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d10e      	bne.n	80029c6 <HAL_UART_Receive+0x80>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_UART_Receive+0x76>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029ba:	e02d      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029c4:	e028      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_UART_Receive+0xa4>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Receive+0x9a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029de:	e01b      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	227f      	movs	r2, #127	; 0x7f
 80029e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029e8:	e016      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f2:	d10d      	bne.n	8002a10 <HAL_UART_Receive+0xca>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_UART_Receive+0xc0>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	227f      	movs	r2, #127	; 0x7f
 8002a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a04:	e008      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	223f      	movs	r2, #63	; 0x3f
 8002a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Receive+0xf6>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a44:	e032      	b.n	8002aac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2120      	movs	r1, #32
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb90 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e032      	b.n	8002ac6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	8a7b      	ldrh	r3, [r7, #18]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e00c      	b.n	8002a9a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8a7b      	ldrh	r3, [r7, #18]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1c6      	bne.n	8002a46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4ba6      	ldr	r3, [pc, #664]	; (8002d94 <UART_SetConfig+0x2c4>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a94      	ldr	r2, [pc, #592]	; (8002d98 <UART_SetConfig+0x2c8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d120      	bne.n	8002b8e <UART_SetConfig+0xbe>
 8002b4c:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d816      	bhi.n	8002b88 <UART_SetConfig+0xb8>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <UART_SetConfig+0x90>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b7d 	.word	0x08002b7d
 8002b68:	08002b77 	.word	0x08002b77
 8002b6c:	08002b83 	.word	0x08002b83
 8002b70:	2301      	movs	r3, #1
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e150      	b.n	8002e18 <UART_SetConfig+0x348>
 8002b76:	2302      	movs	r3, #2
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e14d      	b.n	8002e18 <UART_SetConfig+0x348>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e14a      	b.n	8002e18 <UART_SetConfig+0x348>
 8002b82:	2308      	movs	r3, #8
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e147      	b.n	8002e18 <UART_SetConfig+0x348>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	e144      	b.n	8002e18 <UART_SetConfig+0x348>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a83      	ldr	r2, [pc, #524]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d132      	bne.n	8002bfe <UART_SetConfig+0x12e>
 8002b98:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d828      	bhi.n	8002bf8 <UART_SetConfig+0x128>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <UART_SetConfig+0xdc>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002be1 	.word	0x08002be1
 8002bb0:	08002bf9 	.word	0x08002bf9
 8002bb4:	08002bf9 	.word	0x08002bf9
 8002bb8:	08002bf9 	.word	0x08002bf9
 8002bbc:	08002bed 	.word	0x08002bed
 8002bc0:	08002bf9 	.word	0x08002bf9
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002bf9 	.word	0x08002bf9
 8002bcc:	08002be7 	.word	0x08002be7
 8002bd0:	08002bf9 	.word	0x08002bf9
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002bf9 	.word	0x08002bf9
 8002bdc:	08002bf3 	.word	0x08002bf3
 8002be0:	2300      	movs	r3, #0
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e118      	b.n	8002e18 <UART_SetConfig+0x348>
 8002be6:	2302      	movs	r3, #2
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e115      	b.n	8002e18 <UART_SetConfig+0x348>
 8002bec:	2304      	movs	r3, #4
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e112      	b.n	8002e18 <UART_SetConfig+0x348>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	e10f      	b.n	8002e18 <UART_SetConfig+0x348>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e10c      	b.n	8002e18 <UART_SetConfig+0x348>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d120      	bne.n	8002c4a <UART_SetConfig+0x17a>
 8002c08:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d013      	beq.n	8002c3e <UART_SetConfig+0x16e>
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d814      	bhi.n	8002c44 <UART_SetConfig+0x174>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d009      	beq.n	8002c32 <UART_SetConfig+0x162>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d810      	bhi.n	8002c44 <UART_SetConfig+0x174>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <UART_SetConfig+0x15c>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d006      	beq.n	8002c38 <UART_SetConfig+0x168>
 8002c2a:	e00b      	b.n	8002c44 <UART_SetConfig+0x174>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e0f2      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c32:	2302      	movs	r3, #2
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e0ef      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e0ec      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e0e9      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c44:	2310      	movs	r3, #16
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e0e6      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a56      	ldr	r2, [pc, #344]	; (8002da8 <UART_SetConfig+0x2d8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d120      	bne.n	8002c96 <UART_SetConfig+0x1c6>
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c60:	d013      	beq.n	8002c8a <UART_SetConfig+0x1ba>
 8002c62:	2bc0      	cmp	r3, #192	; 0xc0
 8002c64:	d814      	bhi.n	8002c90 <UART_SetConfig+0x1c0>
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d009      	beq.n	8002c7e <UART_SetConfig+0x1ae>
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d810      	bhi.n	8002c90 <UART_SetConfig+0x1c0>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <UART_SetConfig+0x1a8>
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d006      	beq.n	8002c84 <UART_SetConfig+0x1b4>
 8002c76:	e00b      	b.n	8002c90 <UART_SetConfig+0x1c0>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e0cc      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e0c9      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c84:	2304      	movs	r3, #4
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e0c6      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	e0c3      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c90:	2310      	movs	r3, #16
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	e0c0      	b.n	8002e18 <UART_SetConfig+0x348>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a44      	ldr	r2, [pc, #272]	; (8002dac <UART_SetConfig+0x2dc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d125      	bne.n	8002cec <UART_SetConfig+0x21c>
 8002ca0:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cae:	d017      	beq.n	8002ce0 <UART_SetConfig+0x210>
 8002cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb4:	d817      	bhi.n	8002ce6 <UART_SetConfig+0x216>
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d00b      	beq.n	8002cd4 <UART_SetConfig+0x204>
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d811      	bhi.n	8002ce6 <UART_SetConfig+0x216>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <UART_SetConfig+0x1fe>
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d006      	beq.n	8002cda <UART_SetConfig+0x20a>
 8002ccc:	e00b      	b.n	8002ce6 <UART_SetConfig+0x216>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e0a1      	b.n	8002e18 <UART_SetConfig+0x348>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e09e      	b.n	8002e18 <UART_SetConfig+0x348>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e09b      	b.n	8002e18 <UART_SetConfig+0x348>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e098      	b.n	8002e18 <UART_SetConfig+0x348>
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e095      	b.n	8002e18 <UART_SetConfig+0x348>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d125      	bne.n	8002d42 <UART_SetConfig+0x272>
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d04:	d017      	beq.n	8002d36 <UART_SetConfig+0x266>
 8002d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d0a:	d817      	bhi.n	8002d3c <UART_SetConfig+0x26c>
 8002d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d10:	d00b      	beq.n	8002d2a <UART_SetConfig+0x25a>
 8002d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d16:	d811      	bhi.n	8002d3c <UART_SetConfig+0x26c>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <UART_SetConfig+0x254>
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d006      	beq.n	8002d30 <UART_SetConfig+0x260>
 8002d22:	e00b      	b.n	8002d3c <UART_SetConfig+0x26c>
 8002d24:	2301      	movs	r3, #1
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e076      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e073      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d30:	2304      	movs	r3, #4
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e070      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d36:	2308      	movs	r3, #8
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e06d      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e06a      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <UART_SetConfig+0x2e4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d138      	bne.n	8002dbe <UART_SetConfig+0x2ee>
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d5a:	d017      	beq.n	8002d8c <UART_SetConfig+0x2bc>
 8002d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d60:	d82a      	bhi.n	8002db8 <UART_SetConfig+0x2e8>
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	d00b      	beq.n	8002d80 <UART_SetConfig+0x2b0>
 8002d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6c:	d824      	bhi.n	8002db8 <UART_SetConfig+0x2e8>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <UART_SetConfig+0x2aa>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	d006      	beq.n	8002d86 <UART_SetConfig+0x2b6>
 8002d78:	e01e      	b.n	8002db8 <UART_SetConfig+0x2e8>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e04b      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d80:	2302      	movs	r3, #2
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e048      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d86:	2304      	movs	r3, #4
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e045      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e042      	b.n	8002e18 <UART_SetConfig+0x348>
 8002d92:	bf00      	nop
 8002d94:	efff69f3 	.word	0xefff69f3
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40004400 	.word	0x40004400
 8002da4:	40004800 	.word	0x40004800
 8002da8:	40004c00 	.word	0x40004c00
 8002dac:	40005000 	.word	0x40005000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	40007800 	.word	0x40007800
 8002db8:	2310      	movs	r3, #16
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e02c      	b.n	8002e18 <UART_SetConfig+0x348>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a72      	ldr	r2, [pc, #456]	; (8002f8c <UART_SetConfig+0x4bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d125      	bne.n	8002e14 <UART_SetConfig+0x344>
 8002dc8:	4b71      	ldr	r3, [pc, #452]	; (8002f90 <UART_SetConfig+0x4c0>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dd6:	d017      	beq.n	8002e08 <UART_SetConfig+0x338>
 8002dd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ddc:	d817      	bhi.n	8002e0e <UART_SetConfig+0x33e>
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de2:	d00b      	beq.n	8002dfc <UART_SetConfig+0x32c>
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d811      	bhi.n	8002e0e <UART_SetConfig+0x33e>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <UART_SetConfig+0x326>
 8002dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df2:	d006      	beq.n	8002e02 <UART_SetConfig+0x332>
 8002df4:	e00b      	b.n	8002e0e <UART_SetConfig+0x33e>
 8002df6:	2300      	movs	r3, #0
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e00d      	b.n	8002e18 <UART_SetConfig+0x348>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e00a      	b.n	8002e18 <UART_SetConfig+0x348>
 8002e02:	2304      	movs	r3, #4
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e007      	b.n	8002e18 <UART_SetConfig+0x348>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e004      	b.n	8002e18 <UART_SetConfig+0x348>
 8002e0e:	2310      	movs	r3, #16
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e001      	b.n	8002e18 <UART_SetConfig+0x348>
 8002e14:	2310      	movs	r3, #16
 8002e16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e20:	d15b      	bne.n	8002eda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d828      	bhi.n	8002e7a <UART_SetConfig+0x3aa>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x360>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e6b 	.word	0x08002e6b
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e7b 	.word	0x08002e7b
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7ff f856 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002e58:	61b8      	str	r0, [r7, #24]
        break;
 8002e5a:	e013      	b.n	8002e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7ff f866 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8002e60:	61b8      	str	r0, [r7, #24]
        break;
 8002e62:	e00f      	b.n	8002e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <UART_SetConfig+0x4c4>)
 8002e66:	61bb      	str	r3, [r7, #24]
        break;
 8002e68:	e00c      	b.n	8002e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7fe ff79 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8002e6e:	61b8      	str	r0, [r7, #24]
        break;
 8002e70:	e008      	b.n	8002e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61bb      	str	r3, [r7, #24]
        break;
 8002e78:	e004      	b.n	8002e84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	77bb      	strb	r3, [r7, #30]
        break;
 8002e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d074      	beq.n	8002f74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	005a      	lsls	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	d916      	bls.n	8002ed4 <UART_SetConfig+0x404>
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d212      	bcs.n	8002ed4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f023 030f 	bic.w	r3, r3, #15
 8002eb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	89fa      	ldrh	r2, [r7, #14]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	e04f      	b.n	8002f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77bb      	strb	r3, [r7, #30]
 8002ed8:	e04c      	b.n	8002f74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eda:	7ffb      	ldrb	r3, [r7, #31]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d828      	bhi.n	8002f32 <UART_SetConfig+0x462>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <UART_SetConfig+0x418>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	08002f33 	.word	0x08002f33
 8002ef8:	08002f23 	.word	0x08002f23
 8002efc:	08002f33 	.word	0x08002f33
 8002f00:	08002f33 	.word	0x08002f33
 8002f04:	08002f33 	.word	0x08002f33
 8002f08:	08002f2b 	.word	0x08002f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7fe fffa 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8002f10:	61b8      	str	r0, [r7, #24]
        break;
 8002f12:	e013      	b.n	8002f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7ff f80a 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8002f18:	61b8      	str	r0, [r7, #24]
        break;
 8002f1a:	e00f      	b.n	8002f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <UART_SetConfig+0x4c4>)
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e00c      	b.n	8002f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f22:	f7fe ff1d 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8002f26:	61b8      	str	r0, [r7, #24]
        break;
 8002f28:	e008      	b.n	8002f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2e:	61bb      	str	r3, [r7, #24]
        break;
 8002f30:	e004      	b.n	8002f3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	77bb      	strb	r3, [r7, #30]
        break;
 8002f3a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	085a      	lsrs	r2, r3, #1
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d909      	bls.n	8002f70 <UART_SetConfig+0x4a0>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d205      	bcs.n	8002f70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	e001      	b.n	8002f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f80:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40007c00 	.word	0x40007c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400

08002f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01a      	beq.n	80030ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003096:	d10a      	bne.n	80030ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030ec:	f7fd ff84 	bl	8000ff8 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d10e      	bne.n	800311e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f831 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e027      	b.n	800316e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d10e      	bne.n	800314a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800312c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f81b 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e011      	b.n	800316e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b09c      	sub	sp, #112	; 0x70
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	e0a7      	b.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	f000 80a3 	beq.w	80032d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fd ff31 	bl	8000ff8 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80031a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d13f      	bne.n	8003228 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031bc:	667b      	str	r3, [r7, #100]	; 0x64
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e6      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	663b      	str	r3, [r7, #96]	; 0x60
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e068      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d050      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003244:	d148      	bne.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800324e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
 8003270:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e6      	bne.n	8003250 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3308      	adds	r3, #8
 8003288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	613b      	str	r3, [r7, #16]
   return(result);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	66bb      	str	r3, [r7, #104]	; 0x68
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3308      	adds	r3, #8
 80032a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032a2:	623a      	str	r2, [r7, #32]
 80032a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	69f9      	ldr	r1, [r7, #28]
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e5      	bne.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e010      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f43f af48 	beq.w	8003188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3770      	adds	r7, #112	; 0x70
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <__errno>:
 8003304:	4b01      	ldr	r3, [pc, #4]	; (800330c <__errno+0x8>)
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000014 	.word	0x20000014

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4d0d      	ldr	r5, [pc, #52]	; (8003348 <__libc_init_array+0x38>)
 8003314:	4c0d      	ldr	r4, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003316:	1b64      	subs	r4, r4, r5
 8003318:	10a4      	asrs	r4, r4, #2
 800331a:	2600      	movs	r6, #0
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	4d0b      	ldr	r5, [pc, #44]	; (8003350 <__libc_init_array+0x40>)
 8003322:	4c0c      	ldr	r4, [pc, #48]	; (8003354 <__libc_init_array+0x44>)
 8003324:	f000 fc8e 	bl	8003c44 <_init>
 8003328:	1b64      	subs	r4, r4, r5
 800332a:	10a4      	asrs	r4, r4, #2
 800332c:	2600      	movs	r6, #0
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f855 3b04 	ldr.w	r3, [r5], #4
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	08003d34 	.word	0x08003d34
 800334c:	08003d34 	.word	0x08003d34
 8003350:	08003d34 	.word	0x08003d34
 8003354:	08003d38 	.word	0x08003d38

08003358 <memset>:
 8003358:	4402      	add	r2, r0
 800335a:	4603      	mov	r3, r0
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	f803 1b01 	strb.w	r1, [r3], #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <siprintf>:
 8003368:	b40e      	push	{r1, r2, r3}
 800336a:	b500      	push	{lr}
 800336c:	b09c      	sub	sp, #112	; 0x70
 800336e:	ab1d      	add	r3, sp, #116	; 0x74
 8003370:	9002      	str	r0, [sp, #8]
 8003372:	9006      	str	r0, [sp, #24]
 8003374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003378:	4809      	ldr	r0, [pc, #36]	; (80033a0 <siprintf+0x38>)
 800337a:	9107      	str	r1, [sp, #28]
 800337c:	9104      	str	r1, [sp, #16]
 800337e:	4909      	ldr	r1, [pc, #36]	; (80033a4 <siprintf+0x3c>)
 8003380:	f853 2b04 	ldr.w	r2, [r3], #4
 8003384:	9105      	str	r1, [sp, #20]
 8003386:	6800      	ldr	r0, [r0, #0]
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	a902      	add	r1, sp, #8
 800338c:	f000 f868 	bl	8003460 <_svfiprintf_r>
 8003390:	9b02      	ldr	r3, [sp, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	b01c      	add	sp, #112	; 0x70
 8003398:	f85d eb04 	ldr.w	lr, [sp], #4
 800339c:	b003      	add	sp, #12
 800339e:	4770      	bx	lr
 80033a0:	20000014 	.word	0x20000014
 80033a4:	ffff0208 	.word	0xffff0208

080033a8 <__ssputs_r>:
 80033a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	688e      	ldr	r6, [r1, #8]
 80033ae:	429e      	cmp	r6, r3
 80033b0:	4682      	mov	sl, r0
 80033b2:	460c      	mov	r4, r1
 80033b4:	4690      	mov	r8, r2
 80033b6:	461f      	mov	r7, r3
 80033b8:	d838      	bhi.n	800342c <__ssputs_r+0x84>
 80033ba:	898a      	ldrh	r2, [r1, #12]
 80033bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033c0:	d032      	beq.n	8003428 <__ssputs_r+0x80>
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	6909      	ldr	r1, [r1, #16]
 80033c6:	eba5 0901 	sub.w	r9, r5, r1
 80033ca:	6965      	ldr	r5, [r4, #20]
 80033cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033d4:	3301      	adds	r3, #1
 80033d6:	444b      	add	r3, r9
 80033d8:	106d      	asrs	r5, r5, #1
 80033da:	429d      	cmp	r5, r3
 80033dc:	bf38      	it	cc
 80033de:	461d      	movcc	r5, r3
 80033e0:	0553      	lsls	r3, r2, #21
 80033e2:	d531      	bpl.n	8003448 <__ssputs_r+0xa0>
 80033e4:	4629      	mov	r1, r5
 80033e6:	f000 fb63 	bl	8003ab0 <_malloc_r>
 80033ea:	4606      	mov	r6, r0
 80033ec:	b950      	cbnz	r0, 8003404 <__ssputs_r+0x5c>
 80033ee:	230c      	movs	r3, #12
 80033f0:	f8ca 3000 	str.w	r3, [sl]
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003404:	6921      	ldr	r1, [r4, #16]
 8003406:	464a      	mov	r2, r9
 8003408:	f000 fabe 	bl	8003988 <memcpy>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	6126      	str	r6, [r4, #16]
 800341a:	6165      	str	r5, [r4, #20]
 800341c:	444e      	add	r6, r9
 800341e:	eba5 0509 	sub.w	r5, r5, r9
 8003422:	6026      	str	r6, [r4, #0]
 8003424:	60a5      	str	r5, [r4, #8]
 8003426:	463e      	mov	r6, r7
 8003428:	42be      	cmp	r6, r7
 800342a:	d900      	bls.n	800342e <__ssputs_r+0x86>
 800342c:	463e      	mov	r6, r7
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	4632      	mov	r2, r6
 8003432:	4641      	mov	r1, r8
 8003434:	f000 fab6 	bl	80039a4 <memmove>
 8003438:	68a3      	ldr	r3, [r4, #8]
 800343a:	1b9b      	subs	r3, r3, r6
 800343c:	60a3      	str	r3, [r4, #8]
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	4433      	add	r3, r6
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	2000      	movs	r0, #0
 8003446:	e7db      	b.n	8003400 <__ssputs_r+0x58>
 8003448:	462a      	mov	r2, r5
 800344a:	f000 fba5 	bl	8003b98 <_realloc_r>
 800344e:	4606      	mov	r6, r0
 8003450:	2800      	cmp	r0, #0
 8003452:	d1e1      	bne.n	8003418 <__ssputs_r+0x70>
 8003454:	6921      	ldr	r1, [r4, #16]
 8003456:	4650      	mov	r0, sl
 8003458:	f000 fabe 	bl	80039d8 <_free_r>
 800345c:	e7c7      	b.n	80033ee <__ssputs_r+0x46>
	...

08003460 <_svfiprintf_r>:
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	4698      	mov	r8, r3
 8003466:	898b      	ldrh	r3, [r1, #12]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	b09d      	sub	sp, #116	; 0x74
 800346c:	4607      	mov	r7, r0
 800346e:	460d      	mov	r5, r1
 8003470:	4614      	mov	r4, r2
 8003472:	d50e      	bpl.n	8003492 <_svfiprintf_r+0x32>
 8003474:	690b      	ldr	r3, [r1, #16]
 8003476:	b963      	cbnz	r3, 8003492 <_svfiprintf_r+0x32>
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	f000 fb19 	bl	8003ab0 <_malloc_r>
 800347e:	6028      	str	r0, [r5, #0]
 8003480:	6128      	str	r0, [r5, #16]
 8003482:	b920      	cbnz	r0, 800348e <_svfiprintf_r+0x2e>
 8003484:	230c      	movs	r3, #12
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e0d1      	b.n	8003632 <_svfiprintf_r+0x1d2>
 800348e:	2340      	movs	r3, #64	; 0x40
 8003490:	616b      	str	r3, [r5, #20]
 8003492:	2300      	movs	r3, #0
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	2320      	movs	r3, #32
 8003498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800349c:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a0:	2330      	movs	r3, #48	; 0x30
 80034a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800364c <_svfiprintf_r+0x1ec>
 80034a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034aa:	f04f 0901 	mov.w	r9, #1
 80034ae:	4623      	mov	r3, r4
 80034b0:	469a      	mov	sl, r3
 80034b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b6:	b10a      	cbz	r2, 80034bc <_svfiprintf_r+0x5c>
 80034b8:	2a25      	cmp	r2, #37	; 0x25
 80034ba:	d1f9      	bne.n	80034b0 <_svfiprintf_r+0x50>
 80034bc:	ebba 0b04 	subs.w	fp, sl, r4
 80034c0:	d00b      	beq.n	80034da <_svfiprintf_r+0x7a>
 80034c2:	465b      	mov	r3, fp
 80034c4:	4622      	mov	r2, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	4638      	mov	r0, r7
 80034ca:	f7ff ff6d 	bl	80033a8 <__ssputs_r>
 80034ce:	3001      	adds	r0, #1
 80034d0:	f000 80aa 	beq.w	8003628 <_svfiprintf_r+0x1c8>
 80034d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034d6:	445a      	add	r2, fp
 80034d8:	9209      	str	r2, [sp, #36]	; 0x24
 80034da:	f89a 3000 	ldrb.w	r3, [sl]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a2 	beq.w	8003628 <_svfiprintf_r+0x1c8>
 80034e4:	2300      	movs	r3, #0
 80034e6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ee:	f10a 0a01 	add.w	sl, sl, #1
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	9307      	str	r3, [sp, #28]
 80034f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034fa:	931a      	str	r3, [sp, #104]	; 0x68
 80034fc:	4654      	mov	r4, sl
 80034fe:	2205      	movs	r2, #5
 8003500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003504:	4851      	ldr	r0, [pc, #324]	; (800364c <_svfiprintf_r+0x1ec>)
 8003506:	f7fc fea3 	bl	8000250 <memchr>
 800350a:	9a04      	ldr	r2, [sp, #16]
 800350c:	b9d8      	cbnz	r0, 8003546 <_svfiprintf_r+0xe6>
 800350e:	06d0      	lsls	r0, r2, #27
 8003510:	bf44      	itt	mi
 8003512:	2320      	movmi	r3, #32
 8003514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003518:	0711      	lsls	r1, r2, #28
 800351a:	bf44      	itt	mi
 800351c:	232b      	movmi	r3, #43	; 0x2b
 800351e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003522:	f89a 3000 	ldrb.w	r3, [sl]
 8003526:	2b2a      	cmp	r3, #42	; 0x2a
 8003528:	d015      	beq.n	8003556 <_svfiprintf_r+0xf6>
 800352a:	9a07      	ldr	r2, [sp, #28]
 800352c:	4654      	mov	r4, sl
 800352e:	2000      	movs	r0, #0
 8003530:	f04f 0c0a 	mov.w	ip, #10
 8003534:	4621      	mov	r1, r4
 8003536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353a:	3b30      	subs	r3, #48	; 0x30
 800353c:	2b09      	cmp	r3, #9
 800353e:	d94e      	bls.n	80035de <_svfiprintf_r+0x17e>
 8003540:	b1b0      	cbz	r0, 8003570 <_svfiprintf_r+0x110>
 8003542:	9207      	str	r2, [sp, #28]
 8003544:	e014      	b.n	8003570 <_svfiprintf_r+0x110>
 8003546:	eba0 0308 	sub.w	r3, r0, r8
 800354a:	fa09 f303 	lsl.w	r3, r9, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	9304      	str	r3, [sp, #16]
 8003552:	46a2      	mov	sl, r4
 8003554:	e7d2      	b.n	80034fc <_svfiprintf_r+0x9c>
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	1d19      	adds	r1, r3, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	9103      	str	r1, [sp, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	bfbb      	ittet	lt
 8003562:	425b      	neglt	r3, r3
 8003564:	f042 0202 	orrlt.w	r2, r2, #2
 8003568:	9307      	strge	r3, [sp, #28]
 800356a:	9307      	strlt	r3, [sp, #28]
 800356c:	bfb8      	it	lt
 800356e:	9204      	strlt	r2, [sp, #16]
 8003570:	7823      	ldrb	r3, [r4, #0]
 8003572:	2b2e      	cmp	r3, #46	; 0x2e
 8003574:	d10c      	bne.n	8003590 <_svfiprintf_r+0x130>
 8003576:	7863      	ldrb	r3, [r4, #1]
 8003578:	2b2a      	cmp	r3, #42	; 0x2a
 800357a:	d135      	bne.n	80035e8 <_svfiprintf_r+0x188>
 800357c:	9b03      	ldr	r3, [sp, #12]
 800357e:	1d1a      	adds	r2, r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	9203      	str	r2, [sp, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	bfb8      	it	lt
 8003588:	f04f 33ff 	movlt.w	r3, #4294967295
 800358c:	3402      	adds	r4, #2
 800358e:	9305      	str	r3, [sp, #20]
 8003590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800365c <_svfiprintf_r+0x1fc>
 8003594:	7821      	ldrb	r1, [r4, #0]
 8003596:	2203      	movs	r2, #3
 8003598:	4650      	mov	r0, sl
 800359a:	f7fc fe59 	bl	8000250 <memchr>
 800359e:	b140      	cbz	r0, 80035b2 <_svfiprintf_r+0x152>
 80035a0:	2340      	movs	r3, #64	; 0x40
 80035a2:	eba0 000a 	sub.w	r0, r0, sl
 80035a6:	fa03 f000 	lsl.w	r0, r3, r0
 80035aa:	9b04      	ldr	r3, [sp, #16]
 80035ac:	4303      	orrs	r3, r0
 80035ae:	3401      	adds	r4, #1
 80035b0:	9304      	str	r3, [sp, #16]
 80035b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b6:	4826      	ldr	r0, [pc, #152]	; (8003650 <_svfiprintf_r+0x1f0>)
 80035b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035bc:	2206      	movs	r2, #6
 80035be:	f7fc fe47 	bl	8000250 <memchr>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d038      	beq.n	8003638 <_svfiprintf_r+0x1d8>
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <_svfiprintf_r+0x1f4>)
 80035c8:	bb1b      	cbnz	r3, 8003612 <_svfiprintf_r+0x1b2>
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	3307      	adds	r3, #7
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	3308      	adds	r3, #8
 80035d4:	9303      	str	r3, [sp, #12]
 80035d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d8:	4433      	add	r3, r6
 80035da:	9309      	str	r3, [sp, #36]	; 0x24
 80035dc:	e767      	b.n	80034ae <_svfiprintf_r+0x4e>
 80035de:	fb0c 3202 	mla	r2, ip, r2, r3
 80035e2:	460c      	mov	r4, r1
 80035e4:	2001      	movs	r0, #1
 80035e6:	e7a5      	b.n	8003534 <_svfiprintf_r+0xd4>
 80035e8:	2300      	movs	r3, #0
 80035ea:	3401      	adds	r4, #1
 80035ec:	9305      	str	r3, [sp, #20]
 80035ee:	4619      	mov	r1, r3
 80035f0:	f04f 0c0a 	mov.w	ip, #10
 80035f4:	4620      	mov	r0, r4
 80035f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035fa:	3a30      	subs	r2, #48	; 0x30
 80035fc:	2a09      	cmp	r2, #9
 80035fe:	d903      	bls.n	8003608 <_svfiprintf_r+0x1a8>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0c5      	beq.n	8003590 <_svfiprintf_r+0x130>
 8003604:	9105      	str	r1, [sp, #20]
 8003606:	e7c3      	b.n	8003590 <_svfiprintf_r+0x130>
 8003608:	fb0c 2101 	mla	r1, ip, r1, r2
 800360c:	4604      	mov	r4, r0
 800360e:	2301      	movs	r3, #1
 8003610:	e7f0      	b.n	80035f4 <_svfiprintf_r+0x194>
 8003612:	ab03      	add	r3, sp, #12
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	462a      	mov	r2, r5
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <_svfiprintf_r+0x1f8>)
 800361a:	a904      	add	r1, sp, #16
 800361c:	4638      	mov	r0, r7
 800361e:	f3af 8000 	nop.w
 8003622:	1c42      	adds	r2, r0, #1
 8003624:	4606      	mov	r6, r0
 8003626:	d1d6      	bne.n	80035d6 <_svfiprintf_r+0x176>
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	065b      	lsls	r3, r3, #25
 800362c:	f53f af2c 	bmi.w	8003488 <_svfiprintf_r+0x28>
 8003630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003632:	b01d      	add	sp, #116	; 0x74
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	ab03      	add	r3, sp, #12
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	462a      	mov	r2, r5
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <_svfiprintf_r+0x1f8>)
 8003640:	a904      	add	r1, sp, #16
 8003642:	4638      	mov	r0, r7
 8003644:	f000 f87a 	bl	800373c <_printf_i>
 8003648:	e7eb      	b.n	8003622 <_svfiprintf_r+0x1c2>
 800364a:	bf00      	nop
 800364c:	08003cf8 	.word	0x08003cf8
 8003650:	08003d02 	.word	0x08003d02
 8003654:	00000000 	.word	0x00000000
 8003658:	080033a9 	.word	0x080033a9
 800365c:	08003cfe 	.word	0x08003cfe

08003660 <_printf_common>:
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	4616      	mov	r6, r2
 8003666:	4699      	mov	r9, r3
 8003668:	688a      	ldr	r2, [r1, #8]
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003670:	4293      	cmp	r3, r2
 8003672:	bfb8      	it	lt
 8003674:	4613      	movlt	r3, r2
 8003676:	6033      	str	r3, [r6, #0]
 8003678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800367c:	4607      	mov	r7, r0
 800367e:	460c      	mov	r4, r1
 8003680:	b10a      	cbz	r2, 8003686 <_printf_common+0x26>
 8003682:	3301      	adds	r3, #1
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	0699      	lsls	r1, r3, #26
 800368a:	bf42      	ittt	mi
 800368c:	6833      	ldrmi	r3, [r6, #0]
 800368e:	3302      	addmi	r3, #2
 8003690:	6033      	strmi	r3, [r6, #0]
 8003692:	6825      	ldr	r5, [r4, #0]
 8003694:	f015 0506 	ands.w	r5, r5, #6
 8003698:	d106      	bne.n	80036a8 <_printf_common+0x48>
 800369a:	f104 0a19 	add.w	sl, r4, #25
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	6832      	ldr	r2, [r6, #0]
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	dc26      	bgt.n	80036f6 <_printf_common+0x96>
 80036a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036ac:	1e13      	subs	r3, r2, #0
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	bf18      	it	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	0692      	lsls	r2, r2, #26
 80036b6:	d42b      	bmi.n	8003710 <_printf_common+0xb0>
 80036b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036bc:	4649      	mov	r1, r9
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	3001      	adds	r0, #1
 80036c4:	d01e      	beq.n	8003704 <_printf_common+0xa4>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	68e5      	ldr	r5, [r4, #12]
 80036ca:	6832      	ldr	r2, [r6, #0]
 80036cc:	f003 0306 	and.w	r3, r3, #6
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	bf08      	it	eq
 80036d4:	1aad      	subeq	r5, r5, r2
 80036d6:	68a3      	ldr	r3, [r4, #8]
 80036d8:	6922      	ldr	r2, [r4, #16]
 80036da:	bf0c      	ite	eq
 80036dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e0:	2500      	movne	r5, #0
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bfc4      	itt	gt
 80036e6:	1a9b      	subgt	r3, r3, r2
 80036e8:	18ed      	addgt	r5, r5, r3
 80036ea:	2600      	movs	r6, #0
 80036ec:	341a      	adds	r4, #26
 80036ee:	42b5      	cmp	r5, r6
 80036f0:	d11a      	bne.n	8003728 <_printf_common+0xc8>
 80036f2:	2000      	movs	r0, #0
 80036f4:	e008      	b.n	8003708 <_printf_common+0xa8>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4652      	mov	r2, sl
 80036fa:	4649      	mov	r1, r9
 80036fc:	4638      	mov	r0, r7
 80036fe:	47c0      	blx	r8
 8003700:	3001      	adds	r0, #1
 8003702:	d103      	bne.n	800370c <_printf_common+0xac>
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370c:	3501      	adds	r5, #1
 800370e:	e7c6      	b.n	800369e <_printf_common+0x3e>
 8003710:	18e1      	adds	r1, r4, r3
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	2030      	movs	r0, #48	; 0x30
 8003716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800371a:	4422      	add	r2, r4
 800371c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003724:	3302      	adds	r3, #2
 8003726:	e7c7      	b.n	80036b8 <_printf_common+0x58>
 8003728:	2301      	movs	r3, #1
 800372a:	4622      	mov	r2, r4
 800372c:	4649      	mov	r1, r9
 800372e:	4638      	mov	r0, r7
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d0e6      	beq.n	8003704 <_printf_common+0xa4>
 8003736:	3601      	adds	r6, #1
 8003738:	e7d9      	b.n	80036ee <_printf_common+0x8e>
	...

0800373c <_printf_i>:
 800373c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	7e0f      	ldrb	r7, [r1, #24]
 8003742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003744:	2f78      	cmp	r7, #120	; 0x78
 8003746:	4691      	mov	r9, r2
 8003748:	4680      	mov	r8, r0
 800374a:	460c      	mov	r4, r1
 800374c:	469a      	mov	sl, r3
 800374e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003752:	d807      	bhi.n	8003764 <_printf_i+0x28>
 8003754:	2f62      	cmp	r7, #98	; 0x62
 8003756:	d80a      	bhi.n	800376e <_printf_i+0x32>
 8003758:	2f00      	cmp	r7, #0
 800375a:	f000 80d8 	beq.w	800390e <_printf_i+0x1d2>
 800375e:	2f58      	cmp	r7, #88	; 0x58
 8003760:	f000 80a3 	beq.w	80038aa <_printf_i+0x16e>
 8003764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800376c:	e03a      	b.n	80037e4 <_printf_i+0xa8>
 800376e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003772:	2b15      	cmp	r3, #21
 8003774:	d8f6      	bhi.n	8003764 <_printf_i+0x28>
 8003776:	a101      	add	r1, pc, #4	; (adr r1, 800377c <_printf_i+0x40>)
 8003778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800377c:	080037d5 	.word	0x080037d5
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003765 	.word	0x08003765
 8003788:	08003765 	.word	0x08003765
 800378c:	08003765 	.word	0x08003765
 8003790:	08003765 	.word	0x08003765
 8003794:	080037e9 	.word	0x080037e9
 8003798:	08003765 	.word	0x08003765
 800379c:	08003765 	.word	0x08003765
 80037a0:	08003765 	.word	0x08003765
 80037a4:	08003765 	.word	0x08003765
 80037a8:	080038f5 	.word	0x080038f5
 80037ac:	08003819 	.word	0x08003819
 80037b0:	080038d7 	.word	0x080038d7
 80037b4:	08003765 	.word	0x08003765
 80037b8:	08003765 	.word	0x08003765
 80037bc:	08003917 	.word	0x08003917
 80037c0:	08003765 	.word	0x08003765
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003765 	.word	0x08003765
 80037cc:	08003765 	.word	0x08003765
 80037d0:	080038df 	.word	0x080038df
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	602a      	str	r2, [r5, #0]
 80037dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0a3      	b.n	8003930 <_printf_i+0x1f4>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	6829      	ldr	r1, [r5, #0]
 80037ec:	0606      	lsls	r6, r0, #24
 80037ee:	f101 0304 	add.w	r3, r1, #4
 80037f2:	d50a      	bpl.n	800380a <_printf_i+0xce>
 80037f4:	680e      	ldr	r6, [r1, #0]
 80037f6:	602b      	str	r3, [r5, #0]
 80037f8:	2e00      	cmp	r6, #0
 80037fa:	da03      	bge.n	8003804 <_printf_i+0xc8>
 80037fc:	232d      	movs	r3, #45	; 0x2d
 80037fe:	4276      	negs	r6, r6
 8003800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003804:	485e      	ldr	r0, [pc, #376]	; (8003980 <_printf_i+0x244>)
 8003806:	230a      	movs	r3, #10
 8003808:	e019      	b.n	800383e <_printf_i+0x102>
 800380a:	680e      	ldr	r6, [r1, #0]
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003812:	bf18      	it	ne
 8003814:	b236      	sxthne	r6, r6
 8003816:	e7ef      	b.n	80037f8 <_printf_i+0xbc>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	1d19      	adds	r1, r3, #4
 800381e:	6029      	str	r1, [r5, #0]
 8003820:	0601      	lsls	r1, r0, #24
 8003822:	d501      	bpl.n	8003828 <_printf_i+0xec>
 8003824:	681e      	ldr	r6, [r3, #0]
 8003826:	e002      	b.n	800382e <_printf_i+0xf2>
 8003828:	0646      	lsls	r6, r0, #25
 800382a:	d5fb      	bpl.n	8003824 <_printf_i+0xe8>
 800382c:	881e      	ldrh	r6, [r3, #0]
 800382e:	4854      	ldr	r0, [pc, #336]	; (8003980 <_printf_i+0x244>)
 8003830:	2f6f      	cmp	r7, #111	; 0x6f
 8003832:	bf0c      	ite	eq
 8003834:	2308      	moveq	r3, #8
 8003836:	230a      	movne	r3, #10
 8003838:	2100      	movs	r1, #0
 800383a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800383e:	6865      	ldr	r5, [r4, #4]
 8003840:	60a5      	str	r5, [r4, #8]
 8003842:	2d00      	cmp	r5, #0
 8003844:	bfa2      	ittt	ge
 8003846:	6821      	ldrge	r1, [r4, #0]
 8003848:	f021 0104 	bicge.w	r1, r1, #4
 800384c:	6021      	strge	r1, [r4, #0]
 800384e:	b90e      	cbnz	r6, 8003854 <_printf_i+0x118>
 8003850:	2d00      	cmp	r5, #0
 8003852:	d04d      	beq.n	80038f0 <_printf_i+0x1b4>
 8003854:	4615      	mov	r5, r2
 8003856:	fbb6 f1f3 	udiv	r1, r6, r3
 800385a:	fb03 6711 	mls	r7, r3, r1, r6
 800385e:	5dc7      	ldrb	r7, [r0, r7]
 8003860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003864:	4637      	mov	r7, r6
 8003866:	42bb      	cmp	r3, r7
 8003868:	460e      	mov	r6, r1
 800386a:	d9f4      	bls.n	8003856 <_printf_i+0x11a>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d10b      	bne.n	8003888 <_printf_i+0x14c>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	07de      	lsls	r6, r3, #31
 8003874:	d508      	bpl.n	8003888 <_printf_i+0x14c>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	6861      	ldr	r1, [r4, #4]
 800387a:	4299      	cmp	r1, r3
 800387c:	bfde      	ittt	le
 800387e:	2330      	movle	r3, #48	; 0x30
 8003880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003888:	1b52      	subs	r2, r2, r5
 800388a:	6122      	str	r2, [r4, #16]
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	464b      	mov	r3, r9
 8003892:	aa03      	add	r2, sp, #12
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fee2 	bl	8003660 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	d14c      	bne.n	800393a <_printf_i+0x1fe>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b004      	add	sp, #16
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	4835      	ldr	r0, [pc, #212]	; (8003980 <_printf_i+0x244>)
 80038ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038b0:	6829      	ldr	r1, [r5, #0]
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038b8:	6029      	str	r1, [r5, #0]
 80038ba:	061d      	lsls	r5, r3, #24
 80038bc:	d514      	bpl.n	80038e8 <_printf_i+0x1ac>
 80038be:	07df      	lsls	r7, r3, #31
 80038c0:	bf44      	itt	mi
 80038c2:	f043 0320 	orrmi.w	r3, r3, #32
 80038c6:	6023      	strmi	r3, [r4, #0]
 80038c8:	b91e      	cbnz	r6, 80038d2 <_printf_i+0x196>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f023 0320 	bic.w	r3, r3, #32
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	2310      	movs	r3, #16
 80038d4:	e7b0      	b.n	8003838 <_printf_i+0xfc>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	2378      	movs	r3, #120	; 0x78
 80038e0:	4828      	ldr	r0, [pc, #160]	; (8003984 <_printf_i+0x248>)
 80038e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038e6:	e7e3      	b.n	80038b0 <_printf_i+0x174>
 80038e8:	0659      	lsls	r1, r3, #25
 80038ea:	bf48      	it	mi
 80038ec:	b2b6      	uxthmi	r6, r6
 80038ee:	e7e6      	b.n	80038be <_printf_i+0x182>
 80038f0:	4615      	mov	r5, r2
 80038f2:	e7bb      	b.n	800386c <_printf_i+0x130>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	6826      	ldr	r6, [r4, #0]
 80038f8:	6961      	ldr	r1, [r4, #20]
 80038fa:	1d18      	adds	r0, r3, #4
 80038fc:	6028      	str	r0, [r5, #0]
 80038fe:	0635      	lsls	r5, r6, #24
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	d501      	bpl.n	8003908 <_printf_i+0x1cc>
 8003904:	6019      	str	r1, [r3, #0]
 8003906:	e002      	b.n	800390e <_printf_i+0x1d2>
 8003908:	0670      	lsls	r0, r6, #25
 800390a:	d5fb      	bpl.n	8003904 <_printf_i+0x1c8>
 800390c:	8019      	strh	r1, [r3, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	6123      	str	r3, [r4, #16]
 8003912:	4615      	mov	r5, r2
 8003914:	e7ba      	b.n	800388c <_printf_i+0x150>
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	1d1a      	adds	r2, r3, #4
 800391a:	602a      	str	r2, [r5, #0]
 800391c:	681d      	ldr	r5, [r3, #0]
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	2100      	movs	r1, #0
 8003922:	4628      	mov	r0, r5
 8003924:	f7fc fc94 	bl	8000250 <memchr>
 8003928:	b108      	cbz	r0, 800392e <_printf_i+0x1f2>
 800392a:	1b40      	subs	r0, r0, r5
 800392c:	6060      	str	r0, [r4, #4]
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	2300      	movs	r3, #0
 8003934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003938:	e7a8      	b.n	800388c <_printf_i+0x150>
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	462a      	mov	r2, r5
 800393e:	4649      	mov	r1, r9
 8003940:	4640      	mov	r0, r8
 8003942:	47d0      	blx	sl
 8003944:	3001      	adds	r0, #1
 8003946:	d0ab      	beq.n	80038a0 <_printf_i+0x164>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	079b      	lsls	r3, r3, #30
 800394c:	d413      	bmi.n	8003976 <_printf_i+0x23a>
 800394e:	68e0      	ldr	r0, [r4, #12]
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	4298      	cmp	r0, r3
 8003954:	bfb8      	it	lt
 8003956:	4618      	movlt	r0, r3
 8003958:	e7a4      	b.n	80038a4 <_printf_i+0x168>
 800395a:	2301      	movs	r3, #1
 800395c:	4632      	mov	r2, r6
 800395e:	4649      	mov	r1, r9
 8003960:	4640      	mov	r0, r8
 8003962:	47d0      	blx	sl
 8003964:	3001      	adds	r0, #1
 8003966:	d09b      	beq.n	80038a0 <_printf_i+0x164>
 8003968:	3501      	adds	r5, #1
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	9903      	ldr	r1, [sp, #12]
 800396e:	1a5b      	subs	r3, r3, r1
 8003970:	42ab      	cmp	r3, r5
 8003972:	dcf2      	bgt.n	800395a <_printf_i+0x21e>
 8003974:	e7eb      	b.n	800394e <_printf_i+0x212>
 8003976:	2500      	movs	r5, #0
 8003978:	f104 0619 	add.w	r6, r4, #25
 800397c:	e7f5      	b.n	800396a <_printf_i+0x22e>
 800397e:	bf00      	nop
 8003980:	08003d09 	.word	0x08003d09
 8003984:	08003d1a 	.word	0x08003d1a

08003988 <memcpy>:
 8003988:	440a      	add	r2, r1
 800398a:	4291      	cmp	r1, r2
 800398c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003990:	d100      	bne.n	8003994 <memcpy+0xc>
 8003992:	4770      	bx	lr
 8003994:	b510      	push	{r4, lr}
 8003996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800399a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800399e:	4291      	cmp	r1, r2
 80039a0:	d1f9      	bne.n	8003996 <memcpy+0xe>
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <memmove>:
 80039a4:	4288      	cmp	r0, r1
 80039a6:	b510      	push	{r4, lr}
 80039a8:	eb01 0402 	add.w	r4, r1, r2
 80039ac:	d902      	bls.n	80039b4 <memmove+0x10>
 80039ae:	4284      	cmp	r4, r0
 80039b0:	4623      	mov	r3, r4
 80039b2:	d807      	bhi.n	80039c4 <memmove+0x20>
 80039b4:	1e43      	subs	r3, r0, #1
 80039b6:	42a1      	cmp	r1, r4
 80039b8:	d008      	beq.n	80039cc <memmove+0x28>
 80039ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039c2:	e7f8      	b.n	80039b6 <memmove+0x12>
 80039c4:	4402      	add	r2, r0
 80039c6:	4601      	mov	r1, r0
 80039c8:	428a      	cmp	r2, r1
 80039ca:	d100      	bne.n	80039ce <memmove+0x2a>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039d6:	e7f7      	b.n	80039c8 <memmove+0x24>

080039d8 <_free_r>:
 80039d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039da:	2900      	cmp	r1, #0
 80039dc:	d044      	beq.n	8003a68 <_free_r+0x90>
 80039de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e2:	9001      	str	r0, [sp, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f1a1 0404 	sub.w	r4, r1, #4
 80039ea:	bfb8      	it	lt
 80039ec:	18e4      	addlt	r4, r4, r3
 80039ee:	f000 f913 	bl	8003c18 <__malloc_lock>
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <_free_r+0x94>)
 80039f4:	9801      	ldr	r0, [sp, #4]
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	b933      	cbnz	r3, 8003a08 <_free_r+0x30>
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6014      	str	r4, [r2, #0]
 80039fe:	b003      	add	sp, #12
 8003a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a04:	f000 b90e 	b.w	8003c24 <__malloc_unlock>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d908      	bls.n	8003a1e <_free_r+0x46>
 8003a0c:	6825      	ldr	r5, [r4, #0]
 8003a0e:	1961      	adds	r1, r4, r5
 8003a10:	428b      	cmp	r3, r1
 8003a12:	bf01      	itttt	eq
 8003a14:	6819      	ldreq	r1, [r3, #0]
 8003a16:	685b      	ldreq	r3, [r3, #4]
 8003a18:	1949      	addeq	r1, r1, r5
 8003a1a:	6021      	streq	r1, [r4, #0]
 8003a1c:	e7ed      	b.n	80039fa <_free_r+0x22>
 8003a1e:	461a      	mov	r2, r3
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b10b      	cbz	r3, 8003a28 <_free_r+0x50>
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d9fa      	bls.n	8003a1e <_free_r+0x46>
 8003a28:	6811      	ldr	r1, [r2, #0]
 8003a2a:	1855      	adds	r5, r2, r1
 8003a2c:	42a5      	cmp	r5, r4
 8003a2e:	d10b      	bne.n	8003a48 <_free_r+0x70>
 8003a30:	6824      	ldr	r4, [r4, #0]
 8003a32:	4421      	add	r1, r4
 8003a34:	1854      	adds	r4, r2, r1
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	d1e0      	bne.n	80039fe <_free_r+0x26>
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6053      	str	r3, [r2, #4]
 8003a42:	4421      	add	r1, r4
 8003a44:	6011      	str	r1, [r2, #0]
 8003a46:	e7da      	b.n	80039fe <_free_r+0x26>
 8003a48:	d902      	bls.n	8003a50 <_free_r+0x78>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6003      	str	r3, [r0, #0]
 8003a4e:	e7d6      	b.n	80039fe <_free_r+0x26>
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1961      	adds	r1, r4, r5
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf04      	itt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	6063      	str	r3, [r4, #4]
 8003a5e:	bf04      	itt	eq
 8003a60:	1949      	addeq	r1, r1, r5
 8003a62:	6021      	streq	r1, [r4, #0]
 8003a64:	6054      	str	r4, [r2, #4]
 8003a66:	e7ca      	b.n	80039fe <_free_r+0x26>
 8003a68:	b003      	add	sp, #12
 8003a6a:	bd30      	pop	{r4, r5, pc}
 8003a6c:	200003c4 	.word	0x200003c4

08003a70 <sbrk_aligned>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	4e0e      	ldr	r6, [pc, #56]	; (8003aac <sbrk_aligned+0x3c>)
 8003a74:	460c      	mov	r4, r1
 8003a76:	6831      	ldr	r1, [r6, #0]
 8003a78:	4605      	mov	r5, r0
 8003a7a:	b911      	cbnz	r1, 8003a82 <sbrk_aligned+0x12>
 8003a7c:	f000 f8bc 	bl	8003bf8 <_sbrk_r>
 8003a80:	6030      	str	r0, [r6, #0]
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f8b7 	bl	8003bf8 <_sbrk_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d00a      	beq.n	8003aa4 <sbrk_aligned+0x34>
 8003a8e:	1cc4      	adds	r4, r0, #3
 8003a90:	f024 0403 	bic.w	r4, r4, #3
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d007      	beq.n	8003aa8 <sbrk_aligned+0x38>
 8003a98:	1a21      	subs	r1, r4, r0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 f8ac 	bl	8003bf8 <_sbrk_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d101      	bne.n	8003aa8 <sbrk_aligned+0x38>
 8003aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	200003c8 	.word	0x200003c8

08003ab0 <_malloc_r>:
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab4:	1ccd      	adds	r5, r1, #3
 8003ab6:	f025 0503 	bic.w	r5, r5, #3
 8003aba:	3508      	adds	r5, #8
 8003abc:	2d0c      	cmp	r5, #12
 8003abe:	bf38      	it	cc
 8003ac0:	250c      	movcc	r5, #12
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	db01      	blt.n	8003acc <_malloc_r+0x1c>
 8003ac8:	42a9      	cmp	r1, r5
 8003aca:	d905      	bls.n	8003ad8 <_malloc_r+0x28>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad8:	4e2e      	ldr	r6, [pc, #184]	; (8003b94 <_malloc_r+0xe4>)
 8003ada:	f000 f89d 	bl	8003c18 <__malloc_lock>
 8003ade:	6833      	ldr	r3, [r6, #0]
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	bb34      	cbnz	r4, 8003b32 <_malloc_r+0x82>
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	f7ff ffc2 	bl	8003a70 <sbrk_aligned>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	4604      	mov	r4, r0
 8003af0:	d14d      	bne.n	8003b8e <_malloc_r+0xde>
 8003af2:	6834      	ldr	r4, [r6, #0]
 8003af4:	4626      	mov	r6, r4
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	d140      	bne.n	8003b7c <_malloc_r+0xcc>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	4631      	mov	r1, r6
 8003afe:	4638      	mov	r0, r7
 8003b00:	eb04 0803 	add.w	r8, r4, r3
 8003b04:	f000 f878 	bl	8003bf8 <_sbrk_r>
 8003b08:	4580      	cmp	r8, r0
 8003b0a:	d13a      	bne.n	8003b82 <_malloc_r+0xd2>
 8003b0c:	6821      	ldr	r1, [r4, #0]
 8003b0e:	3503      	adds	r5, #3
 8003b10:	1a6d      	subs	r5, r5, r1
 8003b12:	f025 0503 	bic.w	r5, r5, #3
 8003b16:	3508      	adds	r5, #8
 8003b18:	2d0c      	cmp	r5, #12
 8003b1a:	bf38      	it	cc
 8003b1c:	250c      	movcc	r5, #12
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4638      	mov	r0, r7
 8003b22:	f7ff ffa5 	bl	8003a70 <sbrk_aligned>
 8003b26:	3001      	adds	r0, #1
 8003b28:	d02b      	beq.n	8003b82 <_malloc_r+0xd2>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	442b      	add	r3, r5
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	e00e      	b.n	8003b50 <_malloc_r+0xa0>
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	1b52      	subs	r2, r2, r5
 8003b36:	d41e      	bmi.n	8003b76 <_malloc_r+0xc6>
 8003b38:	2a0b      	cmp	r2, #11
 8003b3a:	d916      	bls.n	8003b6a <_malloc_r+0xba>
 8003b3c:	1961      	adds	r1, r4, r5
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	6025      	str	r5, [r4, #0]
 8003b42:	bf18      	it	ne
 8003b44:	6059      	strne	r1, [r3, #4]
 8003b46:	6863      	ldr	r3, [r4, #4]
 8003b48:	bf08      	it	eq
 8003b4a:	6031      	streq	r1, [r6, #0]
 8003b4c:	5162      	str	r2, [r4, r5]
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	4638      	mov	r0, r7
 8003b52:	f104 060b 	add.w	r6, r4, #11
 8003b56:	f000 f865 	bl	8003c24 <__malloc_unlock>
 8003b5a:	f026 0607 	bic.w	r6, r6, #7
 8003b5e:	1d23      	adds	r3, r4, #4
 8003b60:	1af2      	subs	r2, r6, r3
 8003b62:	d0b6      	beq.n	8003ad2 <_malloc_r+0x22>
 8003b64:	1b9b      	subs	r3, r3, r6
 8003b66:	50a3      	str	r3, [r4, r2]
 8003b68:	e7b3      	b.n	8003ad2 <_malloc_r+0x22>
 8003b6a:	6862      	ldr	r2, [r4, #4]
 8003b6c:	42a3      	cmp	r3, r4
 8003b6e:	bf0c      	ite	eq
 8003b70:	6032      	streq	r2, [r6, #0]
 8003b72:	605a      	strne	r2, [r3, #4]
 8003b74:	e7ec      	b.n	8003b50 <_malloc_r+0xa0>
 8003b76:	4623      	mov	r3, r4
 8003b78:	6864      	ldr	r4, [r4, #4]
 8003b7a:	e7b2      	b.n	8003ae2 <_malloc_r+0x32>
 8003b7c:	4634      	mov	r4, r6
 8003b7e:	6876      	ldr	r6, [r6, #4]
 8003b80:	e7b9      	b.n	8003af6 <_malloc_r+0x46>
 8003b82:	230c      	movs	r3, #12
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4638      	mov	r0, r7
 8003b88:	f000 f84c 	bl	8003c24 <__malloc_unlock>
 8003b8c:	e7a1      	b.n	8003ad2 <_malloc_r+0x22>
 8003b8e:	6025      	str	r5, [r4, #0]
 8003b90:	e7de      	b.n	8003b50 <_malloc_r+0xa0>
 8003b92:	bf00      	nop
 8003b94:	200003c4 	.word	0x200003c4

08003b98 <_realloc_r>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	460e      	mov	r6, r1
 8003ba2:	b921      	cbnz	r1, 8003bae <_realloc_r+0x16>
 8003ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	4611      	mov	r1, r2
 8003baa:	f7ff bf81 	b.w	8003ab0 <_malloc_r>
 8003bae:	b92a      	cbnz	r2, 8003bbc <_realloc_r+0x24>
 8003bb0:	f7ff ff12 	bl	80039d8 <_free_r>
 8003bb4:	4625      	mov	r5, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	f000 f838 	bl	8003c30 <_malloc_usable_size_r>
 8003bc0:	4284      	cmp	r4, r0
 8003bc2:	4607      	mov	r7, r0
 8003bc4:	d802      	bhi.n	8003bcc <_realloc_r+0x34>
 8003bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bca:	d812      	bhi.n	8003bf2 <_realloc_r+0x5a>
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff ff6e 	bl	8003ab0 <_malloc_r>
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0ed      	beq.n	8003bb6 <_realloc_r+0x1e>
 8003bda:	42bc      	cmp	r4, r7
 8003bdc:	4622      	mov	r2, r4
 8003bde:	4631      	mov	r1, r6
 8003be0:	bf28      	it	cs
 8003be2:	463a      	movcs	r2, r7
 8003be4:	f7ff fed0 	bl	8003988 <memcpy>
 8003be8:	4631      	mov	r1, r6
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fef4 	bl	80039d8 <_free_r>
 8003bf0:	e7e1      	b.n	8003bb6 <_realloc_r+0x1e>
 8003bf2:	4635      	mov	r5, r6
 8003bf4:	e7df      	b.n	8003bb6 <_realloc_r+0x1e>
	...

08003bf8 <_sbrk_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d06      	ldr	r5, [pc, #24]	; (8003c14 <_sbrk_r+0x1c>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fc ffbe 	bl	8000b84 <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_sbrk_r+0x1a>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_sbrk_r+0x1a>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	200003cc 	.word	0x200003cc

08003c18 <__malloc_lock>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__malloc_lock+0x8>)
 8003c1a:	f000 b811 	b.w	8003c40 <__retarget_lock_acquire_recursive>
 8003c1e:	bf00      	nop
 8003c20:	200003d0 	.word	0x200003d0

08003c24 <__malloc_unlock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_unlock+0x8>)
 8003c26:	f000 b80c 	b.w	8003c42 <__retarget_lock_release_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	200003d0 	.word	0x200003d0

08003c30 <_malloc_usable_size_r>:
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f18      	subs	r0, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbc      	itt	lt
 8003c3a:	580b      	ldrlt	r3, [r1, r0]
 8003c3c:	18c0      	addlt	r0, r0, r3
 8003c3e:	4770      	bx	lr

08003c40 <__retarget_lock_acquire_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <__retarget_lock_release_recursive>:
 8003c42:	4770      	bx	lr

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
