
Lab-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003128  08003128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800313c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800313c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a500  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181b  00000000  00000000  0002a53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ca  00000000  00000000  0002cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a44a  00000000  00000000  00052d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed127  00000000  00000000  0005d18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a2b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c24  00000000  00000000  0014a304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003050 	.word	0x08003050

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003050 	.word	0x08003050

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x78>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_7, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f240 4181 	movw	r1, #1153	; 0x481
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0x7c>)
 800059a:	f000 fe57 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB10 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_7;
 800059e:	f240 4381 	movw	r3, #1153	; 0x481
 80005a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0x7c>)
 80005b8:	f000 fc9c 	bl	8000ef4 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020400 	.word	0x40020400

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b0a2      	sub	sp, #136	; 0x88
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fb28 	bl	8000c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f999 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f7ff ffb7 	bl	800054c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005de:	f000 fa69 	bl	8000ab4 <MX_USART3_UART_Init>
//	  HAL_UART_Transmit(&huart3, "\rInput => ", 10, 1000);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)&ch1, 1, 1000);
//	  HAL_UART_Transmit(&huart3, "\n", 1, 1000);
//	  HAL_Delay(500);
//	  Example 3
	  char TEXT1[] = "Display Blinking LED PRESS (1, 2)\n";
 80005e2:	4bc0      	ldr	r3, [pc, #768]	; (80008e4 <main+0x318>)
 80005e4:	f107 0420 	add.w	r4, r7, #32
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	7023      	strb	r3, [r4, #0]
	  char TEXT2[] = "\rDisplay Group Member Press m\n";
 80005fe:	4bba      	ldr	r3, [pc, #744]	; (80008e8 <main+0x31c>)
 8000600:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800060e:	c407      	stmia	r4!, {r0, r1, r2}
 8000610:	8023      	strh	r3, [r4, #0]
 8000612:	3402      	adds	r4, #2
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	7023      	strb	r3, [r4, #0]
	  char TEXT3[] = "\rQuit PRESS q\n";
 8000618:	4bb4      	ldr	r3, [pc, #720]	; (80008ec <main+0x320>)
 800061a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800061e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000620:	c407      	stmia	r4!, {r0, r1, r2}
 8000622:	8023      	strh	r3, [r4, #0]
 8000624:	3402      	adds	r4, #2
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	7023      	strb	r3, [r4, #0]
	  char TEXT4[] = "\r64015130\n\rWanburhan Wae-Useng\n";
 800062a:	4bb1      	ldr	r3, [pc, #708]	; (80008f0 <main+0x324>)
 800062c:	463c      	mov	r4, r7
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  char TEXT5[] = "\rUnknow Command\n";
 800063c:	4bad      	ldr	r3, [pc, #692]	; (80008f4 <main+0x328>)
 800063e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	7023      	strb	r3, [r4, #0]
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800064c:	bf00      	nop
 800064e:	4baa      	ldr	r3, [pc, #680]	; (80008f8 <main+0x32c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000658:	2b40      	cmp	r3, #64	; 0x40
 800065a:	d1f8      	bne.n	800064e <main+0x82>
	  HAL_UART_Transmit(&huart3,&TEXT1, strlen(TEXT1), 1000);
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fde9 	bl	8000238 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f107 0120 	add.w	r1, r7, #32
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	48a1      	ldr	r0, [pc, #644]	; (80008f8 <main+0x32c>)
 8000674:	f001 ff5e 	bl	8002534 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,&TEXT2, strlen(TEXT2), 1000);
 8000678:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fddb 	bl	8000238 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	489a      	ldr	r0, [pc, #616]	; (80008f8 <main+0x32c>)
 8000690:	f001 ff50 	bl	8002534 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,&TEXT3, strlen(TEXT3), 1000);
 8000694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdcd 	bl	8000238 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	4893      	ldr	r0, [pc, #588]	; (80008f8 <main+0x32c>)
 80006ac:	f001 ff42 	bl	8002534 <HAL_UART_Transmit>
	  while(1){
	  char ch1;
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET){}
 80006b0:	bf00      	nop
 80006b2:	4b91      	ldr	r3, [pc, #580]	; (80008f8 <main+0x32c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	2b20      	cmp	r3, #32
 80006be:	d1f8      	bne.n	80006b2 <main+0xe6>
	  HAL_UART_Receive(&huart3, (uint8_t*)&ch1, 1, 1000);
 80006c0:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	2201      	movs	r2, #1
 80006ca:	488b      	ldr	r0, [pc, #556]	; (80008f8 <main+0x32c>)
 80006cc:	f001 ffb5 	bl	800263a <HAL_UART_Receive>
	  if (ch1 == '1'){
 80006d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80006d4:	2b31      	cmp	r3, #49	; 0x31
 80006d6:	d150      	bne.n	800077a <main+0x1ae>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006d8:	bf00      	nop
 80006da:	4b87      	ldr	r3, [pc, #540]	; (80008f8 <main+0x32c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	2b40      	cmp	r3, #64	; 0x40
 80006e6:	d1f8      	bne.n	80006da <main+0x10e>
		  HAL_UART_Transmit(&huart3, "\rInput => ", 10, 1000);
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	220a      	movs	r2, #10
 80006ee:	4983      	ldr	r1, [pc, #524]	; (80008fc <main+0x330>)
 80006f0:	4881      	ldr	r0, [pc, #516]	; (80008f8 <main+0x32c>)
 80006f2:	f001 ff1f 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t*)&ch1, 1, 1000);
 80006f6:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	2201      	movs	r2, #1
 8000700:	487d      	ldr	r0, [pc, #500]	; (80008f8 <main+0x32c>)
 8000702:	f001 ff17 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, "\n", 1, 1000);
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	2201      	movs	r2, #1
 800070c:	497c      	ldr	r1, [pc, #496]	; (8000900 <main+0x334>)
 800070e:	487a      	ldr	r0, [pc, #488]	; (80008f8 <main+0x32c>)
 8000710:	f001 ff10 	bl	8002534 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2101      	movs	r1, #1
 8000718:	487a      	ldr	r0, [pc, #488]	; (8000904 <main+0x338>)
 800071a:	f000 fd97 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 800071e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000722:	f000 fadd 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	4876      	ldr	r0, [pc, #472]	; (8000904 <main+0x338>)
 800072c:	f000 fd8e 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000730:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000734:	f000 fad4 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	4871      	ldr	r0, [pc, #452]	; (8000904 <main+0x338>)
 800073e:	f000 fd85 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000746:	f000 facb 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	486d      	ldr	r0, [pc, #436]	; (8000904 <main+0x338>)
 8000750:	f000 fd7c 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000754:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000758:	f000 fac2 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4868      	ldr	r0, [pc, #416]	; (8000904 <main+0x338>)
 8000762:	f000 fd73 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000766:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800076a:	f000 fab9 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4864      	ldr	r0, [pc, #400]	; (8000904 <main+0x338>)
 8000774:	f000 fd6a 	bl	800124c <HAL_GPIO_WritePin>
 8000778:	e79a      	b.n	80006b0 <main+0xe4>
	  }
	  else if (ch1 == '2'){
 800077a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800077e:	2b32      	cmp	r3, #50	; 0x32
 8000780:	d150      	bne.n	8000824 <main+0x258>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000782:	bf00      	nop
 8000784:	4b5c      	ldr	r3, [pc, #368]	; (80008f8 <main+0x32c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	2b40      	cmp	r3, #64	; 0x40
 8000790:	d1f8      	bne.n	8000784 <main+0x1b8>
		  HAL_UART_Transmit(&huart3, "\rInput => ", 10, 1000);
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	220a      	movs	r2, #10
 8000798:	4958      	ldr	r1, [pc, #352]	; (80008fc <main+0x330>)
 800079a:	4857      	ldr	r0, [pc, #348]	; (80008f8 <main+0x32c>)
 800079c:	f001 feca 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t*)&ch1, 1, 1000);
 80007a0:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	2201      	movs	r2, #1
 80007aa:	4853      	ldr	r0, [pc, #332]	; (80008f8 <main+0x32c>)
 80007ac:	f001 fec2 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, "\n", 1, 1000);
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	2201      	movs	r2, #1
 80007b6:	4952      	ldr	r1, [pc, #328]	; (8000900 <main+0x334>)
 80007b8:	484f      	ldr	r0, [pc, #316]	; (80008f8 <main+0x32c>)
 80007ba:	f001 febb 	bl	8002534 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4850      	ldr	r0, [pc, #320]	; (8000904 <main+0x338>)
 80007c4:	f000 fd42 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80007c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007cc:	f000 fa88 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	484b      	ldr	r0, [pc, #300]	; (8000904 <main+0x338>)
 80007d6:	f000 fd39 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80007da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007de:	f000 fa7f 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4847      	ldr	r0, [pc, #284]	; (8000904 <main+0x338>)
 80007e8:	f000 fd30 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80007ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007f0:	f000 fa76 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	4842      	ldr	r0, [pc, #264]	; (8000904 <main+0x338>)
 80007fa:	f000 fd27 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80007fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000802:	f000 fa6d 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	483e      	ldr	r0, [pc, #248]	; (8000904 <main+0x338>)
 800080c:	f000 fd1e 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8000810:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000814:	f000 fa64 	bl	8000ce0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4839      	ldr	r0, [pc, #228]	; (8000904 <main+0x338>)
 800081e:	f000 fd15 	bl	800124c <HAL_GPIO_WritePin>
 8000822:	e745      	b.n	80006b0 <main+0xe4>
	  }
	  else if (ch1 == 'm'){
 8000824:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000828:	2b6d      	cmp	r3, #109	; 0x6d
 800082a:	d12a      	bne.n	8000882 <main+0x2b6>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800082c:	bf00      	nop
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <main+0x32c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000838:	2b40      	cmp	r3, #64	; 0x40
 800083a:	d1f8      	bne.n	800082e <main+0x262>
		  HAL_UART_Transmit(&huart3, "\rInput => ", 10, 1000);
 800083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000840:	220a      	movs	r2, #10
 8000842:	492e      	ldr	r1, [pc, #184]	; (80008fc <main+0x330>)
 8000844:	482c      	ldr	r0, [pc, #176]	; (80008f8 <main+0x32c>)
 8000846:	f001 fe75 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, (uint8_t*)&ch1, 1, 1000);
 800084a:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	2201      	movs	r2, #1
 8000854:	4828      	ldr	r0, [pc, #160]	; (80008f8 <main+0x32c>)
 8000856:	f001 fe6d 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, "\n", 1, 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	2201      	movs	r2, #1
 8000860:	4927      	ldr	r1, [pc, #156]	; (8000900 <main+0x334>)
 8000862:	4825      	ldr	r0, [pc, #148]	; (80008f8 <main+0x32c>)
 8000864:	f001 fe66 	bl	8002534 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,&TEXT4, strlen(TEXT4), 1000);
 8000868:	463b      	mov	r3, r7
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fce4 	bl	8000238 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	b29a      	uxth	r2, r3
 8000874:	4639      	mov	r1, r7
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <main+0x32c>)
 800087c:	f001 fe5a 	bl	8002534 <HAL_UART_Transmit>
 8000880:	e716      	b.n	80006b0 <main+0xe4>
	  }
	  else if (ch1 == 'q'){
 8000882:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000886:	2b71      	cmp	r3, #113	; 0x71
 8000888:	d10f      	bne.n	80008aa <main+0x2de>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800088a:	bf00      	nop
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <main+0x32c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	2b40      	cmp	r3, #64	; 0x40
 8000898:	d1f8      	bne.n	800088c <main+0x2c0>
		  HAL_UART_Transmit(&huart3, "Quit", 5, 1000);
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	2205      	movs	r2, #5
 80008a0:	4919      	ldr	r1, [pc, #100]	; (8000908 <main+0x33c>)
 80008a2:	4815      	ldr	r0, [pc, #84]	; (80008f8 <main+0x32c>)
 80008a4:	f001 fe46 	bl	8002534 <HAL_UART_Transmit>
//	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
//	  HAL_UART_Transmit(&huart3, "\rInput => ", 10, 1000);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)&ch1, 1, 1000);
//	  HAL_UART_Transmit(&huart3, "\n", 1, 1000);
	  }
	  break;
 80008a8:	e016      	b.n	80008d8 <main+0x30c>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80008aa:	bf00      	nop
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <main+0x32c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	2b40      	cmp	r3, #64	; 0x40
 80008b8:	d1f8      	bne.n	80008ac <main+0x2e0>
		  HAL_UART_Transmit(&huart3, &TEXT5, strlen(TEXT5), 1000);
 80008ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fcba 	bl	8000238 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x32c>)
 80008d2:	f001 fe2f 	bl	8002534 <HAL_UART_Transmit>
	  while(1){
 80008d6:	e6eb      	b.n	80006b0 <main+0xe4>
 80008d8:	2300      	movs	r3, #0
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
//	  HAL_Delay(500);

  }
  /* USER CODE END 3 */
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3788      	adds	r7, #136	; 0x88
 80008de:	46bd      	mov	sp, r7
 80008e0:	bdb0      	pop	{r4, r5, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	08003080 	.word	0x08003080
 80008e8:	080030a4 	.word	0x080030a4
 80008ec:	080030c4 	.word	0x080030c4
 80008f0:	080030d4 	.word	0x080030d4
 80008f4:	080030f4 	.word	0x080030f4
 80008f8:	20000028 	.word	0x20000028
 80008fc:	08003068 	.word	0x08003068
 8000900:	08003074 	.word	0x08003074
 8000904:	40020400 	.word	0x40020400
 8000908:	08003078 	.word	0x08003078

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2234      	movs	r2, #52	; 0x34
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fb90 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <SystemClock_Config+0xd4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <SystemClock_Config+0xd4>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0xd4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <SystemClock_Config+0xd8>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <SystemClock_Config+0xd8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000978:	23d8      	movs	r3, #216	; 0xd8
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fcc7 	bl	8001320 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000998:	f000 f826 	bl	80009e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800099c:	f000 fc70 	bl	8001280 <HAL_PWREx_EnableOverDrive>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009a6:	f000 f81f 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2302      	movs	r3, #2
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2107      	movs	r1, #7
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ff57 	bl	800187c <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009d4:	f000 f808 	bl	80009e8 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3750      	adds	r7, #80	; 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f90a 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART3_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART3_UART_Init+0x58>)
 8000af8:	f001 fcce 	bl	8002498 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f7ff ff71 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000028 	.word	0x20000028
 8000b10:	40004800 	.word	0x40004800

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0ae      	sub	sp, #184	; 0xb8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2290      	movs	r2, #144	; 0x90
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fa83 	bl	8003040 <memset>
  if(uartHandle->Instance==USART3)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d13c      	bne.n	8000bbe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f878 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b5e:	f7ff ff43 	bl	80009e8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0xb8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bac:	2307      	movs	r3, #7
 8000bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_UART_MspInit+0xbc>)
 8000bba:	f000 f99b 	bl	8000ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	37b8      	adds	r7, #184	; 0xb8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004800 	.word	0x40004800
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020c00 	.word	0x40020c00

08000bd4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ff47 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f002 f9f9 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fce1 	bl	80005cc <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c18:	08003130 	.word	0x08003130
  ldr r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c20:	200000b4 	.word	0x200000b4

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>

08000c26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 f92e 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c30:	200f      	movs	r0, #15
 8000c32:	f000 f805 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c36:	f7ff fedd 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f93b 	bl	8000eda <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f911 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200000b0 	.word	0x200000b0

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000b0 	.word	0x200000b0

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <__NVIC_SetPriorityGrouping+0x40>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x40>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	05fa0000 	.word	0x05fa0000

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e175      	b.n	8001200 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8164 	bne.w	80011fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x56>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80be 	beq.w	80011fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b66      	ldr	r3, [pc, #408]	; (8001218 <HAL_GPIO_Init+0x324>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a65      	ldr	r2, [pc, #404]	; (8001218 <HAL_GPIO_Init+0x324>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_GPIO_Init+0x324>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001096:	4a61      	ldr	r2, [pc, #388]	; (800121c <HAL_GPIO_Init+0x328>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x32c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d037      	beq.n	8001132 <HAL_GPIO_Init+0x23e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a57      	ldr	r2, [pc, #348]	; (8001224 <HAL_GPIO_Init+0x330>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d031      	beq.n	800112e <HAL_GPIO_Init+0x23a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a56      	ldr	r2, [pc, #344]	; (8001228 <HAL_GPIO_Init+0x334>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x236>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a55      	ldr	r2, [pc, #340]	; (800122c <HAL_GPIO_Init+0x338>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x232>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a54      	ldr	r2, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x33c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x22e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a53      	ldr	r2, [pc, #332]	; (8001234 <HAL_GPIO_Init+0x340>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x22a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_GPIO_Init+0x344>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x348>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_GPIO_Init+0x34c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <HAL_GPIO_Init+0x350>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x21a>
 800110a:	2309      	movs	r3, #9
 800110c:	e012      	b.n	8001134 <HAL_GPIO_Init+0x240>
 800110e:	230a      	movs	r3, #10
 8001110:	e010      	b.n	8001134 <HAL_GPIO_Init+0x240>
 8001112:	2308      	movs	r3, #8
 8001114:	e00e      	b.n	8001134 <HAL_GPIO_Init+0x240>
 8001116:	2307      	movs	r3, #7
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x240>
 800111a:	2306      	movs	r3, #6
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x240>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x240>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x240>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x240>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x240>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x240>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x328>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <HAL_GPIO_Init+0x354>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a34      	ldr	r2, [pc, #208]	; (8001248 <HAL_GPIO_Init+0x354>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <HAL_GPIO_Init+0x354>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a29      	ldr	r2, [pc, #164]	; (8001248 <HAL_GPIO_Init+0x354>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_GPIO_Init+0x354>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_GPIO_Init+0x354>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_GPIO_Init+0x354>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_GPIO_Init+0x354>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae86 	bls.w	8000f14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40022000 	.word	0x40022000
 8001244:	40022400 	.word	0x40022400
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_PWREx_EnableOverDrive+0x98>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_PWREx_EnableOverDrive+0x98>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PWREx_EnableOverDrive+0x98>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ae:	f7ff fd0b 	bl	8000cc8 <HAL_GetTick>
 80012b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012b4:	e009      	b.n	80012ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012b6:	f7ff fd07 	bl	8000cc8 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c4:	d901      	bls.n	80012ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e022      	b.n	8001310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d6:	d1ee      	bne.n	80012b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff fcf0 	bl	8000cc8 <HAL_GetTick>
 80012e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ea:	e009      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ec:	f7ff fcec 	bl	8000cc8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fa:	d901      	bls.n	8001300 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e007      	b.n	8001310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800130c:	d1ee      	bne.n	80012ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e29b      	b.n	800186e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001350:	4b93      	ldr	r3, [pc, #588]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
 800135c:	4b90      	ldr	r3, [pc, #576]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b8d      	ldr	r3, [pc, #564]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x130>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e275      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x7a>
 800138c:	4b84      	ldr	r3, [pc, #528]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a83      	ldr	r2, [pc, #524]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x9c>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7b      	ldr	r2, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013e0:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc62 	bl	8000cc8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc5e 	bl	8000cc8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e229      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc4e 	bl	8000cc8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fc4a 	bl	8000cc8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e215      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x110>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d069      	beq.n	8001532 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x190>
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x17a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1e9      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	493d      	ldr	r1, [pc, #244]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e040      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d023      	beq.n	8001500 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc00 	bl	8000cc8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fbfc 	bl	8000cc8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1c7      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4929      	ldr	r1, [pc, #164]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
 80014fe:	e018      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fbdc 	bl	8000cc8 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fbd8 	bl	8000cc8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1a3      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d038      	beq.n	80015b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d019      	beq.n	800157a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fbb9 	bl	8000cc8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fbb5 	bl	8000cc8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e180      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800156e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x23a>
 8001578:	e01a      	b.n	80015b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb9f 	bl	8000cc8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fb9b 	bl	8000cc8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d903      	bls.n	80015a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e166      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
 80015a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a4 	beq.w	8001706 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b8c      	ldr	r3, [pc, #560]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a88      	ldr	r2, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e6:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7f      	ldr	r2, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb63 	bl	8000cc8 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fb5f 	bl	8000cc8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e12a      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x31a>
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	e02d      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x33c>
 8001642:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a6a      	ldr	r2, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x35e>
 8001664:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a61      	ldr	r2, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a5e      	ldr	r2, [pc, #376]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fb13 	bl	8000cc8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb0f 	bl	8000cc8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0d8      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x386>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fafd 	bl	8000cc8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff faf9 	bl	8000cc8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0c2      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a3c      	ldr	r2, [pc, #240]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80ae 	beq.w	800186c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d06d      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d14b      	bne.n	80017bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff faca 	bl	8000cc8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fac6 	bl	8000cc8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e091      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	071b      	lsls	r3, r3, #28
 8001782:	491b      	ldr	r1, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fa98 	bl	8000cc8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fa94 	bl	8000cc8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e05f      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x47c>
 80017ba:	e057      	b.n	800186c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fa7e 	bl	8000cc8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa7a 	bl	8000cc8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4b0>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x54c>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x558>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d030      	beq.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d129      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d122      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001830:	4293      	cmp	r3, r2
 8001832:	d119      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d10f      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0d0      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 020f 	bic.w	r2, r3, #15
 80018aa:	4965      	ldr	r1, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e073      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f023 0203 	bic.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001970:	f7ff f9aa 	bl	8000cc8 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f9a6 	bl	8000cc8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e053      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 020c 	and.w	r2, r3, #12
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	429a      	cmp	r2, r3
 800199e:	d1eb      	bne.n	8001978 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d210      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1cc>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1d0>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1d4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f906 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08003108 	.word	0x08003108
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b090      	sub	sp, #64	; 0x40
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80a1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e09b      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a8c:	e09b      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a92:	e098      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d028      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001abc:	2100      	movs	r1, #0
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac0:	fb03 f201 	mul.w	r2, r3, r1
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	fb00 f303 	mul.w	r3, r0, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ace:	fba0 1202 	umull	r1, r2, r0, r2
 8001ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ada:	4413      	add	r3, r2
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	61fa      	str	r2, [r7, #28]
 8001ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aee:	f7fe fbab 	bl	8000248 <__aeabi_uldivmod>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afa:	e053      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	617a      	str	r2, [r7, #20]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b0e:	f04f 0b00 	mov.w	fp, #0
 8001b12:	4652      	mov	r2, sl
 8001b14:	465b      	mov	r3, fp
 8001b16:	f04f 0000 	mov.w	r0, #0
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	0159      	lsls	r1, r3, #5
 8001b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b24:	0150      	lsls	r0, r2, #5
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b46:	ebb2 0408 	subs.w	r4, r2, r8
 8001b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	00eb      	lsls	r3, r5, #3
 8001b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5c:	00e2      	lsls	r2, r4, #3
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	eb14 030a 	adds.w	r3, r4, sl
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	eb45 030b 	adc.w	r3, r5, fp
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b98:	f7fe fb56 	bl	8000248 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3740      	adds	r7, #64	; 0x40
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	017d7840 	.word	0x017d7840

08001be0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08003118 	.word	0x08003118

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c24:	f7ff ffdc 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0b5b      	lsrs	r3, r3, #13
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08003118 	.word	0x08003118

08001c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d012      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a68      	ldr	r2, [pc, #416]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	4964      	ldr	r1, [pc, #400]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	4959      	ldr	r1, [pc, #356]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d017      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cde:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	494a      	ldr	r1, [pc, #296]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 808b 	beq.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d50:	f7fe ffba 	bl	8000cc8 <HAL_GetTick>
 8001d54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7fe ffb6 	bl	8000cc8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e38f      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d035      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d02e      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d114      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff7e 	bl	8000cc8 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ff7a 	bl	8000cc8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e351      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dfe:	d111      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e0e:	400b      	ands	r3, r1
 8001e10:	4901      	ldr	r1, [pc, #4]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	0ffffcff 	.word	0x0ffffcff
 8001e24:	4bac      	ldr	r3, [pc, #688]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4aab      	ldr	r2, [pc, #684]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	4ba9      	ldr	r3, [pc, #676]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	49a6      	ldr	r1, [pc, #664]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e4e:	4ba2      	ldr	r3, [pc, #648]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e54:	4aa0      	ldr	r2, [pc, #640]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e5e:	4b9e      	ldr	r3, [pc, #632]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	499b      	ldr	r1, [pc, #620]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e7c:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e8a:	4993      	ldr	r1, [pc, #588]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e9e:	4b8e      	ldr	r3, [pc, #568]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eac:	498a      	ldr	r1, [pc, #552]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec0:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ece:	4982      	ldr	r1, [pc, #520]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4979      	ldr	r1, [pc, #484]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f04:	4b74      	ldr	r3, [pc, #464]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4971      	ldr	r1, [pc, #452]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f023 020c 	bic.w	r2, r3, #12
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	4968      	ldr	r1, [pc, #416]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f48:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4960      	ldr	r1, [pc, #384]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f78:	4957      	ldr	r1, [pc, #348]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	494f      	ldr	r1, [pc, #316]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4946      	ldr	r1, [pc, #280]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	493e      	ldr	r1, [pc, #248]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002022:	492d      	ldr	r1, [pc, #180]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002044:	4924      	ldr	r1, [pc, #144]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002084:	4914      	ldr	r1, [pc, #80]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a8:	490b      	ldr	r1, [pc, #44]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00f      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020cc:	4902      	ldr	r1, [pc, #8]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d4:	e002      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020e8:	4b8a      	ldr	r3, [pc, #552]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	4986      	ldr	r1, [pc, #536]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800210c:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002112:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	497d      	ldr	r1, [pc, #500]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d006      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80d6 	beq.w	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002138:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fdc0 	bl	8000cc8 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800214c:	f7fe fdbc 	bl	8000cc8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e195      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800215e:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d021      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800217e:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	019a      	lsls	r2, r3, #6
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	4958      	ldr	r1, [pc, #352]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02e      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e4:	d129      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	019a      	lsls	r2, r3, #6
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	071b      	lsls	r3, r3, #28
 800221a:	493e      	ldr	r1, [pc, #248]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002228:	f023 021f 	bic.w	r2, r3, #31
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	3b01      	subs	r3, #1
 8002232:	4938      	ldr	r1, [pc, #224]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800224c:	0e1b      	lsrs	r3, r3, #24
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225a:	0f1b      	lsrs	r3, r3, #28
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	019a      	lsls	r2, r3, #6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	4926      	ldr	r1, [pc, #152]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	491a      	ldr	r1, [pc, #104]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022be:	f7fe fd03 	bl	8000cc8 <HAL_GetTick>
 80022c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c6:	f7fe fcff 	bl	8000cc8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0d8      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 80ce 	bne.w	8002488 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7fe fce6 	bl	8000cc8 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002300:	f7fe fce2 	bl	8000cc8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0bb      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002324:	d0ec      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002342:	2b00      	cmp	r3, #0
 8002344:	d02e      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d12a      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800235c:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	071b      	lsls	r3, r3, #28
 8002382:	4944      	ldr	r1, [pc, #272]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800238a:	4b42      	ldr	r3, [pc, #264]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	493d      	ldr	r1, [pc, #244]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d022      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b8:	d11d      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ba:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023c8:	4b32      	ldr	r3, [pc, #200]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	0f1b      	lsrs	r3, r3, #28
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4929      	ldr	r1, [pc, #164]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	0e1b      	lsrs	r3, r3, #24
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	4911      	ldr	r1, [pc, #68]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fc32 	bl	8000cc8 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002468:	f7fe fc2e 	bl	8000cc8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e007      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002486:	d1ef      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e040      	b.n	800252c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fb2a 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f974 	bl	80027c4 <UART_SetConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fbcc 	bl	8002c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fc53 	bl	8002dd0 <UART_CheckIdleState>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	2b20      	cmp	r3, #32
 800254a:	d171      	bne.n	8002630 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Transmit+0x24>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e06a      	b.n	8002632 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2221      	movs	r2, #33	; 0x21
 8002568:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7fe fbad 	bl	8000cc8 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x68>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e02c      	b.n	8002600 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fc5a 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e038      	b.n	8002632 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1cc      	bne.n	80025a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fc27 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e005      	b.n	8002632 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b08a      	sub	sp, #40	; 0x28
 800263e:	af02      	add	r7, sp, #8
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002650:	2b20      	cmp	r3, #32
 8002652:	f040 80b1 	bne.w	80027b8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_UART_Receive+0x28>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a9      	b.n	80027ba <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2222      	movs	r2, #34	; 0x22
 8002672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267c:	f7fe fb24 	bl	8000cc8 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d10e      	bne.n	80026ba <HAL_UART_Receive+0x80>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_Receive+0x76>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80026aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026ae:	e02d      	b.n	800270c <HAL_UART_Receive+0xd2>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026b8:	e028      	b.n	800270c <HAL_UART_Receive+0xd2>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_UART_Receive+0xa4>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_Receive+0x9a>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	22ff      	movs	r2, #255	; 0xff
 80026ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026d2:	e01b      	b.n	800270c <HAL_UART_Receive+0xd2>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026dc:	e016      	b.n	800270c <HAL_UART_Receive+0xd2>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e6:	d10d      	bne.n	8002704 <HAL_UART_Receive+0xca>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <HAL_UART_Receive+0xc0>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	227f      	movs	r2, #127	; 0x7f
 80026f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026f8:	e008      	b.n	800270c <HAL_UART_Receive+0xd2>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	223f      	movs	r2, #63	; 0x3f
 80026fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002702:	e003      	b.n	800270c <HAL_UART_Receive+0xd2>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002712:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271c:	d108      	bne.n	8002730 <HAL_UART_Receive+0xf6>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e003      	b.n	8002738 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002738:	e032      	b.n	80027a0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	2120      	movs	r1, #32
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fb90 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e032      	b.n	80027ba <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	b29a      	uxth	r2, r3
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	4013      	ands	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	3302      	adds	r3, #2
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e00c      	b.n	800278e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2da      	uxtb	r2, r3
 800277c:	8a7b      	ldrh	r3, [r7, #18]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4013      	ands	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	3301      	adds	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1c6      	bne.n	800273a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4ba6      	ldr	r3, [pc, #664]	; (8002a88 <UART_SetConfig+0x2c4>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	6979      	ldr	r1, [r7, #20]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a94      	ldr	r2, [pc, #592]	; (8002a8c <UART_SetConfig+0x2c8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d120      	bne.n	8002882 <UART_SetConfig+0xbe>
 8002840:	4b93      	ldr	r3, [pc, #588]	; (8002a90 <UART_SetConfig+0x2cc>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d816      	bhi.n	800287c <UART_SetConfig+0xb8>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <UART_SetConfig+0x90>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002865 	.word	0x08002865
 8002858:	08002871 	.word	0x08002871
 800285c:	0800286b 	.word	0x0800286b
 8002860:	08002877 	.word	0x08002877
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e150      	b.n	8002b0c <UART_SetConfig+0x348>
 800286a:	2302      	movs	r3, #2
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e14d      	b.n	8002b0c <UART_SetConfig+0x348>
 8002870:	2304      	movs	r3, #4
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e14a      	b.n	8002b0c <UART_SetConfig+0x348>
 8002876:	2308      	movs	r3, #8
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e147      	b.n	8002b0c <UART_SetConfig+0x348>
 800287c:	2310      	movs	r3, #16
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e144      	b.n	8002b0c <UART_SetConfig+0x348>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a83      	ldr	r2, [pc, #524]	; (8002a94 <UART_SetConfig+0x2d0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d132      	bne.n	80028f2 <UART_SetConfig+0x12e>
 800288c:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <UART_SetConfig+0x2cc>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d828      	bhi.n	80028ec <UART_SetConfig+0x128>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <UART_SetConfig+0xdc>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028ed 	.word	0x080028ed
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028e1 	.word	0x080028e1
 80028b4:	080028ed 	.word	0x080028ed
 80028b8:	080028ed 	.word	0x080028ed
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028db 	.word	0x080028db
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	080028ed 	.word	0x080028ed
 80028d0:	080028e7 	.word	0x080028e7
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e118      	b.n	8002b0c <UART_SetConfig+0x348>
 80028da:	2302      	movs	r3, #2
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e115      	b.n	8002b0c <UART_SetConfig+0x348>
 80028e0:	2304      	movs	r3, #4
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e112      	b.n	8002b0c <UART_SetConfig+0x348>
 80028e6:	2308      	movs	r3, #8
 80028e8:	77fb      	strb	r3, [r7, #31]
 80028ea:	e10f      	b.n	8002b0c <UART_SetConfig+0x348>
 80028ec:	2310      	movs	r3, #16
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e10c      	b.n	8002b0c <UART_SetConfig+0x348>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a68      	ldr	r2, [pc, #416]	; (8002a98 <UART_SetConfig+0x2d4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d120      	bne.n	800293e <UART_SetConfig+0x17a>
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <UART_SetConfig+0x2cc>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002906:	2b30      	cmp	r3, #48	; 0x30
 8002908:	d013      	beq.n	8002932 <UART_SetConfig+0x16e>
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d814      	bhi.n	8002938 <UART_SetConfig+0x174>
 800290e:	2b20      	cmp	r3, #32
 8002910:	d009      	beq.n	8002926 <UART_SetConfig+0x162>
 8002912:	2b20      	cmp	r3, #32
 8002914:	d810      	bhi.n	8002938 <UART_SetConfig+0x174>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <UART_SetConfig+0x15c>
 800291a:	2b10      	cmp	r3, #16
 800291c:	d006      	beq.n	800292c <UART_SetConfig+0x168>
 800291e:	e00b      	b.n	8002938 <UART_SetConfig+0x174>
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e0f2      	b.n	8002b0c <UART_SetConfig+0x348>
 8002926:	2302      	movs	r3, #2
 8002928:	77fb      	strb	r3, [r7, #31]
 800292a:	e0ef      	b.n	8002b0c <UART_SetConfig+0x348>
 800292c:	2304      	movs	r3, #4
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	e0ec      	b.n	8002b0c <UART_SetConfig+0x348>
 8002932:	2308      	movs	r3, #8
 8002934:	77fb      	strb	r3, [r7, #31]
 8002936:	e0e9      	b.n	8002b0c <UART_SetConfig+0x348>
 8002938:	2310      	movs	r3, #16
 800293a:	77fb      	strb	r3, [r7, #31]
 800293c:	e0e6      	b.n	8002b0c <UART_SetConfig+0x348>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a56      	ldr	r2, [pc, #344]	; (8002a9c <UART_SetConfig+0x2d8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d120      	bne.n	800298a <UART_SetConfig+0x1c6>
 8002948:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <UART_SetConfig+0x2cc>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002952:	2bc0      	cmp	r3, #192	; 0xc0
 8002954:	d013      	beq.n	800297e <UART_SetConfig+0x1ba>
 8002956:	2bc0      	cmp	r3, #192	; 0xc0
 8002958:	d814      	bhi.n	8002984 <UART_SetConfig+0x1c0>
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d009      	beq.n	8002972 <UART_SetConfig+0x1ae>
 800295e:	2b80      	cmp	r3, #128	; 0x80
 8002960:	d810      	bhi.n	8002984 <UART_SetConfig+0x1c0>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <UART_SetConfig+0x1a8>
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d006      	beq.n	8002978 <UART_SetConfig+0x1b4>
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x1c0>
 800296c:	2300      	movs	r3, #0
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e0cc      	b.n	8002b0c <UART_SetConfig+0x348>
 8002972:	2302      	movs	r3, #2
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e0c9      	b.n	8002b0c <UART_SetConfig+0x348>
 8002978:	2304      	movs	r3, #4
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e0c6      	b.n	8002b0c <UART_SetConfig+0x348>
 800297e:	2308      	movs	r3, #8
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e0c3      	b.n	8002b0c <UART_SetConfig+0x348>
 8002984:	2310      	movs	r3, #16
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e0c0      	b.n	8002b0c <UART_SetConfig+0x348>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <UART_SetConfig+0x2dc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d125      	bne.n	80029e0 <UART_SetConfig+0x21c>
 8002994:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <UART_SetConfig+0x2cc>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a2:	d017      	beq.n	80029d4 <UART_SetConfig+0x210>
 80029a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a8:	d817      	bhi.n	80029da <UART_SetConfig+0x216>
 80029aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ae:	d00b      	beq.n	80029c8 <UART_SetConfig+0x204>
 80029b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b4:	d811      	bhi.n	80029da <UART_SetConfig+0x216>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <UART_SetConfig+0x1fe>
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d006      	beq.n	80029ce <UART_SetConfig+0x20a>
 80029c0:	e00b      	b.n	80029da <UART_SetConfig+0x216>
 80029c2:	2300      	movs	r3, #0
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e0a1      	b.n	8002b0c <UART_SetConfig+0x348>
 80029c8:	2302      	movs	r3, #2
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	e09e      	b.n	8002b0c <UART_SetConfig+0x348>
 80029ce:	2304      	movs	r3, #4
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	e09b      	b.n	8002b0c <UART_SetConfig+0x348>
 80029d4:	2308      	movs	r3, #8
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e098      	b.n	8002b0c <UART_SetConfig+0x348>
 80029da:	2310      	movs	r3, #16
 80029dc:	77fb      	strb	r3, [r7, #31]
 80029de:	e095      	b.n	8002b0c <UART_SetConfig+0x348>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <UART_SetConfig+0x2e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d125      	bne.n	8002a36 <UART_SetConfig+0x272>
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <UART_SetConfig+0x2cc>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029f8:	d017      	beq.n	8002a2a <UART_SetConfig+0x266>
 80029fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029fe:	d817      	bhi.n	8002a30 <UART_SetConfig+0x26c>
 8002a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a04:	d00b      	beq.n	8002a1e <UART_SetConfig+0x25a>
 8002a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0a:	d811      	bhi.n	8002a30 <UART_SetConfig+0x26c>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <UART_SetConfig+0x254>
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d006      	beq.n	8002a24 <UART_SetConfig+0x260>
 8002a16:	e00b      	b.n	8002a30 <UART_SetConfig+0x26c>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e076      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e073      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a24:	2304      	movs	r3, #4
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e070      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e06d      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a30:	2310      	movs	r3, #16
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e06a      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <UART_SetConfig+0x2e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d138      	bne.n	8002ab2 <UART_SetConfig+0x2ee>
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <UART_SetConfig+0x2cc>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a4e:	d017      	beq.n	8002a80 <UART_SetConfig+0x2bc>
 8002a50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a54:	d82a      	bhi.n	8002aac <UART_SetConfig+0x2e8>
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	d00b      	beq.n	8002a74 <UART_SetConfig+0x2b0>
 8002a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a60:	d824      	bhi.n	8002aac <UART_SetConfig+0x2e8>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <UART_SetConfig+0x2aa>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d006      	beq.n	8002a7a <UART_SetConfig+0x2b6>
 8002a6c:	e01e      	b.n	8002aac <UART_SetConfig+0x2e8>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	e04b      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a74:	2302      	movs	r3, #2
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e048      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e045      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a80:	2308      	movs	r3, #8
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e042      	b.n	8002b0c <UART_SetConfig+0x348>
 8002a86:	bf00      	nop
 8002a88:	efff69f3 	.word	0xefff69f3
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	40004c00 	.word	0x40004c00
 8002aa0:	40005000 	.word	0x40005000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	40007800 	.word	0x40007800
 8002aac:	2310      	movs	r3, #16
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e02c      	b.n	8002b0c <UART_SetConfig+0x348>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <UART_SetConfig+0x4bc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d125      	bne.n	8002b08 <UART_SetConfig+0x344>
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <UART_SetConfig+0x4c0>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ac6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002aca:	d017      	beq.n	8002afc <UART_SetConfig+0x338>
 8002acc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ad0:	d817      	bhi.n	8002b02 <UART_SetConfig+0x33e>
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d00b      	beq.n	8002af0 <UART_SetConfig+0x32c>
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002adc:	d811      	bhi.n	8002b02 <UART_SetConfig+0x33e>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <UART_SetConfig+0x326>
 8002ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae6:	d006      	beq.n	8002af6 <UART_SetConfig+0x332>
 8002ae8:	e00b      	b.n	8002b02 <UART_SetConfig+0x33e>
 8002aea:	2300      	movs	r3, #0
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e00d      	b.n	8002b0c <UART_SetConfig+0x348>
 8002af0:	2302      	movs	r3, #2
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e00a      	b.n	8002b0c <UART_SetConfig+0x348>
 8002af6:	2304      	movs	r3, #4
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	e007      	b.n	8002b0c <UART_SetConfig+0x348>
 8002afc:	2308      	movs	r3, #8
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	e004      	b.n	8002b0c <UART_SetConfig+0x348>
 8002b02:	2310      	movs	r3, #16
 8002b04:	77fb      	strb	r3, [r7, #31]
 8002b06:	e001      	b.n	8002b0c <UART_SetConfig+0x348>
 8002b08:	2310      	movs	r3, #16
 8002b0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b14:	d15b      	bne.n	8002bce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d828      	bhi.n	8002b6e <UART_SetConfig+0x3aa>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <UART_SetConfig+0x360>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b49 	.word	0x08002b49
 8002b28:	08002b51 	.word	0x08002b51
 8002b2c:	08002b59 	.word	0x08002b59
 8002b30:	08002b6f 	.word	0x08002b6f
 8002b34:	08002b5f 	.word	0x08002b5f
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002b6f 	.word	0x08002b6f
 8002b40:	08002b6f 	.word	0x08002b6f
 8002b44:	08002b67 	.word	0x08002b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b48:	f7ff f856 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	61b8      	str	r0, [r7, #24]
        break;
 8002b4e:	e013      	b.n	8002b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7ff f866 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002b54:	61b8      	str	r0, [r7, #24]
        break;
 8002b56:	e00f      	b.n	8002b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <UART_SetConfig+0x4c4>)
 8002b5a:	61bb      	str	r3, [r7, #24]
        break;
 8002b5c:	e00c      	b.n	8002b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5e:	f7fe ff79 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8002b62:	61b8      	str	r0, [r7, #24]
        break;
 8002b64:	e008      	b.n	8002b78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	61bb      	str	r3, [r7, #24]
        break;
 8002b6c:	e004      	b.n	8002b78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	77bb      	strb	r3, [r7, #30]
        break;
 8002b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d074      	beq.n	8002c68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	005a      	lsls	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d916      	bls.n	8002bc8 <UART_SetConfig+0x404>
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d212      	bcs.n	8002bc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f023 030f 	bic.w	r3, r3, #15
 8002baa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	89fa      	ldrh	r2, [r7, #14]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	e04f      	b.n	8002c68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77bb      	strb	r3, [r7, #30]
 8002bcc:	e04c      	b.n	8002c68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bce:	7ffb      	ldrb	r3, [r7, #31]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d828      	bhi.n	8002c26 <UART_SetConfig+0x462>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <UART_SetConfig+0x418>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002c01 	.word	0x08002c01
 8002be0:	08002c09 	.word	0x08002c09
 8002be4:	08002c11 	.word	0x08002c11
 8002be8:	08002c27 	.word	0x08002c27
 8002bec:	08002c17 	.word	0x08002c17
 8002bf0:	08002c27 	.word	0x08002c27
 8002bf4:	08002c27 	.word	0x08002c27
 8002bf8:	08002c27 	.word	0x08002c27
 8002bfc:	08002c1f 	.word	0x08002c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7fe fffa 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002c04:	61b8      	str	r0, [r7, #24]
        break;
 8002c06:	e013      	b.n	8002c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7ff f80a 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002c0c:	61b8      	str	r0, [r7, #24]
        break;
 8002c0e:	e00f      	b.n	8002c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <UART_SetConfig+0x4c4>)
 8002c12:	61bb      	str	r3, [r7, #24]
        break;
 8002c14:	e00c      	b.n	8002c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c16:	f7fe ff1d 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8002c1a:	61b8      	str	r0, [r7, #24]
        break;
 8002c1c:	e008      	b.n	8002c30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e004      	b.n	8002c30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085a      	lsrs	r2, r3, #1
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d909      	bls.n	8002c64 <UART_SetConfig+0x4a0>
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d205      	bcs.n	8002c64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e001      	b.n	8002c68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c74:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40007c00 	.word	0x40007c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01a      	beq.n	8002da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8a:	d10a      	bne.n	8002da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de0:	f7fd ff72 	bl	8000cc8 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d10e      	bne.n	8002e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f831 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e027      	b.n	8002e62 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d10e      	bne.n	8002e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f81b 	bl	8002e6a <UART_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e011      	b.n	8002e62 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b09c      	sub	sp, #112	; 0x70
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	e0a7      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	f000 80a3 	beq.w	8002fcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fd ff1f 	bl	8000cc8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8002e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13f      	bne.n	8002f1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e6      	bne.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e5      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e068      	b.n	8002fee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d050      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f38:	d148      	bne.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e6      	bne.n	8002f44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	613b      	str	r3, [r7, #16]
   return(result);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3308      	adds	r3, #8
 8002f94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f96:	623a      	str	r2, [r7, #32]
 8002f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	69f9      	ldr	r1, [r7, #28]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e010      	b.n	8002fee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f43f af48 	beq.w	8002e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3770      	adds	r7, #112	; 0x70
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	; (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	; (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	; (800303c <__libc_init_array+0x44>)
 800300c:	f000 f820 	bl	8003050 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003128 	.word	0x08003128
 8003034:	08003128 	.word	0x08003128
 8003038:	08003128 	.word	0x08003128
 800303c:	0800312c 	.word	0x0800312c

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
