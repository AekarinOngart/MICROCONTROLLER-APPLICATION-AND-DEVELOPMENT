
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e9c  08002e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ea4  08002ea4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002eb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002eb8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f80  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001743  00000000  00000000  00029fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fe3  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009afc  00000000  00000000  0005243b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf77  00000000  00000000  0005bf37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148eae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  00148f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002e5c 	.word	0x08002e5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002e5c 	.word	0x08002e5c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b3a      	ldr	r3, [pc, #232]	; (800063c <MX_GPIO_Init+0x100>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a39      	ldr	r2, [pc, #228]	; (800063c <MX_GPIO_Init+0x100>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <MX_GPIO_Init+0x100>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b34      	ldr	r3, [pc, #208]	; (800063c <MX_GPIO_Init+0x100>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a33      	ldr	r2, [pc, #204]	; (800063c <MX_GPIO_Init+0x100>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0x100>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0x100>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a2d      	ldr	r2, [pc, #180]	; (800063c <MX_GPIO_Init+0x100>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0x100>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0x100>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a27      	ldr	r2, [pc, #156]	; (800063c <MX_GPIO_Init+0x100>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0x100>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <MX_GPIO_Init+0x104>)
 80005ba:	f000 fe2f 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <MX_GPIO_Init+0x108>)
 80005d6:	f000 fc75 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <MX_GPIO_Init+0x10c>)
 80005f0:	f000 fc68 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80005f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <MX_GPIO_Init+0x104>)
 800060e:	f000 fc59 	bl	8000ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 2);
 8000612:	2202      	movs	r2, #2
 8000614:	2102      	movs	r1, #2
 8000616:	2006      	movs	r0, #6
 8000618:	f000 fba1 	bl	8000d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800061c:	2006      	movs	r0, #6
 800061e:	f000 fbba 	bl	8000d96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	2028      	movs	r0, #40	; 0x28
 8000628:	f000 fb99 	bl	8000d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062c:	2028      	movs	r0, #40	; 0x28
 800062e:	f000 fbb2 	bl	8000d96 <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800
 8000648:	40020000 	.word	0x40020000

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000650:	f000 f8c2 	bl	80007d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fa27 	bl	8000aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f812 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff6e 	bl	800053c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000660:	f000 f968 	bl	8000934 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart3, (uint8_t *)".", 1, 100);
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	2201      	movs	r2, #1
 8000668:	4903      	ldr	r1, [pc, #12]	; (8000678 <main+0x2c>)
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <main+0x30>)
 800066c:	f001 ff2c 	bl	80024c8 <HAL_UART_Transmit>
	  	HAL_Delay(200);
 8000670:	20c8      	movs	r0, #200	; 0xc8
 8000672:	f000 fa75 	bl	8000b60 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)".", 1, 100);
 8000676:	e7f5      	b.n	8000664 <main+0x18>
 8000678:	08002e74 	.word	0x08002e74
 800067c:	20000028 	.word	0x20000028

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fbdc 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xb0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xb0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xb0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <SystemClock_Config+0xb4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <SystemClock_Config+0xb4>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <SystemClock_Config+0xb4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fde1 	bl	80012b4 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f89a 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f87a 	bl	8001810 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 f885 	bl	8000830 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == GPIO_PIN_13){
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000748:	d11b      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x4a>
	HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2203      	movs	r2, #3
 800074e:	491e      	ldr	r1, [pc, #120]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000750:	481e      	ldr	r0, [pc, #120]	; (80007cc <HAL_GPIO_EXTI_Callback+0x94>)
 8000752:	f001 feb9 	bl	80024c8 <HAL_UART_Transmit>
	HAL_Delay(200);
 8000756:	20c8      	movs	r0, #200	; 0xc8
 8000758:	f000 fa02 	bl	8000b60 <HAL_Delay>
	for (int i = 0; i<20; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e00b      	b.n	800077a <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_UART_Transmit(&huart3, (uint8_t *)"B", 1, 100);
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2201      	movs	r2, #1
 8000766:	491a      	ldr	r1, [pc, #104]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <HAL_GPIO_EXTI_Callback+0x94>)
 800076a:	f001 fead 	bl	80024c8 <HAL_UART_Transmit>
		HAL_Delay(200);
 800076e:	20c8      	movs	r0, #200	; 0xc8
 8000770:	f000 f9f6 	bl	8000b60 <HAL_Delay>
	for (int i = 0; i<20; i++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b13      	cmp	r3, #19
 800077e:	ddf0      	ble.n	8000762 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)"E", 1, 100);
			HAL_Delay(200);
		}
	}
}
 8000780:	e01d      	b.n	80007be <HAL_GPIO_EXTI_Callback+0x86>
else if (GPIO_Pin == GPIO_PIN_0){
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d11a      	bne.n	80007be <HAL_GPIO_EXTI_Callback+0x86>
	HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2203      	movs	r2, #3
 800078c:	490e      	ldr	r1, [pc, #56]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800078e:	480f      	ldr	r0, [pc, #60]	; (80007cc <HAL_GPIO_EXTI_Callback+0x94>)
 8000790:	f001 fe9a 	bl	80024c8 <HAL_UART_Transmit>
		HAL_Delay(200);
 8000794:	20c8      	movs	r0, #200	; 0xc8
 8000796:	f000 f9e3 	bl	8000b60 <HAL_Delay>
		for (int i = 0; i<20; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	e00b      	b.n	80007b8 <HAL_GPIO_EXTI_Callback+0x80>
			HAL_UART_Transmit(&huart3, (uint8_t *)"E", 1, 100);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <HAL_GPIO_EXTI_Callback+0x94>)
 80007a8:	f001 fe8e 	bl	80024c8 <HAL_UART_Transmit>
			HAL_Delay(200);
 80007ac:	20c8      	movs	r0, #200	; 0xc8
 80007ae:	f000 f9d7 	bl	8000b60 <HAL_Delay>
		for (int i = 0; i<20; i++)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b13      	cmp	r3, #19
 80007bc:	ddf0      	ble.n	80007a0 <HAL_GPIO_EXTI_Callback+0x68>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08002e78 	.word	0x08002e78
 80007cc:	20000028 	.word	0x20000028
 80007d0:	08002e7c 	.word	0x08002e7c
 80007d4:	08002e80 	.word	0x08002e80

080007d8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007ea:	f000 faef 	bl	8000dcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007fa:	231f      	movs	r3, #31
 80007fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007fe:	2387      	movs	r3, #135	; 0x87
 8000800:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000802:	2300      	movs	r3, #0
 8000804:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000806:	2300      	movs	r3, #0
 8000808:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800080a:	2301      	movs	r3, #1
 800080c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800080e:	2301      	movs	r3, #1
 8000810:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fb0d 	bl	8000e3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000822:	2004      	movs	r0, #4
 8000824:	f000 faea 	bl	8000dfc <HAL_MPU_Enable>

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000872:	2005      	movs	r0, #5
 8000874:	f000 fa68 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f926 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fcd1 	bl	8001284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80008e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <EXTI0_IRQHandler+0x18>)
 80008e8:	f000 fcb1 	bl	800124e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020400 	.word	0x40020400

080008f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008fc:	f000 fcc2 	bl	8001284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000900:	2101      	movs	r1, #1
 8000902:	4802      	ldr	r0, [pc, #8]	; (800090c <EXTI15_10_IRQHandler+0x18>)
 8000904:	f000 fca3 	bl	800124e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40020400 	.word	0x40020400

08000910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART3_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000978:	f001 fd58 	bl	800242c <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f7ff ff55 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000028 	.word	0x20000028
 8000990:	40004800 	.word	0x40004800

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0ae      	sub	sp, #184	; 0xb8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2290      	movs	r2, #144	; 0x90
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fa49 	bl	8002e4c <memset>
  if(uartHandle->Instance==USART3)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <HAL_UART_MspInit+0xb4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d13c      	bne.n	8000a3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f902 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009de:	f7ff ff27 	bl	8000830 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 80009e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 8000a3a:	f000 fa43 	bl	8000ec4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a3e:	bf00      	nop
 8000a40:	37b8      	adds	r7, #184	; 0xb8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40004800 	.word	0x40004800
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ff47 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 f9bf 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fde1 	bl	800064c <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	08002eac 	.word	0x08002eac
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	200000b4 	.word	0x200000b4

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>

08000aa6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f000 f94c 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f805 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab6:	f7ff fec1 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f967 	bl	8000db2 <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f92f 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200000b0 	.word	0x200000b0

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200000b0 	.word	0x200000b0

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	05fa0000 	.word	0x05fa0000

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff8e 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff29 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff3e 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff8e 	bl	8000c9c <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff31 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa2 	bl	8000d04 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000dd0:	f3bf 8f5f 	dmb	sy
}
 8000dd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_MPU_Disable+0x28>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_MPU_Disable+0x28>)
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_MPU_Disable+0x2c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	e000ed90 	.word	0xe000ed90

08000dfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_MPU_Enable+0x38>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MPU_Enable+0x3c>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_MPU_Enable+0x3c>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e20:	f3bf 8f6f 	isb	sy
}
 8000e24:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed90 	.word	0xe000ed90
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	785a      	ldrb	r2, [r3, #1]
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_MPU_ConfigRegion+0x84>)
 8000e4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d029      	beq.n	8000ea8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_MPU_ConfigRegion+0x84>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7b1b      	ldrb	r3, [r3, #12]
 8000e60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7adb      	ldrb	r3, [r3, #11]
 8000e66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a9b      	ldrb	r3, [r3, #10]
 8000e6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7b5b      	ldrb	r3, [r3, #13]
 8000e76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b9b      	ldrb	r3, [r3, #14]
 8000e7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7bdb      	ldrb	r3, [r3, #15]
 8000e86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7a5b      	ldrb	r3, [r3, #9]
 8000e8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7a1b      	ldrb	r3, [r3, #8]
 8000e96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ea2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000ea6:	e005      	b.n	8000eb4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_MPU_ConfigRegion+0x84>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_MPU_ConfigRegion+0x84>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed90 	.word	0xe000ed90

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e175      	b.n	80011d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8164 	bne.w	80011ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x56>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80be 	beq.w	80011ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b66      	ldr	r3, [pc, #408]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a65      	ldr	r2, [pc, #404]	; (80011e8 <HAL_GPIO_Init+0x324>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_GPIO_Init+0x324>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001066:	4a61      	ldr	r2, [pc, #388]	; (80011ec <HAL_GPIO_Init+0x328>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d037      	beq.n	8001102 <HAL_GPIO_Init+0x23e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d031      	beq.n	80010fe <HAL_GPIO_Init+0x23a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a56      	ldr	r2, [pc, #344]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x236>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a55      	ldr	r2, [pc, #340]	; (80011fc <HAL_GPIO_Init+0x338>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x232>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <HAL_GPIO_Init+0x33c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x22e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a53      	ldr	r2, [pc, #332]	; (8001204 <HAL_GPIO_Init+0x340>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x22a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x344>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x348>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x34c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x350>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x21a>
 80010da:	2309      	movs	r3, #9
 80010dc:	e012      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010de:	230a      	movs	r3, #10
 80010e0:	e010      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00e      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00c      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e00a      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e008      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x240>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x240>
 8001102:	2300      	movs	r3, #0
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f002 0203 	and.w	r2, r2, #3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4093      	lsls	r3, r2
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_GPIO_Init+0x328>)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a34      	ldr	r2, [pc, #208]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x354>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x354>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <HAL_GPIO_Init+0x354>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x354>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x354>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	f67f ae86 	bls.w	8000ee4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40021400 	.word	0x40021400
 8001208:	40021800 	.word	0x40021800
 800120c:	40021c00 	.word	0x40021c00
 8001210:	40022000 	.word	0x40022000
 8001214:	40022400 	.word	0x40022400
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43d9      	mvns	r1, r3
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	400b      	ands	r3, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa48 	bl	8000738 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e29b      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8087 	beq.w	80013e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d8:	4b96      	ldr	r3, [pc, #600]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d00c      	beq.n	80012fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e4:	4b93      	ldr	r3, [pc, #588]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d112      	bne.n	8001316 <HAL_RCC_OscConfig+0x62>
 80012f0:	4b90      	ldr	r3, [pc, #576]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fc:	d10b      	bne.n	8001316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fe:	4b8d      	ldr	r3, [pc, #564]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d06c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x130>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d168      	bne.n	80013e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e275      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x7a>
 8001320:	4b84      	ldr	r3, [pc, #528]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a83      	ldr	r2, [pc, #524]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e02e      	b.n	800138c <HAL_RCC_OscConfig+0xd8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x9c>
 8001336:	4b7f      	ldr	r3, [pc, #508]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a7e      	ldr	r2, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7b      	ldr	r2, [pc, #492]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e01d      	b.n	800138c <HAL_RCC_OscConfig+0xd8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0xc0>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a72      	ldr	r2, [pc, #456]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xd8>
 8001374:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a6e      	ldr	r2, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6b      	ldr	r2, [pc, #428]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fbd8 	bl	8000b48 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fbd4 	bl	8000b48 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e229      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0xe8>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbc4 	bl	8000b48 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fbc0 	bl	8000b48 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e215      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x110>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d069      	beq.n	80014c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x190>
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x17a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e1e9      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	493d      	ldr	r1, [pc, #244]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e040      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb76 	bl	8000b48 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fb72 	bl	8000b48 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1c7      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4929      	ldr	r1, [pc, #164]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
 8001492:	e018      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb52 	bl	8000b48 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb4e 	bl	8000b48 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1a3      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d038      	beq.n	8001544 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb2f 	bl	8000b48 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb2b 	bl	8000b48 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e180      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x23a>
 800150c:	e01a      	b.n	8001544 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_RCC_OscConfig+0x280>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff fb15 	bl	8000b48 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fb11 	bl	8000b48 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d903      	bls.n	8001538 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e166      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
 8001534:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	4b92      	ldr	r3, [pc, #584]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 800153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ee      	bne.n	8001522 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a4 	beq.w	800169a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a88      	ldr	r2, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b86      	ldr	r3, [pc, #536]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4b83      	ldr	r3, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x4d4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001586:	4b80      	ldr	r3, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x4d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7f      	ldr	r2, [pc, #508]	; (8001788 <HAL_RCC_OscConfig+0x4d4>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fad9 	bl	8000b48 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fad5 	bl	8000b48 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e12a      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x4d4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x31a>
 80015c0:	4b70      	ldr	r3, [pc, #448]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a6f      	ldr	r2, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e02d      	b.n	800162a <HAL_RCC_OscConfig+0x376>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x33c>
 80015d6:	4b6b      	ldr	r3, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	e01c      	b.n	800162a <HAL_RCC_OscConfig+0x376>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x35e>
 80015f8:	4b62      	ldr	r3, [pc, #392]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a61      	ldr	r2, [pc, #388]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0x376>
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff fa89 	bl	8000b48 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fa85 	bl	8000b48 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0d8      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ee      	beq.n	800163a <HAL_RCC_OscConfig+0x386>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fa73 	bl	8000b48 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fa6f 	bl	8000b48 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0c2      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a3c      	ldr	r2, [pc, #240]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80ae 	beq.w	8001800 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d06d      	beq.n	800178c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d14b      	bne.n	8001750 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a31      	ldr	r2, [pc, #196]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa40 	bl	8000b48 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fa3c 	bl	8000b48 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e091      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	019b      	lsls	r3, r3, #6
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	071b      	lsls	r3, r3, #28
 8001716:	491b      	ldr	r1, [pc, #108]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fa0e 	bl	8000b48 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa0a 	bl	8000b48 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e05f      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x47c>
 800174e:	e057      	b.n	8001800 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800175a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff f9f4 	bl	8000b48 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff f9f0 	bl	8000b48 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e045      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_RCC_OscConfig+0x4d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x4b0>
 8001782:	e03d      	b.n	8001800 <HAL_RCC_OscConfig+0x54c>
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x558>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d030      	beq.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d129      	bne.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d122      	bne.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d119      	bne.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	3b01      	subs	r3, #1
 80017d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d10f      	bne.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d0      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 020f 	bic.w	r2, r3, #15
 800183e:	4965      	ldr	r1, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e073      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4936      	ldr	r1, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001904:	f7ff f920 	bl	8000b48 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f91c 	bl	8000b48 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e053      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d210      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 020f 	bic.w	r2, r3, #15
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1cc>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1d0>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1d4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f87c 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08002e84 	.word	0x08002e84
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	b090      	sub	sp, #64	; 0x40
 80019ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d00d      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	f200 80a1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1a:	e09b      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a20:	e09b      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a26:	e098      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a32:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d028      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	627a      	str	r2, [r7, #36]	; 0x24
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a50:	2100      	movs	r1, #0
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a54:	fb03 f201 	mul.w	r2, r3, r1
 8001a58:	2300      	movs	r3, #0
 8001a5a:	fb00 f303 	mul.w	r3, r0, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a62:	fba0 1202 	umull	r1, r2, r0, r2
 8001a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a68:	460a      	mov	r2, r1
 8001a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6e:	4413      	add	r3, r2
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	2200      	movs	r2, #0
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	61fa      	str	r2, [r7, #28]
 8001a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a82:	f7fe fbd9 	bl	8000238 <__aeabi_uldivmod>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8e:	e053      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	2200      	movs	r2, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	617a      	str	r2, [r7, #20]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aa2:	f04f 0b00 	mov.w	fp, #0
 8001aa6:	4652      	mov	r2, sl
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0159      	lsls	r1, r3, #5
 8001ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab8:	0150      	lsls	r0, r2, #5
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ebb2 080a 	subs.w	r8, r2, sl
 8001ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ada:	ebb2 0408 	subs.w	r4, r2, r8
 8001ade:	eb63 0509 	sbc.w	r5, r3, r9
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	00eb      	lsls	r3, r5, #3
 8001aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af0:	00e2      	lsls	r2, r4, #3
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	eb14 030a 	adds.w	r3, r4, sl
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	eb45 030b 	adc.w	r3, r5, fp
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	2200      	movs	r2, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b2c:	f7fe fb84 	bl	8000238 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3740      	adds	r7, #64	; 0x40
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	017d7840 	.word	0x017d7840

08001b74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08002e94 	.word	0x08002e94

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffdc 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0b5b      	lsrs	r3, r3, #13
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08002e94 	.word	0x08002e94

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c04:	4b69      	ldr	r3, [pc, #420]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a68      	ldr	r2, [pc, #416]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0e:	6093      	str	r3, [r2, #8]
 8001c10:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	4964      	ldr	r1, [pc, #400]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d017      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	4959      	ldr	r1, [pc, #356]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c54:	d101      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c72:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	494a      	ldr	r1, [pc, #296]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 808b 	beq.w	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7fe ff30 	bl	8000b48 <HAL_GetTick>
 8001ce8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7fe ff2c 	bl	8000b48 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e38f      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d035      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d02e      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d114      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fef4 	bl	8000b48 <HAL_GetTick>
 8001d60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fef0 	bl	8000b48 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e351      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d92:	d111      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	4901      	ldr	r1, [pc, #4]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000
 8001db4:	0ffffcff 	.word	0x0ffffcff
 8001db8:	4bac      	ldr	r3, [pc, #688]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4aab      	ldr	r2, [pc, #684]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dc2:	6093      	str	r3, [r2, #8]
 8001dc4:	4ba9      	ldr	r3, [pc, #676]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	49a6      	ldr	r1, [pc, #664]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001de2:	4ba2      	ldr	r3, [pc, #648]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de8:	4aa0      	ldr	r2, [pc, #640]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001df2:	4b9e      	ldr	r3, [pc, #632]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	499b      	ldr	r1, [pc, #620]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e10:	4b96      	ldr	r3, [pc, #600]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1e:	4993      	ldr	r1, [pc, #588]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e40:	498a      	ldr	r1, [pc, #552]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e54:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e62:	4982      	ldr	r1, [pc, #520]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e76:	4b7d      	ldr	r3, [pc, #500]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	4979      	ldr	r1, [pc, #484]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e98:	4b74      	ldr	r3, [pc, #464]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	f023 0203 	bic.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4971      	ldr	r1, [pc, #452]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eba:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f023 020c 	bic.w	r2, r3, #12
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	4968      	ldr	r1, [pc, #416]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4960      	ldr	r1, [pc, #384]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0c:	4957      	ldr	r1, [pc, #348]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f20:	4b52      	ldr	r3, [pc, #328]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	494f      	ldr	r1, [pc, #316]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	4946      	ldr	r1, [pc, #280]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	493e      	ldr	r1, [pc, #248]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fb6:	492d      	ldr	r1, [pc, #180]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d011      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd8:	4924      	ldr	r1, [pc, #144]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe8:	d101      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	4914      	ldr	r1, [pc, #80]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800203c:	490b      	ldr	r1, [pc, #44]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00f      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002060:	4902      	ldr	r1, [pc, #8]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002068:	e002      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800207c:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	4986      	ldr	r1, [pc, #536]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b0:	497d      	ldr	r1, [pc, #500]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d006      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80d6 	beq.w	8002278 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d8:	f7fe fd36 	bl	8000b48 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e0:	f7fe fd32 	bl	8000b48 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e195      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d021      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11d      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002126:	0e1b      	lsrs	r3, r3, #24
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	019a      	lsls	r2, r3, #6
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	071b      	lsls	r3, r3, #28
 8002146:	4958      	ldr	r1, [pc, #352]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02e      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002178:	d129      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800217a:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002188:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218e:	0f1b      	lsrs	r3, r3, #28
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	019a      	lsls	r2, r3, #6
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	493e      	ldr	r1, [pc, #248]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021b6:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021bc:	f023 021f 	bic.w	r2, r3, #31
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	3b01      	subs	r3, #1
 80021c6:	4938      	ldr	r1, [pc, #224]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01d      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e0:	0e1b      	lsrs	r3, r3, #24
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ee:	0f1b      	lsrs	r3, r3, #28
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	019a      	lsls	r2, r3, #6
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	4926      	ldr	r1, [pc, #152]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d011      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	019a      	lsls	r2, r3, #6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	071b      	lsls	r3, r3, #28
 800223e:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002252:	f7fe fc79 	bl	8000b48 <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800225a:	f7fe fc75 	bl	8000b48 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0d8      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 80ce 	bne.w	800241c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7fe fc5c 	bl	8000b48 <HAL_GetTick>
 8002290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002292:	e00b      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002294:	f7fe fc58 	bl	8000b48 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d904      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0bb      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022ac:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b8:	d0ec      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02e      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d12a      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	0f1b      	lsrs	r3, r3, #28
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	019a      	lsls	r2, r3, #6
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	4944      	ldr	r1, [pc, #272]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	493d      	ldr	r1, [pc, #244]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d022      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234c:	d11d      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	0e1b      	lsrs	r3, r3, #24
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	071b      	lsls	r3, r3, #28
 8002382:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d028      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	0e1b      	lsrs	r3, r3, #24
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	019a      	lsls	r2, r3, #6
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	4917      	ldr	r1, [pc, #92]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	4911      	ldr	r1, [pc, #68]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fba8 	bl	8000b48 <HAL_GetTick>
 80023f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023fc:	f7fe fba4 	bl	8000b48 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e007      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241a:	d1ef      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e040      	b.n	80024c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe faa0 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	; 0x24
 8002458:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8b0 	bl	80025d0 <UART_SetConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fb08 	bl	8002a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fb8f 	bl	8002bdc <UART_CheckIdleState>
 80024be:	4603      	mov	r3, r0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d171      	bne.n	80025c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_UART_Transmit+0x24>
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e06a      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2221      	movs	r2, #33	; 0x21
 80024fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024fe:	f7fe fb23 	bl	8000b48 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d108      	bne.n	8002530 <HAL_UART_Transmit+0x68>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e003      	b.n	8002538 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002538:	e02c      	b.n	8002594 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fb96 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e038      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3302      	adds	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e007      	b.n	8002582 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1cc      	bne.n	800253a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fb63 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e005      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e000      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4ba6      	ldr	r3, [pc, #664]	; (8002894 <UART_SetConfig+0x2c4>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	6979      	ldr	r1, [r7, #20]
 8002604:	430b      	orrs	r3, r1
 8002606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a94      	ldr	r2, [pc, #592]	; (8002898 <UART_SetConfig+0x2c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d120      	bne.n	800268e <UART_SetConfig+0xbe>
 800264c:	4b93      	ldr	r3, [pc, #588]	; (800289c <UART_SetConfig+0x2cc>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b03      	cmp	r3, #3
 8002658:	d816      	bhi.n	8002688 <UART_SetConfig+0xb8>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_SetConfig+0x90>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002671 	.word	0x08002671
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002677 	.word	0x08002677
 800266c:	08002683 	.word	0x08002683
 8002670:	2301      	movs	r3, #1
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e150      	b.n	8002918 <UART_SetConfig+0x348>
 8002676:	2302      	movs	r3, #2
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e14d      	b.n	8002918 <UART_SetConfig+0x348>
 800267c:	2304      	movs	r3, #4
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e14a      	b.n	8002918 <UART_SetConfig+0x348>
 8002682:	2308      	movs	r3, #8
 8002684:	77fb      	strb	r3, [r7, #31]
 8002686:	e147      	b.n	8002918 <UART_SetConfig+0x348>
 8002688:	2310      	movs	r3, #16
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	e144      	b.n	8002918 <UART_SetConfig+0x348>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <UART_SetConfig+0x2d0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d132      	bne.n	80026fe <UART_SetConfig+0x12e>
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <UART_SetConfig+0x2cc>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d828      	bhi.n	80026f8 <UART_SetConfig+0x128>
 80026a6:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <UART_SetConfig+0xdc>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026e1 	.word	0x080026e1
 80026b0:	080026f9 	.word	0x080026f9
 80026b4:	080026f9 	.word	0x080026f9
 80026b8:	080026f9 	.word	0x080026f9
 80026bc:	080026ed 	.word	0x080026ed
 80026c0:	080026f9 	.word	0x080026f9
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	080026e7 	.word	0x080026e7
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	080026f9 	.word	0x080026f9
 80026dc:	080026f3 	.word	0x080026f3
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
 80026e4:	e118      	b.n	8002918 <UART_SetConfig+0x348>
 80026e6:	2302      	movs	r3, #2
 80026e8:	77fb      	strb	r3, [r7, #31]
 80026ea:	e115      	b.n	8002918 <UART_SetConfig+0x348>
 80026ec:	2304      	movs	r3, #4
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	e112      	b.n	8002918 <UART_SetConfig+0x348>
 80026f2:	2308      	movs	r3, #8
 80026f4:	77fb      	strb	r3, [r7, #31]
 80026f6:	e10f      	b.n	8002918 <UART_SetConfig+0x348>
 80026f8:	2310      	movs	r3, #16
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e10c      	b.n	8002918 <UART_SetConfig+0x348>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a68      	ldr	r2, [pc, #416]	; (80028a4 <UART_SetConfig+0x2d4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d120      	bne.n	800274a <UART_SetConfig+0x17a>
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <UART_SetConfig+0x2cc>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002712:	2b30      	cmp	r3, #48	; 0x30
 8002714:	d013      	beq.n	800273e <UART_SetConfig+0x16e>
 8002716:	2b30      	cmp	r3, #48	; 0x30
 8002718:	d814      	bhi.n	8002744 <UART_SetConfig+0x174>
 800271a:	2b20      	cmp	r3, #32
 800271c:	d009      	beq.n	8002732 <UART_SetConfig+0x162>
 800271e:	2b20      	cmp	r3, #32
 8002720:	d810      	bhi.n	8002744 <UART_SetConfig+0x174>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <UART_SetConfig+0x15c>
 8002726:	2b10      	cmp	r3, #16
 8002728:	d006      	beq.n	8002738 <UART_SetConfig+0x168>
 800272a:	e00b      	b.n	8002744 <UART_SetConfig+0x174>
 800272c:	2300      	movs	r3, #0
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	e0f2      	b.n	8002918 <UART_SetConfig+0x348>
 8002732:	2302      	movs	r3, #2
 8002734:	77fb      	strb	r3, [r7, #31]
 8002736:	e0ef      	b.n	8002918 <UART_SetConfig+0x348>
 8002738:	2304      	movs	r3, #4
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e0ec      	b.n	8002918 <UART_SetConfig+0x348>
 800273e:	2308      	movs	r3, #8
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e0e9      	b.n	8002918 <UART_SetConfig+0x348>
 8002744:	2310      	movs	r3, #16
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e0e6      	b.n	8002918 <UART_SetConfig+0x348>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <UART_SetConfig+0x2d8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d120      	bne.n	8002796 <UART_SetConfig+0x1c6>
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <UART_SetConfig+0x2cc>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800275e:	2bc0      	cmp	r3, #192	; 0xc0
 8002760:	d013      	beq.n	800278a <UART_SetConfig+0x1ba>
 8002762:	2bc0      	cmp	r3, #192	; 0xc0
 8002764:	d814      	bhi.n	8002790 <UART_SetConfig+0x1c0>
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d009      	beq.n	800277e <UART_SetConfig+0x1ae>
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d810      	bhi.n	8002790 <UART_SetConfig+0x1c0>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <UART_SetConfig+0x1a8>
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d006      	beq.n	8002784 <UART_SetConfig+0x1b4>
 8002776:	e00b      	b.n	8002790 <UART_SetConfig+0x1c0>
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e0cc      	b.n	8002918 <UART_SetConfig+0x348>
 800277e:	2302      	movs	r3, #2
 8002780:	77fb      	strb	r3, [r7, #31]
 8002782:	e0c9      	b.n	8002918 <UART_SetConfig+0x348>
 8002784:	2304      	movs	r3, #4
 8002786:	77fb      	strb	r3, [r7, #31]
 8002788:	e0c6      	b.n	8002918 <UART_SetConfig+0x348>
 800278a:	2308      	movs	r3, #8
 800278c:	77fb      	strb	r3, [r7, #31]
 800278e:	e0c3      	b.n	8002918 <UART_SetConfig+0x348>
 8002790:	2310      	movs	r3, #16
 8002792:	77fb      	strb	r3, [r7, #31]
 8002794:	e0c0      	b.n	8002918 <UART_SetConfig+0x348>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a44      	ldr	r2, [pc, #272]	; (80028ac <UART_SetConfig+0x2dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d125      	bne.n	80027ec <UART_SetConfig+0x21c>
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <UART_SetConfig+0x2cc>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ae:	d017      	beq.n	80027e0 <UART_SetConfig+0x210>
 80027b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b4:	d817      	bhi.n	80027e6 <UART_SetConfig+0x216>
 80027b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ba:	d00b      	beq.n	80027d4 <UART_SetConfig+0x204>
 80027bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c0:	d811      	bhi.n	80027e6 <UART_SetConfig+0x216>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <UART_SetConfig+0x1fe>
 80027c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ca:	d006      	beq.n	80027da <UART_SetConfig+0x20a>
 80027cc:	e00b      	b.n	80027e6 <UART_SetConfig+0x216>
 80027ce:	2300      	movs	r3, #0
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e0a1      	b.n	8002918 <UART_SetConfig+0x348>
 80027d4:	2302      	movs	r3, #2
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e09e      	b.n	8002918 <UART_SetConfig+0x348>
 80027da:	2304      	movs	r3, #4
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e09b      	b.n	8002918 <UART_SetConfig+0x348>
 80027e0:	2308      	movs	r3, #8
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e098      	b.n	8002918 <UART_SetConfig+0x348>
 80027e6:	2310      	movs	r3, #16
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e095      	b.n	8002918 <UART_SetConfig+0x348>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <UART_SetConfig+0x2e0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d125      	bne.n	8002842 <UART_SetConfig+0x272>
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <UART_SetConfig+0x2cc>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002804:	d017      	beq.n	8002836 <UART_SetConfig+0x266>
 8002806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800280a:	d817      	bhi.n	800283c <UART_SetConfig+0x26c>
 800280c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002810:	d00b      	beq.n	800282a <UART_SetConfig+0x25a>
 8002812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002816:	d811      	bhi.n	800283c <UART_SetConfig+0x26c>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <UART_SetConfig+0x254>
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d006      	beq.n	8002830 <UART_SetConfig+0x260>
 8002822:	e00b      	b.n	800283c <UART_SetConfig+0x26c>
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e076      	b.n	8002918 <UART_SetConfig+0x348>
 800282a:	2302      	movs	r3, #2
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e073      	b.n	8002918 <UART_SetConfig+0x348>
 8002830:	2304      	movs	r3, #4
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e070      	b.n	8002918 <UART_SetConfig+0x348>
 8002836:	2308      	movs	r3, #8
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e06d      	b.n	8002918 <UART_SetConfig+0x348>
 800283c:	2310      	movs	r3, #16
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e06a      	b.n	8002918 <UART_SetConfig+0x348>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <UART_SetConfig+0x2e4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d138      	bne.n	80028be <UART_SetConfig+0x2ee>
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <UART_SetConfig+0x2cc>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800285a:	d017      	beq.n	800288c <UART_SetConfig+0x2bc>
 800285c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002860:	d82a      	bhi.n	80028b8 <UART_SetConfig+0x2e8>
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	d00b      	beq.n	8002880 <UART_SetConfig+0x2b0>
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d824      	bhi.n	80028b8 <UART_SetConfig+0x2e8>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <UART_SetConfig+0x2aa>
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d006      	beq.n	8002886 <UART_SetConfig+0x2b6>
 8002878:	e01e      	b.n	80028b8 <UART_SetConfig+0x2e8>
 800287a:	2300      	movs	r3, #0
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e04b      	b.n	8002918 <UART_SetConfig+0x348>
 8002880:	2302      	movs	r3, #2
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e048      	b.n	8002918 <UART_SetConfig+0x348>
 8002886:	2304      	movs	r3, #4
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e045      	b.n	8002918 <UART_SetConfig+0x348>
 800288c:	2308      	movs	r3, #8
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e042      	b.n	8002918 <UART_SetConfig+0x348>
 8002892:	bf00      	nop
 8002894:	efff69f3 	.word	0xefff69f3
 8002898:	40011000 	.word	0x40011000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40004400 	.word	0x40004400
 80028a4:	40004800 	.word	0x40004800
 80028a8:	40004c00 	.word	0x40004c00
 80028ac:	40005000 	.word	0x40005000
 80028b0:	40011400 	.word	0x40011400
 80028b4:	40007800 	.word	0x40007800
 80028b8:	2310      	movs	r3, #16
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e02c      	b.n	8002918 <UART_SetConfig+0x348>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a72      	ldr	r2, [pc, #456]	; (8002a8c <UART_SetConfig+0x4bc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d125      	bne.n	8002914 <UART_SetConfig+0x344>
 80028c8:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <UART_SetConfig+0x4c0>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028d6:	d017      	beq.n	8002908 <UART_SetConfig+0x338>
 80028d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028dc:	d817      	bhi.n	800290e <UART_SetConfig+0x33e>
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e2:	d00b      	beq.n	80028fc <UART_SetConfig+0x32c>
 80028e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e8:	d811      	bhi.n	800290e <UART_SetConfig+0x33e>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <UART_SetConfig+0x326>
 80028ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f2:	d006      	beq.n	8002902 <UART_SetConfig+0x332>
 80028f4:	e00b      	b.n	800290e <UART_SetConfig+0x33e>
 80028f6:	2300      	movs	r3, #0
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e00d      	b.n	8002918 <UART_SetConfig+0x348>
 80028fc:	2302      	movs	r3, #2
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e00a      	b.n	8002918 <UART_SetConfig+0x348>
 8002902:	2304      	movs	r3, #4
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e007      	b.n	8002918 <UART_SetConfig+0x348>
 8002908:	2308      	movs	r3, #8
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e004      	b.n	8002918 <UART_SetConfig+0x348>
 800290e:	2310      	movs	r3, #16
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e001      	b.n	8002918 <UART_SetConfig+0x348>
 8002914:	2310      	movs	r3, #16
 8002916:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	d15b      	bne.n	80029da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d828      	bhi.n	800297a <UART_SetConfig+0x3aa>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <UART_SetConfig+0x360>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002955 	.word	0x08002955
 8002934:	0800295d 	.word	0x0800295d
 8002938:	08002965 	.word	0x08002965
 800293c:	0800297b 	.word	0x0800297b
 8002940:	0800296b 	.word	0x0800296b
 8002944:	0800297b 	.word	0x0800297b
 8002948:	0800297b 	.word	0x0800297b
 800294c:	0800297b 	.word	0x0800297b
 8002950:	08002973 	.word	0x08002973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002954:	f7ff f91a 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8002958:	61b8      	str	r0, [r7, #24]
        break;
 800295a:	e013      	b.n	8002984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800295c:	f7ff f92a 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002960:	61b8      	str	r0, [r7, #24]
        break;
 8002962:	e00f      	b.n	8002984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <UART_SetConfig+0x4c4>)
 8002966:	61bb      	str	r3, [r7, #24]
        break;
 8002968:	e00c      	b.n	8002984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800296a:	f7ff f83d 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800296e:	61b8      	str	r0, [r7, #24]
        break;
 8002970:	e008      	b.n	8002984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002976:	61bb      	str	r3, [r7, #24]
        break;
 8002978:	e004      	b.n	8002984 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	77bb      	strb	r3, [r7, #30]
        break;
 8002982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d074      	beq.n	8002a74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	005a      	lsls	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	d916      	bls.n	80029d4 <UART_SetConfig+0x404>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d212      	bcs.n	80029d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f023 030f 	bic.w	r3, r3, #15
 80029b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	89fa      	ldrh	r2, [r7, #14]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	e04f      	b.n	8002a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	77bb      	strb	r3, [r7, #30]
 80029d8:	e04c      	b.n	8002a74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d828      	bhi.n	8002a32 <UART_SetConfig+0x462>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0x418>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a0d 	.word	0x08002a0d
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	08002a1d 	.word	0x08002a1d
 80029f4:	08002a33 	.word	0x08002a33
 80029f8:	08002a23 	.word	0x08002a23
 80029fc:	08002a33 	.word	0x08002a33
 8002a00:	08002a33 	.word	0x08002a33
 8002a04:	08002a33 	.word	0x08002a33
 8002a08:	08002a2b 	.word	0x08002a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff f8be 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8002a10:	61b8      	str	r0, [r7, #24]
        break;
 8002a12:	e013      	b.n	8002a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff f8ce 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002a18:	61b8      	str	r0, [r7, #24]
        break;
 8002a1a:	e00f      	b.n	8002a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <UART_SetConfig+0x4c4>)
 8002a1e:	61bb      	str	r3, [r7, #24]
        break;
 8002a20:	e00c      	b.n	8002a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a22:	f7fe ffe1 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 8002a26:	61b8      	str	r0, [r7, #24]
        break;
 8002a28:	e008      	b.n	8002a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	61bb      	str	r3, [r7, #24]
        break;
 8002a30:	e004      	b.n	8002a3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	77bb      	strb	r3, [r7, #30]
        break;
 8002a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d018      	beq.n	8002a74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085a      	lsrs	r2, r3, #1
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d909      	bls.n	8002a70 <UART_SetConfig+0x4a0>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a62:	d205      	bcs.n	8002a70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e001      	b.n	8002a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40007c00 	.word	0x40007c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400

08002a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01a      	beq.n	8002bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b96:	d10a      	bne.n	8002bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bec:	f7fd ffac 	bl	8000b48 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d10e      	bne.n	8002c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f831 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e027      	b.n	8002c6e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d10e      	bne.n	8002c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f81b 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e011      	b.n	8002c6e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b09c      	sub	sp, #112	; 0x70
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c86:	e0a7      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	f000 80a3 	beq.w	8002dd8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fd ff59 	bl	8000b48 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d13f      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e6      	bne.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e068      	b.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d050      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d148      	bne.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e6      	bne.n	8002d50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3308      	adds	r3, #8
 8002d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	613b      	str	r3, [r7, #16]
   return(result);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002da2:	623a      	str	r2, [r7, #32]
 8002da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	69f9      	ldr	r1, [r7, #28]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e5      	bne.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e010      	b.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f43f af48 	beq.w	8002c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3770      	adds	r7, #112	; 0x70
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 f820 	bl	8002e5c <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08002ea4 	.word	0x08002ea4
 8002e40:	08002ea4 	.word	0x08002ea4
 8002e44:	08002ea4 	.word	0x08002ea4
 8002e48:	08002ea8 	.word	0x08002ea8

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
